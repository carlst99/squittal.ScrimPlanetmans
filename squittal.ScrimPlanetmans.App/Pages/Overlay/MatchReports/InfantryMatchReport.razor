@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models
@if (_renderedStatsType != null && _renderedStatsType == OverlayStatsDisplayType.InfantryScores)
{
    <div id="MatchStats" class="match-report infantry @GetReportCss()">

        @if (_renderedCompact)
        {
            <div class="team-report-container team1">
                <InfantryMatchReportTeam i_TeamOrdinal=1 i_ShowHsr=_renderedShowHsr i_UseObjectiveStats=false />
            </div>
            <div class="team-report-container team2">
                <InfantryMatchReportTeam i_TeamOrdinal=2 i_ShowHsr=_renderedShowHsr i_UseObjectiveStats=false />
            </div>
        }
        else
        {
            <InfantryMatchReportTeam i_TeamOrdinal=1 i_ShowHsr=_renderedShowHsr i_UseObjectiveStats=false />
            <InfantryMatchReportTeam i_TeamOrdinal=2 i_ShowHsr=_renderedShowHsr i_UseObjectiveStats=false />
        }

    </div>
}
else if (_renderedStatsType != null && _renderedStatsType == OverlayStatsDisplayType.InfantryObjective)
{
    <div id="MatchStats" class="match-report infantry @GetReportCss()">
        
        @if (_renderedCompact)
        {
            <div class="team-report-container team1">
                <InfantryMatchReportTeam i_TeamOrdinal=1 i_ShowHsr=_renderedShowHsr i_UseObjectiveStats=true />
            </div>
            <div class="team-report-container team2">
                <InfantryMatchReportTeam i_TeamOrdinal=2 i_ShowHsr=_renderedShowHsr i_UseObjectiveStats=true />
            </div>
        }
        else
        {
            <InfantryMatchReportTeam i_TeamOrdinal=1 i_ShowHsr=_renderedShowHsr i_UseObjectiveStats=true />
            <InfantryMatchReportTeam i_TeamOrdinal=2 i_ShowHsr=_renderedShowHsr i_UseObjectiveStats=true />
        }

    </div>
}

@code {
    [Parameter]
    public bool i_ShowHsr { get; set; } = true;
    private bool _renderedShowHsr { get; set; } = true;

    [Parameter]
    public bool i_Compact { get; set; }
    private bool _renderedCompact { get; set; } = false;

    [Parameter]
    public OverlayStatsDisplayType i_StatsType { get; set; }
    private OverlayStatsDisplayType? _renderedStatsType { get; set; }

    [Parameter]
    public bool? i_ShowPlayerScoresSetting { get; set; }
    private bool? _renderedShowPlayerScoresSetting { get; set; }

    private bool _resolvedShowScores { get; set; } = true;

    private OverlayStatsDisplayType _defaultStatsType = OverlayStatsDisplayType.InfantryScores;


    #region Initialization Methods
    protected override void OnParametersSet()
    {
        var stateHasChanged = false;

        if (_renderedShowHsr != i_ShowHsr)
        {
            _renderedShowHsr = i_ShowHsr;

            stateHasChanged = true;
        }

        if (_renderedCompact != i_Compact)
        {
            _renderedCompact = i_Compact;

            stateHasChanged = true;
        }

        var showScoreSettingsChanged = false;

        if (_renderedStatsType != i_StatsType)
        {
            _renderedStatsType = (i_StatsType == OverlayStatsDisplayType.InfantryObjective) ? i_StatsType : _defaultStatsType;

            showScoreSettingsChanged = true;
        }

        if (i_ShowPlayerScoresSetting != _renderedShowPlayerScoresSetting)
        {
            _renderedShowPlayerScoresSetting = i_ShowPlayerScoresSetting;

            showScoreSettingsChanged = true;
        }

        if (showScoreSettingsChanged)
        {
            var showScoresChanged = ResolveShowPlayerScores();

            if (showScoresChanged)
            {
                stateHasChanged = true;
            }
        }

        if (stateHasChanged)
        {
            InvokeAsyncStateHasChanged();
        }


    }
    #endregion Initialization Methods

    private string GetReportCss()
    {
        var hsrCssClass = _renderedShowHsr ? string.Empty : "no-hsr";

        var statsCssClass = (_renderedStatsType == OverlayStatsDisplayType.InfantryObjective) ? "objective-stats" : string.Empty;

        var compactCssClass = i_Compact ? "compact" : string.Empty;

        var scores = _resolvedShowScores ? "status-scores" : string.Empty;

        return $"{hsrCssClass} {statsCssClass} {compactCssClass} {scores}";
    }

    private bool ResolveShowPlayerScores()
    {
        var previousShowScores = _renderedShowPlayerScoresSetting;

        if (_renderedShowPlayerScoresSetting != null)
        {
            _resolvedShowScores = (bool)_renderedShowPlayerScoresSetting;

            return _resolvedShowScores != previousShowScores;
        }

        _resolvedShowScores = _renderedStatsType switch
        {
            OverlayStatsDisplayType.InfantryScores => true,
            OverlayStatsDisplayType.InfantryObjective => false,
            OverlayStatsDisplayType.AirVehicleScores => true,
            OverlayStatsDisplayType.GroundVehicleScores => true,
            OverlayStatsDisplayType.CombinedArmsObjective => false,
            _ => true
        };

        return _resolvedShowScores != previousShowScores;
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}