@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models
@if (_renderedStatsType != null && UseInfantryMatchReport())
{
    <InfantryMatchReport i_ShowHsr=i_ShowHsr i_StatsType=(OverlayStatsDisplayType)_renderedStatsType i_Compact=_renderedCompact i_ShowPlayerScoresSetting=i_ShowPlayerScoresSetting />
}

@code {
    [Parameter]
    public bool i_ShowHsr { get; set; } = true;

    [Parameter]
    public bool? i_ShowPlayerScoresSetting { get; set; }

    [Parameter]
    public bool i_Compact { get; set; }
    private bool _renderedCompact { get; set; } = false;

    [Parameter]
    public OverlayStatsDisplayType i_StatsType { get; set; }
    private OverlayStatsDisplayType? _renderedStatsType { get; set; }

    private OverlayStatsDisplayType _defaultStatsType = OverlayStatsDisplayType.InfantryScores;


    #region Initialization Methods
    protected override void OnParametersSet()
    {
        var stateHasChanged = false;

        if (_renderedCompact != i_Compact)
        {
            _renderedCompact = i_Compact;

            stateHasChanged = true;
        }

        if (_renderedStatsType != i_StatsType)
        {
            _renderedStatsType = (i_StatsType == OverlayStatsDisplayType.InfantryObjective) ? i_StatsType : _defaultStatsType;

            stateHasChanged = true;
        }

        if (stateHasChanged)
        {
            InvokeAsyncStateHasChanged();
        }


    }
    #endregion Initialization Methods

    private bool UseInfantryMatchReport()
    {
        switch (_renderedStatsType)
        {
            case OverlayStatsDisplayType.InfantryScores:
                return true;

            case OverlayStatsDisplayType.InfantryObjective:
                return true;

            default:
                return false;
        }
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}