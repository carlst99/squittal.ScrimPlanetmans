@inject IScrimTeamsManager ScrimTeamsManager
@inject IScrimMessageBroadcastService MessageService

@using squittal.ScrimPlanetmans.App.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.ScrimMatch.Models
@using squittal.ScrimPlanetmans.App.Services.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.ScrimMatch
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.Models
@implements IDisposable

@if (_team != null)
{
    <div id="@($"{_team.Alias}-stats")" class="stats-row team">
        <div id="@($"{_team.Alias}-label")" class="label">@_team.Alias</div>
        <div id="@($"{_team.Alias}-score")" class="score stats-value" style="opacity: @GetStatOpacity(_renderedEventAggregate.Points);">@_renderedEventAggregate.Points</div>
        
        @if (!_renderedUseObjectiveStats)
        {
            <div id="@($"{_team.Alias}-net")" class="net stats-value">@_renderedEventAggregate.NetScore</div>
        }

        <div id="@($"{_team.Alias}-kills")" class="kills stats-value" style="opacity: @GetStatOpacity(_renderedEventAggregate.Kills);">@_renderedEventAggregate.Kills</div>
        <div id="@($"{_team.Alias}-deaths")" class="deaths stats-value" style="opacity: @GetStatOpacity(_renderedEventAggregate.Deaths);">@_renderedEventAggregate.Deaths</div>
        
        @if (_renderedShowHsr && !_renderedUseObjectiveStats)
        {
            <div id="@($"{_team.Alias}-hsr")" class="hsr stats-value" style="opacity: @GetStatOpacity((int)_renderedEventAggregate.HeadshotRatio);">@Math.Round(_renderedEventAggregate.HeadshotRatio, 0)<span style="font-size: small;">%</span></div>
        }

        @if (_renderedUseObjectiveStats)
        {
            <div id="@($"{_team.Alias}-objective-ticks")" class="objective-ticks stats-value" style="opacity: @GetStatOpacity(_renderedEventAggregate.ObjectiveTicks);">@_renderedEventAggregate.ObjectiveTicks</div>
            <div id="@($"{_team.Alias}-revives")" class="revives stats-value" style="opacity: @GetStatOpacity(_renderedEventAggregate.RevivesGiven);">@_renderedEventAggregate.RevivesGiven</div>
        }

        <div id="@($"{_team.Alias}-assists")" class="assists stats-value" style="opacity: @GetStatOpacity(_renderedEventAggregate.DamageAssists);">@_renderedEventAggregate.DamageAssists</div>
        <div id="@($"{_team.Alias}-utils")" class="utils stats-value" style="opacity: @GetStatOpacity(_renderedEventAggregate.GrenadeAssists);">@_renderedEventAggregate.GrenadeAssists</div>
    </div>
}

@code {
    [Parameter]
    public TeamDefinition i_TeamOrdinal { get; set; }
    private TeamDefinition _renderedTeamOrdinal { get; set; }

    [Parameter]
    public bool i_ShowHsr { get; set; } = true;
    private bool _renderedShowHsr { get; set; } = true;

    [Parameter]
    public bool i_UseObjectiveStats { get; set; }
    private bool _renderedUseObjectiveStats { get; set; }


    private Team _team { get; set; }


    private ScrimEventAggregate _renderedEventAggregate { get; set; } = new ScrimEventAggregate();

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamStatUpdateEvent += ReceiveTeamStatUpdateEvent;
        MessageService.RaiseTeamAliasChangeEvent += ReceiveTeamAliasChangeEvent;

        if (_team == null)
        {
            _team = ScrimTeamsManager.GetTeam(i_TeamOrdinal);
            _renderedEventAggregate = new ScrimEventAggregate();
            _renderedEventAggregate.Add(_team.EventAggregate);
        }
        else
        {
            _renderedEventAggregate = new ScrimEventAggregate();
            _renderedEventAggregate.Add(_team.EventAggregate);
        }
    }

    public void Dispose()
    {
        MessageService.RaiseTeamStatUpdateEvent -= ReceiveTeamStatUpdateEvent;
        MessageService.RaiseTeamAliasChangeEvent -= ReceiveTeamAliasChangeEvent;
    }

    protected override void OnParametersSet()
    {
        var stateHasChanged = false;

        if (i_ShowHsr != _renderedShowHsr)
        {
            _renderedShowHsr = i_ShowHsr;
            stateHasChanged = true;
        }

        if (i_UseObjectiveStats != _renderedUseObjectiveStats)
        {
            _renderedUseObjectiveStats = i_UseObjectiveStats;
            stateHasChanged = true;
        }

        if (i_TeamOrdinal != _renderedTeamOrdinal)
        {
            _renderedTeamOrdinal = i_TeamOrdinal;
            _team = ScrimTeamsManager.GetTeam(_renderedTeamOrdinal);

            _renderedEventAggregate = new ScrimEventAggregate();
            _renderedEventAggregate.Add(_team.EventAggregate);

            stateHasChanged = true;
        }

        if (stateHasChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }
    #endregion Initialization Methods

    #region Event Handling
    private void ReceiveTeamStatUpdateEvent(object sender, ScrimMessageEventArgs<TeamStatUpdateMessage> e)
    {
        var team = e.Message.Team;

        if (team.TeamOrdinal == i_TeamOrdinal)
        {
            if (RenderedStatsHaveChanged(team.EventAggregate))
            {
                _renderedEventAggregate = new ScrimEventAggregate();
                _renderedEventAggregate.Add(_team.EventAggregate);

                InvokeAsyncStateHasChanged();
            }
        }
    }

    private void ReceiveTeamAliasChangeEvent(object sender, ScrimMessageEventArgs<TeamAliasChangeMessage> e)
    {
        var message = e.Message;

        var teamOrdinal = message.Ordinal;

        if (teamOrdinal != i_TeamOrdinal)
        {
            return;
        }

        InvokeAsyncStateHasChanged();
    }
    #endregion EventHandling

    private bool RenderedStatsHaveChanged(ScrimEventAggregate newAggregate)
    {
        if (_renderedEventAggregate.Points != newAggregate.Points)
        {
            return true;
        }
        else if (_renderedEventAggregate.NetScore != newAggregate.NetScore && !_renderedUseObjectiveStats)
        {
            return true;
        }
        else if (_renderedEventAggregate.Kills != newAggregate.Kills)
        {
            return true;
        }
        else if (_renderedEventAggregate.HeadshotRatio != newAggregate.HeadshotRatio && _renderedShowHsr && !_renderedUseObjectiveStats)
        {
            return true;
        }
        else if (_renderedEventAggregate.DamageAssists != newAggregate.DamageAssists)
        {
            return true;
        }
        else if (_renderedEventAggregate.GrenadeAssists != newAggregate.GrenadeAssists)
        {
            return true;
        }
        else if (_renderedEventAggregate.RevivesGiven != newAggregate.RevivesGiven && _renderedUseObjectiveStats)
        {
            return true;
        }
        else if (_renderedEventAggregate.ObjectiveTicks != newAggregate.ObjectiveTicks && _renderedUseObjectiveStats)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private double GetStatOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
