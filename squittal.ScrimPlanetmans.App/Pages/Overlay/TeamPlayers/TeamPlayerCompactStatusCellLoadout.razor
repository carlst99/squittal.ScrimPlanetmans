@using squittal.ScrimPlanetmans.App.ScrimMatch.Models
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.Abstractions.Services.ScrimMatch

@implements IDisposable

@inject IScrimMessageBroadcastService MessageService

<div class="playerLoadoutIcon ps2-icon @_loadoutClass"></div>

@code {
    [Parameter]
    public Player? i_player { get; set; }

    private string _loadoutClass = "unknown";

    private ulong _renderedPlayerId;

    protected override void OnInitialized()
    {
        MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;

        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
    }

    public void Dispose()
    {
        MessageService.RaisePlayerLoginEvent -= ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent -= ReceivePlayerLogoutEvent;

        MessageService.RaisePlayerStatUpdateEvent -= ReceivePlayerStatUpdateEvent;
    }

    protected override void OnParametersSet()
    {
        if (i_player is not null && i_player.Id != _renderedPlayerId)
        {
            _renderedPlayerId = i_player.Id;

            if (TryUpdateLoadoutClass())
                InvokeAsync(StateHasChanged);
        }
        else
        {
            if (TryUpdateLoadoutClass())
                InvokeAsync(StateHasChanged);
        }
    }

    private void ReceivePlayerStatUpdateEvent(object? sender, ScrimMessageEventArgs<PlayerStatUpdateMessage> e)
    {
        PlayerStatUpdateMessage message = e.Message;
        Player player = message.Player;

        if (player != i_player)
            return;

        if (TryUpdateLoadoutClass())
            InvokeAsync(StateHasChanged);
    }

    private void ReceivePlayerLoginEvent(object? sender, ScrimMessageEventArgs<PlayerLoginMessage> e)
    {
        Player player = e.Message.Player;

        if (player != i_player)
            return;

        if (TryUpdateLoadoutClass())
            InvokeAsync(StateHasChanged);
    }

    private void ReceivePlayerLogoutEvent(object? sender, ScrimMessageEventArgs<PlayerLogoutMessage> e)
    {
        Player player = e.Message.Player;

        if (player != i_player)
            return;

        if (TryUpdateLoadoutClass())
            InvokeAsync(StateHasChanged);
    }

    private bool TryUpdateLoadoutClass()
    {
        uint? loadoutId = i_player?.LoadoutId;
        string newLoadoutClass = GetLoadoutIconFromLoadoutId(loadoutId);

        if (newLoadoutClass == _loadoutClass)
            return false;

        _loadoutClass = newLoadoutClass;
        return true;
    }

    private string GetLoadoutIconFromLoadoutId(uint? loadoutId)
    {
        return loadoutId switch
        {
            1 or 8 or 15 or 28 => "infil",
            3 or 10 or 17 or 29 => "la",
            4 or 11 or 18 or 30 => "medic",
            5 or 12 or 19 or 31 => "engy",
            6 or 13 or 20 or 32 => "heavy",
            7 or 14 or 21 or 45 => "max",
            _ => "unknown"
        };
    }
}
