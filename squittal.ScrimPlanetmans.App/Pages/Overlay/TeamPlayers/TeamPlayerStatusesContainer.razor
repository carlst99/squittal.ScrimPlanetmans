@using System.Collections.Concurrent;
@using squittal.ScrimPlanetmans.App.CensusStream.Interfaces
@using squittal.ScrimPlanetmans.App.Models
@using squittal.ScrimPlanetmans.App.ScrimMatch
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.ScrimMatch.Models
@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models
@using squittal.ScrimPlanetmans.App.Services.Planetside.Interfaces
@using squittal.ScrimPlanetmans.App.Services.ScrimMatch.Interfaces

@inject IScrimTeamsManager ScrimTeamsManager
@inject IWebsocketMonitor WebsocketMonitor
@inject IScrimMatchEngine ScrimMatchEngine
@inject IOutfitService OutfitService
@inject IWorldService WorldService
@inject IFactionService FactionService
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

@if (_team != null)
{
    <div class="players @($"players{i_TeamOrdinal}") @_compactCssClass @_compactFiveColumnsCssClass @_noScoreCssClass @SqCssHelper.GetFactionClassFromId(_team.FactionId)">

        @lock (_renderedPlayers)
        {
            foreach (var player in _renderedPlayers)
            {
                if (_renderedCompact)
                {
                    <TeamPlayerCompactStatusCell i_TeamOrdinal=i_TeamOrdinal i_player=player i_NoScore=!_resolvedShowScores />
                }
                else
                {
                    <TeamPlayerStatusRow i_TeamOrdinal=i_TeamOrdinal i_player=player i_NoScore=!_resolvedShowScores />
                }
            }
        }

    </div>
}

@code {
    [Parameter]
    public int i_TeamOrdinal { get; set; }
    private int _renderedTeamOrdinal { get; set; }

    [Parameter]
    public bool i_Compact { get; set; }
    private bool _renderedCompact { get; set; } = false;

    [Parameter]
    public OverlayStatsDisplayType i_StatsType { get; set; }
    private OverlayStatsDisplayType? _renderedStatsType { get; set; }

    [Parameter]
    public bool? i_ShowPlayerScoresSetting { get; set; }
    private bool? _renderedShowPlayerScoresSetting { get; set; }

    private bool _resolvedShowScores { get; set; } = true;

    private Team _team;

    private List<Player> _renderedPlayers { get; set; } = new List<Player>();
    private int _renderedPlayersCount { get; set; } = 0;
    private ConcurrentQueue<TeamPlayerChangeMessage> _teamPlayersQueue { get; set; } = new ConcurrentQueue<TeamPlayerChangeMessage>();

    private string _compactCssClass { get; set; } = string.Empty;
    private string _noScoreCssClass { get; set; } = string.Empty;

    private string _compactFiveColumnsCssClass { get; set; } = string.Empty;

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamFactionChangeEvent += ReceiveTeamFactionChangeEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseTeamPlayerChangeEvent -= ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent -= ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamFactionChangeEvent -= ReceiveTeamFactionChangeEvent;
    }

    protected override void OnParametersSet()
    {
        if (i_TeamOrdinal != _renderedTeamOrdinal && i_TeamOrdinal >= 0)
        {
            _renderedTeamOrdinal = i_TeamOrdinal;
            InitializeTeamData();
        }

        var stateChanged = false;

        if (i_Compact != _renderedCompact)
        {
            _renderedCompact = i_Compact;
            SetCompactModeCssClass();

            stateChanged = true;
        }

        var showScoreSettingsChanged = false;

        if (i_StatsType != _renderedStatsType)
        {
            _renderedStatsType = i_StatsType;

            showScoreSettingsChanged = true;
        }

        if (i_ShowPlayerScoresSetting != _renderedShowPlayerScoresSetting)
        {
            _renderedShowPlayerScoresSetting = i_ShowPlayerScoresSetting;

            showScoreSettingsChanged = true;
        }

        if (showScoreSettingsChanged)
        {
            var showScoresChanged = ResolveShowPlayerScores();

            if (showScoresChanged)
            {
                SetNoScoreCssClass();
                stateChanged = true;
            }
        }

        if (stateChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private void InitializeTeamData()
    {
        _team = ScrimTeamsManager.GetTeam(i_TeamOrdinal);

        InvokeAsync(() =>
        {
            lock (_renderedPlayers)
            {
                var visiblePlayers = _team.Players.Where(p => ShouldShowPlayer(p) && !_renderedPlayers.Contains(p));

                _renderedPlayers.AddRange(visiblePlayers);

                _renderedPlayersCount = _renderedPlayers.Count();

                SetCompact5sCssClass();

                StateHasChanged();
            }
        });
    }
    #endregion

    #region Event Handling
    private void ReceiveTeamPlayerChangeEvent(object sender, ScrimMessageEventArgs<TeamPlayerChangeMessage> e)
    {
        var message = e.Message;

        var player = message.Player;
        if (player.TeamOrdinal != i_TeamOrdinal)
        {
            return;
        }

        TeamPlayerChangeMessage newMessage;

        if (message.ChangeType != TeamPlayerChangeType.Remove)
        {
            newMessage = ShouldShowPlayer(player)
                            ? new TeamPlayerChangeMessage(player, TeamPlayerChangeType.Add)
                            : new TeamPlayerChangeMessage(player, TeamPlayerChangeType.Remove);

        }
        else
        {
            newMessage = new TeamPlayerChangeMessage(player, message.ChangeType);
        }

        _teamPlayersQueue.Enqueue(newMessage);

        UpdateRenderedPlayers();
    }

    private void ReceivePlayerStatUpdateEvent(object sender, ScrimMessageEventArgs<PlayerStatUpdateMessage> e)
    {
        var message = e.Message;
        var player = message.Player;

        if (player.TeamOrdinal != i_TeamOrdinal)
        {
            return;
        }

        var changeType = ShouldShowPlayer(player) ? TeamPlayerChangeType.Add : TeamPlayerChangeType.Remove;

        var changeMessage = new TeamPlayerChangeMessage(player, changeType);

        _teamPlayersQueue.Enqueue(changeMessage);

        UpdateRenderedPlayers();
    }

    private void ReceiveTeamFactionChangeEvent(object sender, ScrimMessageEventArgs<TeamFactionChangeMessage> e)
    {
        var message = e.Message;

        var teamOrdinal = message.TeamOrdinal;

        if (teamOrdinal != i_TeamOrdinal)
        {
            return;
        }

        InvokeAsyncStateHasChanged();
    }
    #endregion Event Handling

    private void UpdateRenderedPlayers()
    {
        InvokeAsync(() =>
        {
            lock (_renderedPlayers)
            {
                while (_teamPlayersQueue.TryDequeue(out TeamPlayerChangeMessage changeMessage))
                {
                    var player = changeMessage.Player;

                    if (changeMessage.ChangeType == TeamPlayerChangeType.Remove)
                    {
                        _renderedPlayers.Remove(player);
                    }
                    else if (changeMessage.ChangeType == TeamPlayerChangeType.Add && !_renderedPlayers.Contains(player))
                    {
                        _renderedPlayers.Add(player);
                    }
                }

                _renderedPlayersCount = _renderedPlayers.Count();

                SetCompact5sCssClass();

                StateHasChanged();
            }
        });
    }

    private bool ShouldShowPlayer(Player player)
    {
        return (player.IsActive || player.IsOnline) && !player.IsBenched;
    }

    private bool ResolveShowPlayerScores()
    {
        var previousShowScores = _renderedShowPlayerScoresSetting;

        if (_renderedShowPlayerScoresSetting != null)
        {
            _resolvedShowScores = (bool)_renderedShowPlayerScoresSetting;

            return _resolvedShowScores != previousShowScores;
        }

        _resolvedShowScores = _renderedStatsType switch
        {
            OverlayStatsDisplayType.InfantryScores => true,
            OverlayStatsDisplayType.InfantryObjective => false,
            OverlayStatsDisplayType.AirVehicleScores => true,
            OverlayStatsDisplayType.GroundVehicleScores => true,
            OverlayStatsDisplayType.CombinedArmsObjective => false,
            _ => true
        };

        return _resolvedShowScores != previousShowScores;
    }

    private void SetCompactModeCssClass()
    {
        _compactCssClass = _renderedCompact ? "compact" : string.Empty;
    }

    private void SetNoScoreCssClass()
    {
        _noScoreCssClass = !_resolvedShowScores ? "noScore" : string.Empty;
    }

    private void SetCompact5sCssClass()
    {
        _compactFiveColumnsCssClass = _renderedPlayersCount == 10 ? "compact-5-columns" : string.Empty;
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
