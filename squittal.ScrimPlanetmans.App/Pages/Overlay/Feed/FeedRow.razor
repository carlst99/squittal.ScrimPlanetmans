@using System.Threading;
@using squittal.ScrimPlanetmans.App.Models
@using squittal.ScrimPlanetmans.App.ScrimMatch.Models

@if (i_killfeedEvent != null)
{
    <tr class="">
        <td class="killfeedRowContainer @_cssClass">
            <div class="killfeedHeadshot killfeedCell @GetHeadshotClass(i_killfeedEvent.IsHeadshot) @SqCssHelper.GetFactionClassFromId(i_killfeedEvent.ActingPlayer?.FactionId)">@*@_debug*@</div>
            <div class="killfeedWinner killfeedPlayer killfeedCell @SqCssHelper.GetFactionClassFromId(i_killfeedEvent.ActingPlayer?.FactionId)">@GetPlayerName(i_killfeedEvent.ActingPlayer)</div>
            <div class="killfeedPoints killfeedCell ">@i_killfeedEvent.PointsDisplay</div>
            <div class="killfeedWeapon killfeedCell">@i_killfeedEvent.WeaponName</div>
            <div class="killfeedLoser killfeedPlayer killfeedCell @SqCssHelper.GetFactionClassFromId(i_killfeedEvent.RecipientPlayer?.FactionId)">@GetPlayerName(i_killfeedEvent.RecipientPlayer)</div>
        </td>
    </tr>
}

@code {
    [Parameter]
    public ScrimKillfeedEvent i_killfeedEvent { get; set; }

    [Parameter]
    public int i_index { get; set; }

    private DateTime _prevTimestamp { get; set; }

    public int _prevIndex { get; set; }

    private string _cssClass = string.Empty;
    private string _cssResetClasss = string.Empty;
    private string _cssAnimateOutClass = "animateOut";
    private string _cssAnimateInClass = "animateIn";

    private string _debug = "$";


    private Timer _timer;
    private readonly AutoResetEvent _autoEvent = new AutoResetEvent(true);
    private DateTime _firstRenderTimestamp { get; set; }
    private DateTime _paramSetTimestamp { get; set; }

    #region Initialization Methods
    protected override void OnInitialized()
    {
        _cssClass = _cssResetClasss;
        _debug = "$";

        _prevIndex = i_index;

        InitializeTimer();
    }

    protected override void OnParametersSet()
    {
        var timestamp = i_killfeedEvent.Timestamp;

        _firstRenderTimestamp = i_killfeedEvent.FirstRenderTime;
        _paramSetTimestamp = DateTime.Now;

        if (timestamp != _prevTimestamp)
        {
            _prevTimestamp = timestamp;

            _paramSetTimestamp = DateTime.Now;

            i_killfeedEvent.PreviousRenderTime = _paramSetTimestamp;

            ReConfigureTimer();

            if (i_killfeedEvent.IsExpired)
            {
                _cssClass = _cssAnimateOutClass;
            }
            else
            {
                _cssClass = i_index == 0 ? _cssAnimateInClass : _cssResetClasss;
            }

            _debug = (_debug == "&") ? "@" : "&";

            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (i_killfeedEvent.IsExpired)
        {
            _cssClass = _cssAnimateOutClass;
        }
        else
        {
            _cssClass = _cssResetClasss;
        }
    }
    #endregion Initialization Methods

    #region Timer Handling
    private void InitializeTimer()
    {
        _autoEvent.WaitOne();

        _timer = new Timer(HandleTimerTick, _autoEvent, Timeout.Infinite, 8000);

        _autoEvent.Set();
    }

    private void ReConfigureTimer()
    {
        _autoEvent.WaitOne();

        var timeRendered = (int)(_paramSetTimestamp - _firstRenderTimestamp).TotalMilliseconds;

        var timeRemaining = 8000 - timeRendered;

        if (timeRemaining <= 0)
        {
            _timer.Change(Timeout.Infinite, Timeout.Infinite);

            InvokeAsync(() =>
            {
                i_killfeedEvent.IsExpired = true;

                _cssClass = _cssAnimateOutClass;

                StateHasChanged();
            });
        }
        else
        {
            _timer.Change(timeRemaining, Timeout.Infinite);
        }

        _autoEvent.Set();
    }

    private void HandleTimerTick(object stateInfo)
    {
        _autoEvent.WaitOne();

        InvokeAsync(() =>
        {
            i_killfeedEvent.IsExpired = true;

            _cssClass = _cssAnimateOutClass;

            StateHasChanged();
        });

        _autoEvent.Set();
    }
    #endregion Timer Handling

    private string GetPlayerName(Player player)
    {
        if (player == null)
        {
            return "Unknown Player";
        }
        else
        {
            return player.NameDisplay;
        }
    }

    private string GetHeadshotClass(bool? isHeadshot)
    {
        if (isHeadshot == null)
        {
            return string.Empty;
        }
        else
        {
            return (bool)isHeadshot ? "headshot" : string.Empty;

        }
    }
}
