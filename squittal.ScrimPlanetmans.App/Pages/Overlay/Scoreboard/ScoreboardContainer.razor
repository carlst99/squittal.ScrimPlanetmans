@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.ScrimMatch.Models
@using squittal.ScrimPlanetmans.App.Services.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.Models
@using squittal.ScrimPlanetmans.App.Util
@using DbgCensus.Core.Objects

@inject IScrimMatchEngine ScrimMatchEngine
@inject IScrimTeamsManager ScrimTeamsManager
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

<div class="scoreboard">
    <div class="outfitScoresContainer">
        <ScoreboardBaseCaptures i_captureCount=_teamControls1 i_factionId=_teamFactionId1 i_teamOrdinal=1 />
        <div class="outfitScoresRow team1 @SqCssHelper.GetFactionClassFromId(_teamFactionId1)">
            <div class="outfitAlias">@_teamAlias1</div><div class="outfitScore">@_teamPointsDisplay1</div><div class="wedge"></div><div class="factionLabel">@_teamFactionDisplay1[0]<br />@_teamFactionDisplay1[1]</div>
        </div><div class="timerContainer">
            <div class="timer-text"><MatchTimer /></div>
        </div><div class="outfitScoresRow team2 @SqCssHelper.GetFactionClassFromId(_teamFactionId2)">
            <div class="factionLabel">@_teamFactionDisplay2[0]<br />@_teamFactionDisplay2[1]</div><div class="wedge"></div><div class="outfitScore">@_teamPointsDisplay2</div><div class="outfitAlias">@_teamAlias2</div>
        </div>
        <ScoreboardBaseCaptures i_captureCount=_teamControls2 i_factionId=_teamFactionId2 i_teamOrdinal=2 />
    </div>

    <div class="series-tally-container">
        <div class="team team1 @SqCssHelper.GetFactionClassFromId(_teamFactionId1)">
            @foreach(var matchResult in _teamSeriesResults1)
            {
                <div class="tally @GetSeriesMatchTallyCssClass(matchResult.ResultType)"></div>
            }
            @if (ShouldShowActiveSeriesTally())
            {
                <div class="tally @GetSeriesMatchTallyCssClass(null)"></div>
            }
            
        </div>
        
        <div class="team team2 @SqCssHelper.GetFactionClassFromId(_teamFactionId2)">
            @foreach (var matchResult in _teamSeriesResults2)
            {
                <div class="tally @GetSeriesMatchTallyCssClass(matchResult.ResultType)"></div>
            }
            @if (ShouldShowActiveSeriesTally())
            {
                <div class="tally @GetSeriesMatchTallyCssClass(null)"></div>
            }

        </div>
    </div>

</div>

@code {
    [Parameter]
    public bool i_showFeed { get; set; } = true;

    private bool _showFeed { get; set; } = true;

    private string _teamAlias1 { get; set; }
    private int _teamPoints1 { get; set; } = 0;
    private string _teamPointsDisplay1 { get; set; }
    private FactionDefinition? _teamFactionId1 { get; set; }
    private string[] _teamFactionDisplay1 { get; set; } = new string[2] { ".", "." };
    private int _teamControls1 { get; set; } = 0;
    private List<ScrimSeriesMatchResult> _teamSeriesResults1 { get; set; } = new List<ScrimSeriesMatchResult>();

    private string _teamAlias2 { get; set; }
    private int _teamPoints2 { get; set; } = 0;
    private string _teamPointsDisplay2 { get; set; }
    private FactionDefinition? _teamFactionId2 { get; set; }
    private string[] _teamFactionDisplay2 { get; set; } = new string[2] { ".", "." };
    private int _teamControls2 { get; set; } = 0;
    private List<ScrimSeriesMatchResult> _teamSeriesResults2 { get; set; } = new List<ScrimSeriesMatchResult>();

    private MatchState _matchState { get; set; }
    private int _currentRound { get; set; }

    private bool _shouldShowPoints { get; set; } = false;

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamAliasChangeEvent += ReceiveTeamAliasChangeEvent;
        MessageService.RaiseTeamFactionChangeEvent += ReceiveTeamFactionChangeEvent;
        MessageService.RaiseMatchStateUpdateEvent += ReceiveMatchStateUpdateEvent;
        MessageService.RaiseTeamStatUpdateEvent += ReceiveTeamStatUpdateEvent;

        MessageService.RaiseScrimFacilityControlActionEvent += ReceiveFacilityControlEvent;

        _teamAlias1 = ScrimTeamsManager.GetTeamAliasDisplay(TeamDefinition.Team1);
        var teamPoints1 = ScrimTeamsManager.GetTeamScoreDisplay(TeamDefinition.Team1);

        _teamPoints1 = (teamPoints1 == null) ? 0 : (int)teamPoints1;

        _teamFactionId1 = ScrimTeamsManager.GetTeam(TeamDefinition.Team1).FactionId;

        _teamAlias2 = ScrimTeamsManager.GetTeamAliasDisplay(TeamDefinition.Team2);
        var teamPoints2 = ScrimTeamsManager.GetTeamScoreDisplay(TeamDefinition.Team2);

        _teamPoints2 = (teamPoints2 == null) ? 0 : (int)teamPoints2;

        _teamFactionId2 = ScrimTeamsManager.GetTeam(TeamDefinition.Team2).FactionId;

        UpdateSeriesMatchResults();

        _matchState = ScrimMatchEngine.GetMatchState();
        _currentRound = ScrimMatchEngine.GetCurrentRound();

        UpdateTeamsControlCounts();

        UpdateShouldShowPoints();

        UpdatePointsDisplay();

        if (_teamFactionId1 == null)
        {
            UpdateTeamFactionDisplay(TeamDefinition.Team1, string.Empty);
        }
        else
        {
            UpdateTeamFactionDisplay(TeamDefinition.Team1, StringHelpers.GetFactionAbbreviation(_teamFactionId1));
        }

        if (_teamFactionId2 == null)
        {
            UpdateTeamFactionDisplay(TeamDefinition.Team2, string.Empty);
        }
        else
        {
            UpdateTeamFactionDisplay(TeamDefinition.Team2, StringHelpers.GetFactionAbbreviation(_teamFactionId2));
        }
    }

    public void Dispose()
    {
        MessageService.RaiseTeamAliasChangeEvent -= ReceiveTeamAliasChangeEvent;
        MessageService.RaiseTeamFactionChangeEvent -= ReceiveTeamFactionChangeEvent;
        MessageService.RaiseMatchStateUpdateEvent -= ReceiveMatchStateUpdateEvent;
        MessageService.RaiseTeamStatUpdateEvent -= ReceiveTeamStatUpdateEvent;

        MessageService.RaiseScrimFacilityControlActionEvent -= ReceiveFacilityControlEvent;
    }

    protected override void OnParametersSet()
    {
        if (i_showFeed != _showFeed)
        {
            _showFeed = i_showFeed;
        }
    }
    #endregion Initialization Methods


    private void UpdatePointsDisplay()
    {
        if (_shouldShowPoints)
        {
            _teamPointsDisplay1 = _teamPoints1.ToString();
            _teamPointsDisplay2 = _teamPoints2.ToString();
        }
        else
        {
            _teamPointsDisplay1 = "_";
            _teamPointsDisplay2 = "_";
        }
    }

    private void UpdateShouldShowPoints()
    {
        if (_matchState == MatchState.Uninitialized)
        {
            _shouldShowPoints = false;
        }
        else
        {
            _shouldShowPoints = true;
        }
    }

    private void UpdateTeamFactionDisplay(TeamDefinition teamOrdinal, string newAbbreviation)
    {
        if (string.IsNullOrWhiteSpace(newAbbreviation))
        {
            if (teamOrdinal == TeamDefinition.Team1)
            {
                _teamFactionDisplay1[0] = ".";
                _teamFactionDisplay1[1] = ".";
            }
            else if (teamOrdinal == TeamDefinition.Team2)
            {
                _teamFactionDisplay2[0] = ".";
                _teamFactionDisplay2[1] = ".";
            }
        }
        else
        {
            if (teamOrdinal == TeamDefinition.Team1)
            {
                _teamFactionDisplay1[0] = newAbbreviation[0].ToString();
                _teamFactionDisplay1[1] = newAbbreviation[1].ToString();
            }
            else if (teamOrdinal == TeamDefinition.Team2)
            {
                _teamFactionDisplay2[0] = newAbbreviation[0].ToString();
                _teamFactionDisplay2[1] = newAbbreviation[1].ToString();
            }
        }
    }

    private void UpdateTeamsControlCounts()
    {
        _teamControls1 = ScrimTeamsManager.GetCurrentMatchRoundTeamWeightedCapturesCount(TeamDefinition.Team1);
        _teamControls2 = ScrimTeamsManager.GetCurrentMatchRoundTeamWeightedCapturesCount(TeamDefinition.Team2);
    }

    #region Event Handling
    private void ReceiveTeamStatUpdateEvent(object sender, ScrimMessageEventArgs<TeamStatUpdateMessage> e)
    {
        var message = e.Message;

        var teamOrdinal = message.Team.TeamOrdinal;
        var newPoints = message.Team.EventAggregate.Points;

        bool pointsChanged = false;

        if (teamOrdinal == TeamDefinition.Team1 && newPoints != _teamPoints1)
        {
            _teamPoints1 = newPoints;
            pointsChanged = true;
        }
        else if (teamOrdinal == TeamDefinition.Team2 && newPoints != _teamPoints2)
        {
            _teamPoints2 = newPoints;
            pointsChanged = true;
        }

        if (pointsChanged)
        {
            UpdatePointsDisplay();

            InvokeAsyncStateHasChanged();
        }
    }

    private void ReceiveFacilityControlEvent(object sender, ScrimMessageEventArgs<ScrimFacilityControlActionEventMessage> e)
    {
        var message = e.Message;

        var controllingTeamOrdinal = message.FacilityControl.ControllingTeamOrdinal;

        if (controllingTeamOrdinal == TeamDefinition.Team1)
        {
            var newTeamControls = ScrimTeamsManager.GetCurrentMatchRoundTeamWeightedCapturesCount(TeamDefinition.Team1);

            if (newTeamControls != _teamControls1)
            {
                _teamControls1 = newTeamControls;
                InvokeAsyncStateHasChanged();
            }

        }
        else if (controllingTeamOrdinal == TeamDefinition.Team2)
        {
            var newTeamControls = ScrimTeamsManager.GetCurrentMatchRoundTeamWeightedCapturesCount(TeamDefinition.Team2);

            if (newTeamControls != _teamControls2)
            {
                _teamControls2 = newTeamControls;
                InvokeAsyncStateHasChanged();
            }
        }
    }

    private void ReceiveTeamAliasChangeEvent(object sender, ScrimMessageEventArgs<TeamAliasChangeMessage> e)
    {
        var message = e.Message;

        var teamOrdinal = message.Ordinal;
        var newAlias = message.NewAlias;

        bool aliasChanged = false;

        if (teamOrdinal == TeamDefinition.Team1 && newAlias != _teamAlias1)
        {
            _teamAlias1 = newAlias;
            aliasChanged = true;
        }
        else if (teamOrdinal == TeamDefinition.Team2 && newAlias != _teamAlias2)
        {
            _teamAlias2 = newAlias;
            aliasChanged = true;
        }

        if (aliasChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private void ReceiveMatchStateUpdateEvent(object sender, ScrimMessageEventArgs<MatchStateUpdateMessage> e)
    {
        var message = e.Message;

        var oldMatchState = _matchState;
        var newMatchState = message.MatchState;

        var oldCurrentRound = _currentRound;
        var newCurrentRound = message.CurrentRound;

        if (oldMatchState != newMatchState)
        {
            _matchState = newMatchState;

            UpdateShouldShowPoints();
            UpdatePointsDisplay();

            UpdateSeriesMatchResults();

            InvokeAsyncStateHasChanged();
        }

        if (oldCurrentRound != newCurrentRound)
        {
            _currentRound = newCurrentRound;

            UpdateTeamsControlCounts();

            InvokeAsyncStateHasChanged();
        }
    }



    private void ReceiveTeamFactionChangeEvent(object sender, ScrimMessageEventArgs<TeamFactionChangeMessage> e)
    {
        var message = e.Message;

        var teamOrdinal = message.Ordinal;
        var newFactionId = message.NewFactionId;
        var newFactionAbbreviation = message.NewFactionAbbreviation;

        bool factionChanged = false;

        if (teamOrdinal == TeamDefinition.Team1 && newFactionId != _teamFactionId1)
        {
            _teamFactionId1 = newFactionId;

            factionChanged = true;
        }
        else if (teamOrdinal == TeamDefinition.Team2 && newFactionId != _teamFactionId2)
        {
            _teamFactionId2 = newFactionId;
            factionChanged = true;
        }

        if (factionChanged)
        {
            UpdateTeamFactionDisplay(teamOrdinal, newFactionAbbreviation);

            InvokeAsyncStateHasChanged();
        }
    }
    #endregion Event Handling

    private void UpdateSeriesMatchResults()
    {
        _teamSeriesResults1 = ScrimTeamsManager.GetTeamsScrimSeriesMatchResults(TeamDefinition.Team1);
        _teamSeriesResults2 = ScrimTeamsManager.GetTeamsScrimSeriesMatchResults(TeamDefinition.Team2);
    }

    private string GetSeriesMatchTallyCssClass(ScrimSeriesMatchResultType? matchResultType)
    {
        return matchResultType switch
        {
            ScrimSeriesMatchResultType.Win => "win",
            ScrimSeriesMatchResultType.Loss => "loss",
            ScrimSeriesMatchResultType.Draw => "loss",
            _ => "active"
        };
    }

    private bool ShouldShowActiveSeriesTally()
    {
        return _matchState switch
        {
            MatchState.Paused => true,
            MatchState.Running => true,
            MatchState.Stopped => false,
            MatchState.Uninitialized => false,
            _ => false
        };
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
