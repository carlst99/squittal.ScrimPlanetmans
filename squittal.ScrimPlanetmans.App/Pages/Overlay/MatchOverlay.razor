@page "/Overlay"

@using Microsoft.AspNetCore.WebUtilities 
@using Microsoft.Extensions.Primitives
@using squittal.ScrimPlanetmans.App.Abstractions.Services.ScrimMatch
@using squittal.ScrimPlanetmans.App.Models
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models

@inject IScrimRulesetManager RulesetManager 
@inject IScrimMessageBroadcastService MessageService
@inject NavigationManager NavManager

@if (_title)
{
    <MatchTitle />
}

@if (_players && _activeStatsDisplayType != null)
{
    <TeamPlayerStatusesContainer i_TeamOrdinal="@TeamDefinition.Team1"
                                 i_Compact="@_compact"
                                 i_StatsType="@((OverlayStatsDisplayType)_activeStatsDisplayType)"
                                 i_ShowPlayerScoresSetting="@_showStatusPanelScores" />

    <TeamPlayerStatusesContainer i_TeamOrdinal="@TeamDefinition.Team2"
                                 i_Compact="@_compact"
                                 i_StatsType="@((OverlayStatsDisplayType)_activeStatsDisplayType)"
                                 i_ShowPlayerScoresSetting="@_showStatusPanelScores" />
}

@if (_scoreboard)
{
    <ScoreboardContainer i_showFeed=_feed />
}

@if (_report && _activeStatsDisplayType != null)
{
    <MatchReportContainer i_ShowHsr="@_showHsr"
                          i_StatsType="@((OverlayStatsDisplayType)_activeStatsDisplayType)"
                          i_Compact="@_compact"
                          i_ShowPlayerScoresSetting="@_showStatusPanelScores" />
}

@if (_feed)
{
    <Feed i_legacyUi="@_legacyUi" />
}

@code {
    [Parameter]
    public bool _report { get; set; } = true;

    [Parameter]
    public bool _feed { get; set; } = true;

    [Parameter]
    public bool _players { get; set; } = true;

    [Parameter]
    public bool _scoreboard { get; set; } = true;

    [Parameter]
    public bool _title { get; set; } = true;

    [Parameter]
    public bool _legacyUi { get; set; }

    [Parameter]
    public bool _showHsr { get; set; } = true;

    [Parameter]
    public bool _compact { get; set; }
    private bool _compactIsManual { get; set; }

    private bool? _showStatusPanelScores { get; set; }

    private Ruleset? _activeRuleset { get; set; }
    private OverlayStatsDisplayType? _activeStatsDisplayType { get; set; }


    #region Initialization Methods
    protected override void OnInitialized()
    {
        NavManager.LocationChanged += OnLocationChanged;

        MessageService.RaiseActiveRulesetChangeEvent += OnActiveRulesetChanged;
        MessageService.RaiseRulesetOverlayConfigurationChangeEvent += OnRulesetOverlayConfigurationChanged;
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;

        MessageService.RaiseActiveRulesetChangeEvent -= OnActiveRulesetChanged;
        MessageService.RaiseRulesetOverlayConfigurationChangeEvent -= OnRulesetOverlayConfigurationChanged;

        _activeRuleset = RulesetManager.ActiveRuleset;
        if (_activeRuleset?.RulesetOverlayConfiguration is null)
            return;

        if (!_compactIsManual)
            _compact = _activeRuleset.RulesetOverlayConfiguration.UseCompactLayout;

        _activeStatsDisplayType = _activeRuleset.RulesetOverlayConfiguration.StatsDisplayType;
        _showStatusPanelScores = _activeRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores;
    }

    protected override void OnParametersSet()
    {
        UpdateUriParameters();
    }

    #endregion Initialization Methods

    #region Event Handling
    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (UpdateUriParameters())
        {
            StateHasChanged();
        }
    }

    private void OnActiveRulesetChanged(object? sender, ScrimMessageEventArgs<ActiveRulesetChangeMessage> args)
    {
        Ruleset ruleset = args.Message.ActiveRuleset;
        if (ruleset.RulesetOverlayConfiguration is null)
            return;

        bool newRulesetCompact = ruleset.RulesetOverlayConfiguration.UseCompactLayout;
        OverlayStatsDisplayType newRulesetOverlayStatsDisplayType = ruleset.RulesetOverlayConfiguration.StatsDisplayType;
        bool? newRulesetShowStatusPanelScores = ruleset.RulesetOverlayConfiguration.ShowStatusPanelScores;

        bool stateChanged = false;

        if (newRulesetCompact != _compact && !_compactIsManual)
        {
            _compact = newRulesetCompact;
            stateChanged = true;
        }

        if (newRulesetOverlayStatsDisplayType != _activeStatsDisplayType)
        {
            _activeStatsDisplayType = newRulesetOverlayStatsDisplayType;
            stateChanged = true;
        }

        if (newRulesetShowStatusPanelScores != _showStatusPanelScores)
        {
            _showStatusPanelScores = newRulesetShowStatusPanelScores;
            stateChanged = true;
        }

        if (stateChanged)
            InvokeAsyncStateHasChanged();
    }

    private void OnRulesetOverlayConfigurationChanged(object? sender, ScrimMessageEventArgs<RulesetOverlayConfigurationChangeMessage> args)
    {
        List<RulesetOverlayConfigurationChange> changes = args.Message.ChangedSettings;
        Ruleset ruleset = args.Message.Ruleset;
        RulesetOverlayConfiguration configuration = args.Message.OverlayConfiguration;

        if (ruleset.Id != _activeRuleset?.Id)
        {
            return;
        }

        bool stateChanged = false;

        if (changes.Contains(RulesetOverlayConfigurationChange.UseCompactLayout))
        {
            if (configuration.UseCompactLayout != _compact && !_compactIsManual)
            {
                _compact = configuration.UseCompactLayout;
                stateChanged = true;
            }
        }

        if (changes.Contains(RulesetOverlayConfigurationChange.StatsDisplayType))
        {
            if (configuration.StatsDisplayType != _activeStatsDisplayType)
            {
                _activeStatsDisplayType = configuration.StatsDisplayType;
                stateChanged = true;
            }
        }

        if (changes.Contains(RulesetOverlayConfigurationChange.ShowStatusPanelScores))
        {
            if (configuration.ShowStatusPanelScores != _showStatusPanelScores)
            {
                _showStatusPanelScores = configuration.ShowStatusPanelScores;

                stateChanged = true;
            }
        }

        if (stateChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    #endregion Event Handling

    private bool UpdateUriParameters()
    {
        Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        bool stateChanged = false;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("report", out StringValues qReport))
        {
            if (bool.TryParse(qReport, out bool report))
            {
                if (report != _report)
                {
                    _report = report;
                    stateChanged = true;
                }
            }
            else
            {
                _report = true;
                stateChanged = true;
            }
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("feed", out StringValues qFeed))
        {
            if (bool.TryParse(qFeed, out bool feed))
            {
                if (feed != _feed)
                {
                    _feed = feed;
                    stateChanged = true;
                }
            }
            else
            {
                _feed = true;
                stateChanged = true;
            }
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("players", out StringValues qPlayers))
        {
            if (bool.TryParse(qPlayers, out bool players))
            {
                if (players != _players)
                {
                    _players = players;
                    stateChanged = true;
                }
            }
            else
            {
                _players = true;
                stateChanged = true;
            }
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("scoreboard", out StringValues qScoreboard))
        {
            if (bool.TryParse(qScoreboard, out bool scoreboard))
            {
                if (scoreboard != _scoreboard)
                {
                    _scoreboard = scoreboard;
                    stateChanged = true;
                }
            }
            else
            {
                _scoreboard = true;
                stateChanged = true;
            }
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("title", out StringValues qTitle))
        {
            if (bool.TryParse(qTitle, out bool title))
            {
                if (title != _title)
                {
                    _title = title;
                    stateChanged = true;
                }
            }
            else
            {
                _title = true;
                stateChanged = true;
            }
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("legacy", out StringValues qLegacy))
        {
            if (bool.TryParse(qLegacy, out bool legacy))
            {
                if (legacy != _legacyUi)
                {
                    _legacyUi = legacy;
                    stateChanged = true;
                }
            }
            else
            {
                _legacyUi = false;
                stateChanged = true;
            }
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("reportHsr", out StringValues qShowHsr))
        {
            if (bool.TryParse(qShowHsr, out bool showHsr))
            {
                if (showHsr != _showHsr)
                {
                    _showHsr = showHsr;
                    stateChanged = true;
                }
            }
            else
            {
                _showHsr = true;
                stateChanged = true;
            }
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("compact", out StringValues qCompact))
        {
            if (bool.TryParse(qCompact, out bool compact))
            {
                if (compact != _compact)
                {
                    _compact = compact;
                    stateChanged = true;
                }

                _compactIsManual = true;
            }
            else if (_activeRuleset?.RulesetOverlayConfiguration is not null)
            {
                _compact = _activeRuleset.RulesetOverlayConfiguration.UseCompactLayout;
                _compactIsManual = false;
                stateChanged = true;
            }
        }

        return stateChanged;
    }

    private void InvokeAsyncStateHasChanged()
        => InvokeAsync(StateHasChanged);
}
