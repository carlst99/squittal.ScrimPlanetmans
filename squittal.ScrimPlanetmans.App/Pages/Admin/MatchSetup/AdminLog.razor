@using Newtonsoft.Json.Linq;
@using System.Collections.Concurrent;
@using squittal.ScrimPlanetmans.App.Models.MessageLogs
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.Services.ScrimMatch.Interfaces

@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

<p style="margin: 0 0 0.1rem 0; font-size: 12px; color: var(--sq-logo-purple);">Admin Log</p>
<div style="height: 225px; overflow-y: auto; margin-bottom: 1rem; border: 1px solid var(--sq-light-blue-gray-alpha); background-color: white;">
    @if (_adminLogMessages.Any())
    {
        foreach (var log in _adminLogMessages)
        {
            <p style="font-size: 10.5px; margin: 0 0 0.1rem 0;">@log.Message</p>
        }

        if (_logCount > _maxLogCount)
        {
            <p style="font-size: 10.5px; margin: 0;">...max log entries reached (showing @_maxLogCount / @_adminLogMessages.Count)</p>
        }
    }
</div>


@code {
    private List<TimestampedLogMessage> _adminLogMessages { get; set; } = new List<TimestampedLogMessage>();
    private ConcurrentQueue<TimestampedLogMessage> _logMessageQueue = new ConcurrentQueue<TimestampedLogMessage>();

    private int _logCount;
    private int _maxLogCount = 200;

    #region Initialization Methods
    protected override void OnInitialized()
    {
        // TODO: use Interface for Info property of messages
        MessageService.RaiseSimpleMessageEvent += ReceiveSimpleMessageEvent;
        MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaiseTeamOutfitChangeEvent += ReceiveTeamOutfitChangeEvent;
        MessageService.RaiseTeamConstructedTeamChangeEvent += ReceiveTeamConstructedTeamChangeEvent;
        MessageService.RaiseMatchStateUpdateEvent += ReceiveMatchStateUpdateMessageEvent;
        MessageService.RaisePlayerNameDisplayChangeEvent += ReceivePlayerNameDisplayChangeMessageEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseSimpleMessageEvent -= ReceiveSimpleMessageEvent;
        MessageService.RaisePlayerLoginEvent -= ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent -= ReceivePlayerLogoutEvent;
        MessageService.RaiseTeamPlayerChangeEvent -= ReceiveTeamPlayerChangeEvent;
        MessageService.RaiseTeamOutfitChangeEvent -= ReceiveTeamOutfitChangeEvent;
        MessageService.RaiseTeamConstructedTeamChangeEvent -= ReceiveTeamConstructedTeamChangeEvent;
        MessageService.RaiseMatchStateUpdateEvent -= ReceiveMatchStateUpdateMessageEvent;
        MessageService.RaisePlayerNameDisplayChangeEvent -= ReceivePlayerNameDisplayChangeMessageEvent;
    }
    #endregion Initialization Methods

    #region  Event Handling
    private void ReceiveSimpleMessageEvent(object sender, SimpleMessageEventArgs e)
    {
        var message = e.Message;

        var payload = TryParseMessagePayload(message);
        if (payload == null)
        {
            LogMessage((MarkupString)message, e.CreatedTime);
            return;
        }
    }

    private void ReceiveMatchStateUpdateMessageEvent(object sender, ScrimMessageEventArgs<MatchStateUpdateMessage> e)
    {
        var info = e.Message.Info;
        LogMessage((MarkupString)info, e.CreatedTime);
    }

    private void ReceivePlayerLoginEvent(object sender, ScrimMessageEventArgs<PlayerLoginMessage> e)
    {
        var info = e.Message.Info;
        LogMessage((MarkupString)info, e.CreatedTime);
    }

    private void ReceivePlayerLogoutEvent(object sender, ScrimMessageEventArgs<PlayerLogoutMessage> e)
    {
        var info = e.Message.Info;
        LogMessage((MarkupString)info, e.CreatedTime);
    }

    private void ReceiveTeamPlayerChangeEvent(object sender, ScrimMessageEventArgs<TeamPlayerChangeMessage> e)
    {
        var info = e.Message.Info;
        LogMessage((MarkupString)info, e.CreatedTime);
    }

    private void ReceiveTeamOutfitChangeEvent(object sender, ScrimMessageEventArgs<TeamOutfitChangeMessage> e)
    {
        var info = e.Message.Info;
        LogMessage((MarkupString)info, e.CreatedTime);
    }

    private void ReceiveTeamConstructedTeamChangeEvent(object sender, ScrimMessageEventArgs<TeamConstructedTeamChangeMessage> e)
    {
        var info = e.Message.Info;
        LogMessage((MarkupString)info, e.CreatedTime);
    }

    private void ReceivePlayerNameDisplayChangeMessageEvent(object sender, ScrimMessageEventArgs<PlayerNameDisplayChangeMessage> e)
    {
        var info = e.Message.Info;
        LogMessage((MarkupString)info, e.CreatedTime);
    }
    #endregion

    #region Message Parsing
    private JToken TryParseMessagePayload(string message)
    {
        if (message == null)
        {
            return null;
        }

        JToken jMsg;

        try
        {
            jMsg = JToken.Parse(message).SelectToken("payload");
        }
        catch (Exception)
        {
            return null;
        }

        return jMsg;
    }
    #endregion Message Parsing

    private void LogMessage(MarkupString message, DateTime timestamp)
    {
        var time = GetLocalizedTimeString(timestamp);

        var newLogMessage = (MarkupString)$"<span style=\"font-weight: 600;\">{time}:</span>  {message}";

        _logMessageQueue.Enqueue(new TimestampedLogMessage(timestamp, newLogMessage));

        UpdatePage();
    }

    private void LogMessage(string message)
    {
        var timestamp = DateTime.Now;

        var time = GetLocalizedTimeString(timestamp);

        var newLogMessage = (MarkupString)$"<span style=\"font-weight: 600;\">{time}:</span>  {message}";

        _logMessageQueue.Enqueue(new TimestampedLogMessage(timestamp, newLogMessage));

        UpdatePage();
    }

    private void UpdatePage()
    {
        InvokeAsync(() =>
        {
            lock (_adminLogMessages)
            {
                TimestampedLogMessage localString;

                while (_logMessageQueue.TryDequeue(out localString))
                {
                    _adminLogMessages.Add(localString);
                }

                _logCount = _adminLogMessages.Count();

                _adminLogMessages = _adminLogMessages.OrderByDescending(m => m.Timestamp).Take(_maxLogCount).ToList();

                StateHasChanged();
            }
        });
    }

    private string GetLocalizedTimeString(DateTime dateTime)
    {
        dateTime = DateTime.SpecifyKind(dateTime, DateTimeKind.Utc);

        var dateTimeLocal = dateTime.ToLocalTime();

        return $"{dateTimeLocal.ToString("hh:mm:ss tt")}";
    }
}
