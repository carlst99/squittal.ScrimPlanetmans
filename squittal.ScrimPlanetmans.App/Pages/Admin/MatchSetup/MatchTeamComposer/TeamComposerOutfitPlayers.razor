@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using System.Collections.Concurrent;
@using System.Diagnostics.CodeAnalysis
@using squittal.ScrimPlanetmans.App.Abstractions.Services.CensusRest
@using squittal.ScrimPlanetmans.App.Abstractions.Services.Planetside
@using squittal.ScrimPlanetmans.App.Models
@using squittal.ScrimPlanetmans.App.Models.CensusRest
@using squittal.ScrimPlanetmans.App.Models.Planetside
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.ScrimMatch.Models
@using squittal.ScrimPlanetmans.App.Services.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.Util

@inject IScrimTeamsManager TeamsManager
@inject IConstructedTeamService ConstructedTeamsService
@inject IScrimMatchEngine ScrimMatchEngine
@inject IOutfitService OutfitService
@inject ICensusWorldService WorldService
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable


@if (_renderedOutfit != null)
{
    <div class="sq-mini-card-12 @SqCssHelper.GetFactionClassFromId(_renderedOutfit.FactionId)">

        <h5 class="@SqCssHelper.GetFactionClassFromId(_renderedOutfit.FactionId)" style="color: var(--sq-ps2-primary); margin-bottom: 0.1rem; padding: 8px 0 0 15px;">
            <b><span class="mono-font">[@_renderedOutfit.Alias]</span> @_renderedOutfit.Name</b> (@_renderedOutfit.MemberCount | @_renderedOutfit.MembersOnlineCount) <span>@_worlds?.FirstOrDefault(w => w.WorldId == _renderedOutfit.WorldId)?.Name.English.GetValueOrDefault()</span><span> @StringHelpers.GetFactionAbbreviation(_renderedOutfit.FactionId)</span>
        </h5>

        <p style="margin: 0 0 0.1rem 0;  padding-left: 16px;">
            @if (!_isLoadingMembers)
            {
                @if (_renderedPlayersCount > 0)
                {
                    <button class="btn btn-link" style="padding: 0; font-size: smaller; vertical-align: baseline;" @onclick="TogglePlayersVisibility">@(_extendPlayers ? "Hide Players" : "Show Players")</button>
                    @if (!_renderedIsTeamLocked || _renderedShowRemovals)
                    {
                        <span>|</span>
                    }
                }
                @if (!_renderedIsTeamLocked && !i_isLockingTeam)
                {
                    <button class="btn btn-link" style="padding: 0 0 0 4px; font-size: smaller; vertical-align: baseline;" @onclick="RefreshOutfitPlayers">Refresh</button>
                    @if (_renderedShowRemovals)
                    {
                        <span>|</span>
                    }
                }
                @if (_renderedShowRemovals)
                {
                    <button class="btn btn-link" style="padding: 0 0 0 4px; font-size: smaller; vertical-align: baseline;" @onclick="RemoveOutfit">Remove</button>
                }
            }
        </p>

        <div class="sq-content" style="padding-top: 0;">

            @if (_isLoadingMembers)
            {
                <SpinnerEllipsis />
            }
            else if (_renderedPlayersCount > 0 && _extendPlayers)
            {
                @lock (_renderedPlayers)
                {
                    @if (_renderedPlayers.Any(p => !p.IsBenched))
                    {
                        <table class="table-responsive-sm table-striped-light mono-font smaller @SqCssHelper.GetFactionClassFromId(_renderedOutfit.FactionId)" style="margin-bottom: 0.5rem;">
                            <thead>
                                <tr>
                                    <th style="padding-right: 5px; width: 15px;"></th>
                                    <th style="padding-right: 0px; padding-left: 0px; width: 7px;"></th>
                                    <th></th>
                                    <th style="text-align: right;">K</th>
                                    <th style="text-align: right;">D</th>
                                    <th style="text-align: right;">N</th>
                                    <th style="text-align: right;">P</th>
                                    <th style="padding-right: 5px; width: 15px;"></th>
                                    @if (_renderedShowRemovals)
                                    {
                                        <th style="width: 15px; padding-right: 5px;"></th>
                                    }
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var member in _renderedPlayers.Where(p => !p.IsBenched).ToList())
                                {
                                    <TeamComposerPlayerRow Player=@member ShowRemovalControls=@_renderedShowRemovals />
                                }
                            </tbody>
                        </table>
                    }

                    @if (_renderedPlayers.Any(p => p.IsBenched))
                    {
                        <table class="table-responsive-sm table-striped-light mono-font smaller @SqCssHelper.GetFactionClassFromId(_renderedOutfit.FactionId)" style="margin-bottom: 0.5rem;">
                            <thead>

                                <tr style="border-bottom: 1px solid var(--sq-ps2-primary-light)">
                                    @if (!_renderedPlayers.Any(p => !p.IsBenched))
                                    {
                                        <th colspan="3" style="font-weight: 400;">Benched Players</th>
                                        <th style="text-align: right;">K</th>
                                        <th style="text-align: right;">D</th>
                                        <th style="text-align: right;">N</th>
                                        <th style="text-align: right;">P</th>
                                    }
                                    else
                                    {
                                        <td colspan="7" style="font-weight: 400;">Benched Players</td>
                                    }

                                    <th style="padding-right: 5px; width: 15px;"></th>

                                    @if (_renderedShowRemovals)
                                    {
                                        <th style="width: 15px; padding-right: 5px;"></th>
                                    }
                                </tr>

                            </thead>

                            <tbody>
                                @foreach (var member in _renderedPlayers.Where(p => p.IsBenched).ToList())
                                {
                                    <TeamComposerPlayerRow Player=@member ShowRemovalControls=@_renderedShowRemovals />
                                }
                            </tbody>
                        </table>
                    }
                }
            }
        </div>
    </div>
}
else
{
    <SpinnerEllipsis />
}



@code {
    [Parameter]
    public TeamDefinition i_teamOrdinal { get; set; }
    private TeamDefinition _renderedTeamOrdinal { get; set; }

    [Parameter]
    public required Outfit i_outfit { get; set; }
    private Outfit? _renderedOutfit { get; set; }

    [Parameter]
    public bool i_showRemovals { get; set; } = false;
    private bool _renderedShowRemovals { get; set; } = false;

    [Parameter]
    public bool i_isTeamLocked { get; set; } = false;
    private bool _renderedIsTeamLocked { get; set; } = false;

    [Parameter]
    public bool i_isLockingTeam { get; set; } = false;
    private bool _renderedIsLockingTeam { get; set; } = false;

    private bool _isLoadingMembers { get; set; } = false;
    private bool _isLoadingOutfit { get; set; } = false;

    private List<Player> _renderedPlayers { get; set; } = new List<Player>();
    private int _renderedPlayersCount { get; set; } = 0;
    private ConcurrentQueue<TeamPlayerChangeMessage> _playerChangesQueue { get; set; } = new ConcurrentQueue<TeamPlayerChangeMessage>();

    #region UI & Layout Variables
    private bool _extendPlayers = true;
    private bool _isManualExtendValue = false;

    private int _maxPlayersToExtend { get; set; }

    private int _defaultMaxPlayersToExtend = 8;
    private int _lockedMaxPlayersToExtend = 12;
    #endregion

    #region Helpers
    private IReadOnlyList<CensusWorld>? _worlds;
    #endregion


    #region Initialization Methods
    protected override async Task OnInitializedAsync()
    {
        _worlds = await WorldService.GetAllAsync();
    }

    protected override void OnInitialized()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaiseTeamOutfitChangeEvent += ReceiveTeamOutfitChangeEvent;

        MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;

        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseTeamPlayerChangeEvent -= ReceiveTeamPlayerChangeEvent;
        MessageService.RaiseTeamOutfitChangeEvent -= ReceiveTeamOutfitChangeEvent;

        MessageService.RaisePlayerLoginEvent -= ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent -= ReceivePlayerLogoutEvent;

        MessageService.RaisePlayerStatUpdateEvent -= ReceivePlayerStatUpdateEvent;
    }

    protected override void OnParametersSet()
    {
        _renderedOutfit ??= i_outfit;
        var paramsChanged = false;

        if (i_showRemovals != _renderedShowRemovals)
        {
            _renderedShowRemovals = i_showRemovals;
            paramsChanged = true;
        }

        if (i_isLockingTeam != _renderedIsLockingTeam)
        {
            _renderedIsLockingTeam = i_isLockingTeam;
            paramsChanged = true;
        }

        if (i_isTeamLocked != _renderedIsTeamLocked)
        {
            _renderedIsTeamLocked = i_isTeamLocked;

            SetMaxPlayersToExtend();
            SetExtendPlayers();

            paramsChanged = true;
        }

        if (i_teamOrdinal != _renderedTeamOrdinal || i_outfit.AliasLower != _renderedOutfit.AliasLower || i_outfit.Id != _renderedOutfit.Id)
        {
            _renderedTeamOrdinal = i_teamOrdinal;
            _renderedOutfit = i_outfit;

            _renderedIsTeamLocked = TeamsManager.GetTeamLockStatus(_renderedTeamOrdinal);
            SetMaxPlayersToExtend();

            InitializePlayersData();

            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private void InitializePlayersData()
    {
        var message = $"Started loading Team {_renderedTeamOrdinal} Outfit data: [{_renderedOutfit.Alias}] {_renderedOutfit.Name}...";
        LogMessage(message);

        var outfitPlayers = TeamsManager.GetTeamOutfitPlayers(_renderedTeamOrdinal, _renderedOutfit.AliasLower);

        lock (_renderedPlayers)
        {
            _renderedPlayers.RemoveAll(p => !ShouldProcessPlayer(p));
        }

        foreach (var player in outfitPlayers)
        {
            TeamPlayerChangeMessage changeMessage;

            if (player.IsParticipating)
            {
                changeMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.SetActive);

                _playerChangesQueue.Enqueue(changeMessage);
            }
            else if (player.IsOnline)
            {
                changeMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.Add);

                _playerChangesQueue.Enqueue(changeMessage);
            }
        }

        ProcessPlayerChangesQueue();

        SetExtendPlayers();

        message = $"Finished loading Team {_renderedTeamOrdinal} Outfit data: [{_renderedOutfit.Alias}] {_renderedOutfit.Name}";
        LogMessage(message);
    }
    #endregion Initialization Methods

    #region  Form Submission & Validation
    private async void RefreshOutfitPlayers()
    {
        if (!_isLoadingMembers)
        {
            _isLoadingMembers = true;

            string alias = _renderedOutfit?.Alias ?? i_outfit.Alias;
            string message;

            try
            {
                var success = await TeamsManager.RefreshOutfitPlayers(_renderedOutfit?.AliasLower ?? i_outfit.AliasLower);

                _isLoadingMembers = false;

                message = success ? $"Team {_renderedTeamOrdinal} [{alias}] Players REFRESH: Players Added"
                                  : $"Team {_renderedTeamOrdinal} [{alias}] Players REFRESH: No Players Added";
            }
            catch (Exception ex)
            {
                _isLoadingMembers = false;

                message = $"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to refresh outfit [{alias}]. The outfit may no longer exist:</span> {ex.ToString()}</span>";
            }

            LogMessage(message);

            InvokeAsyncStateHasChanged();
        }
    }

    private async Task RemoveOutfit()
    {
        if (!_isLoadingMembers)
        {
            await TeamsManager.RemoveOutfitFromTeamAndDbAsync(_renderedOutfit.AliasLower);
        }
    }
    #endregion Form Submission & Validation

    #region UI & Layout Controls
    private void TogglePlayersVisibility()
    {
        _extendPlayers = !_extendPlayers;
        _isManualExtendValue = true;
    }
    #endregion UI & Layout Controls

    #region Event Handling
    private void LogMessage(string message)
    {
        MessageService.BroadcastSimpleMessage(message);
    }

    private void ReceiveTeamPlayerChangeEvent(object? sender, ScrimMessageEventArgs<TeamPlayerChangeMessage> e)
    {
        var message = e.Message;

        var player = message.Player;

        if (!ShouldProcessPlayer(player))
        {
            return;
        }

        _playerChangesQueue.Enqueue(message);

        ProcessPlayerChangesQueue();
    }

    private void ReceiveTeamOutfitChangeEvent(object? sender, ScrimMessageEventArgs<TeamOutfitChangeMessage> e)
    {
        var outfit = e.Message.Outfit;
        var changeType = e.Message.ChangeType;

        if (outfit.Id != _renderedOutfit?.Id)
        {
            return;
        }

        if (changeType == TeamChangeType.OutfitMembersLoadStarted)
        {
            _isLoadingMembers = true;
            InvokeAsyncStateHasChanged();
        }
        else if (changeType == TeamChangeType.OutfitMembersLoadCompleted)
        {
            _isLoadingMembers = false;

            SetExtendPlayers();

            _renderedOutfit.MemberCount = outfit.MemberCount;
            _renderedOutfit.MembersOnlineCount = outfit.MembersOnlineCount;

            InvokeAsyncStateHasChanged();
        }
    }

    private void ReceivePlayerStatUpdateEvent(object? sender, ScrimMessageEventArgs<PlayerStatUpdateMessage> e)
    {
        var player = e.Message.Player;

        if (!ShouldProcessPlayer(player))
        {
            return;
        }

        TeamPlayerChangeMessage changeMessage;

        if (player.IsParticipating || _renderedIsTeamLocked)
        {
            changeMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.SetActive);
        }
        else if (player.IsOnline)
        {
            changeMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.Add);
        }
        else
        {
            changeMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.SetInactive);
        }

        _playerChangesQueue.Enqueue(changeMessage);

        ProcessPlayerChangesQueue();
    }

    private void ReceivePlayerLoginEvent(object? sender, ScrimMessageEventArgs<PlayerLoginMessage> e)
    {
        var player = e.Message.Player;

        if (!ShouldProcessPlayer(player))
        {
            return;
        }

        TeamPlayerChangeMessage changeMessage;

        if (player.IsParticipating)
        {
            changeMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.SetActive);
        }
        else
        {
            changeMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.Add);
        }

        _playerChangesQueue.Enqueue(changeMessage);

        ProcessPlayerChangesQueue();
    }

    private void ReceivePlayerLogoutEvent(object? sender, ScrimMessageEventArgs<PlayerLogoutMessage> e)
    {
        var player = e.Message.Player;

        if (!ShouldProcessPlayer(player))
        {
            return;
        }

        TeamPlayerChangeMessage changeMessage;

        // Participating players stay visible even when online, but need to process the event to ensure online players count is correct
        if (player.IsParticipating || _renderedIsTeamLocked)
        {
            changeMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.SetActive);
        }
        else
        {
            changeMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.SetInactive);
        }

        _playerChangesQueue.Enqueue(changeMessage);

        ProcessPlayerChangesQueue();
    }
    #endregion Event Handling

    private void ProcessPlayerChangesQueue()
    {
        InvokeAsync(() =>
        {
            lock (_renderedPlayers)
            {
                var changes = 0;

                while (_playerChangesQueue.TryDequeue(out TeamPlayerChangeMessage? changeMessage))
                {
                    var player = changeMessage.Player;
                    var changeType = changeMessage.ChangeType;

                    if (changeType == TeamPlayerChangeType.Add)
                    {
                        if (!_renderedPlayers.Contains(player) && (player.IsParticipating || player.IsOnline))
                        {
                            _renderedPlayers.Add(player);
                            changes += 1;
                        }
                    }
                    else if (changeType == TeamPlayerChangeType.Remove)
                    {
                        _renderedPlayers.Remove(player);
                        changes += 1;
                    }
                    else if (changeType == TeamPlayerChangeType.SetActive)
                    {
                        if (!_renderedPlayers.Contains(player) && (player.IsParticipating || player.IsOnline))
                        {
                            _renderedPlayers.Add(player);
                            changes += 1;
                        }
                    }
                    else if (changeType == TeamPlayerChangeType.SetInactive)
                    {
                        _renderedPlayers.Remove(player);
                        changes += 1;
                    }
                }

                int oldPlayersCount = _renderedPlayersCount;
                _renderedPlayersCount = _renderedPlayers.Count;
                changes += oldPlayersCount != _renderedPlayersCount ? 1 : 0;

                var oldExtendPlayers = _extendPlayers;
                SetExtendPlayers();

                changes += oldExtendPlayers != _extendPlayers ? 1 : 0;

                if (changes > 0)
                {
                    StateHasChanged();
                }
            }
        });
    }

    private bool ShouldProcessPlayer(Player player)
    {
        if (player.TeamOrdinal != i_teamOrdinal || player.OutfitId != _renderedOutfit?.Id || player.IsOutfitless || player.IsFromConstructedTeam)
        {
            return false;
        }

        return true;
    }

    private void SetMaxPlayersToExtend()
    {
        _maxPlayersToExtend = _renderedIsTeamLocked ? _lockedMaxPlayersToExtend : _defaultMaxPlayersToExtend;
    }

    private void SetExtendPlayers()
    {
        if (_isManualExtendValue)
        {
            return;
        }

        if (_renderedPlayersCount > _maxPlayersToExtend)
        {
            _extendPlayers = false;
        }
        else
        {
            _extendPlayers = true;
        }
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
