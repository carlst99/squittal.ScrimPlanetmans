@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.App.ScrimMatch
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.ScrimMatch.Models
@using squittal.ScrimPlanetmans.App.Services.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.Data.Models
@using squittal.ScrimPlanetmans.App.Models
@using squittal.ScrimPlanetmans.App.Models.Forms
@using squittal.ScrimPlanetmans.App.Models.Planetside
@using squittal.ScrimPlanetmans.App.Abstractions.Services.Planetside
@using DbgCensus.Core.Objects

@inject IScrimTeamsManager TeamsManager
@inject IConstructedTeamService ConstructedTeamsService
@inject IScrimMatchEngine ScrimMatchEngine
@inject IOutfitService OutfitService
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable


<div class="header-card-container @GetHeaderCardClass()">

    @if (_team == null)
    {
        <h4>Team @i_teamOrdinal</h4>
    }
    else if (!_teamOutfits.Any() && !_teamNonOutfitPlayers.Any() && !_anyPlayersOnTeam && !_teamConstructedTeams.Any())
    {
        <h4>
            Team @(i_teamOrdinal):
            <EditForm Model="@_displayAlias" OnValidSubmit="HandleSetCustomDisplayAlias" style="display: inline; font-size: 1.2rem;" class="mono-font">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputAlias id="setAliasInput" @bind-Value="_displayAlias" style="width: 55px; color: inherit;" />

                <button type="submit" class="btn btn-primary">
                    <span class="oi oi-pencil"></span>Update
                </button>
            </EditForm>

            @if (_team.EventAggregate != null && (_team.EventAggregate.Points != 0 || _team.EventAggregate.PointAdjustments.Any()))
            {
                <span style="font-size: 0.85rem; font-weight: 500;position: absolute;vertical-align: bottom;right: 2rem;top: 0.85rem;">
                    @(_team.EventAggregate.Kills)k @(_team.EventAggregate.Deaths)d
                    <span style="font-weight: 700; font-size: larger;">
                        @(_team.EventAggregate.Points)
                    </span>
                </span>
            }

        </h4>

    }
    else
    {
        <h4 class="@SqCssHelper.GetFactionClassFromId(_team.FactionId)" style="color: var(--sq-ps2-primary);">
            Team @($"{i_teamOrdinal}: ")
            <EditForm Model="@_displayAlias" OnValidSubmit="HandleSetCustomDisplayAlias" style="display: inline; font-size: 1.2rem; color: inherit;" class="mono-font">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputAlias id="setAliasInput" @bind-Value="_displayAlias" style="width: 55px; color: inherit;" />

                <button type="submit" class="btn btn-primary">
                    <span class="oi oi-pencil"></span>Update
                </button>
            </EditForm>
            <span style="font-size: 0.85rem; font-weight: 500;position: absolute;vertical-align: bottom;right: 2rem;top: 0.85rem;">
                @(_team.EventAggregate.Kills)k @(_team.EventAggregate.Deaths)d
                <span style="font-weight: 700; font-size: larger;">
                    @(_team.EventAggregate.Points)
                </span>
            </span>
        </h4>
    }

    @if (!_isTeamLocked && !_isLockingTeam)
    {
        <div style="margin: 0.2rem 0;">
            <EditForm Model="@_inputAlias" OnValidSubmit="HandleValidOutfitAliasSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                Add Outfit: <InputAlias id="addOutfitInput" @bind-Value="_inputAlias" />

                <button type="submit" class="btn btn-primary">
                    <span class="oi oi-people"></span>Add
                </button>
            </EditForm>
        </div>

        <div style="margin: 0.2rem 0;">
            <EditForm Model="@_inputPlayer" OnValidSubmit="HandleAddPlayerSubmit" title="Add a player to this team by name or character ID. Enter a comma-delimited list of names or character IDs to add multiple players">
                <DataAnnotationsValidator />
                <ValidationSummary />

                Add Player: <InputText id="addPlayerInput" @bind-Value="_inputPlayer" />

                <button type="submit" class="btn btn-primary">
                    <span class="oi oi-person"></span>Add
                </button>
            </EditForm>
        </div>

        @if (_availableConstructedTeams.Any())
        {
            <EditForm Model="@_inputConstructedTeamFactionSelection" style="display: inline-block;">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div style="margin-bottom: 0.2rem; display: inline-block;">
                    <p style="margin-bottom: 0.2rem;">Add Premade Team: </p>

                    <InputSelect style="margin-right: 5px; width: 250px; padding: 0.1rem; margin-bottom: 0.2rem;" Value="@_inputConstructedTeamFactionSelection.ConstructedTeamStringId" ValueChanged="@((string s) => HandleOnChangeConstructedTeamSelection(s))" ValueExpression="@(() => _inputConstructedTeamFactionSelection.ConstructedTeamStringId)">
                        <option value=@_noTeamSelectedStringId style="font-style: italic;">No Team Selected</option>

                        @foreach (ConstructedTeam team in _availableConstructedTeams)
                        {
                            <option value=@team.Id.ToString() label="@($"{team.Name} [{team.Alias}]")">[@team.Alias] @team.Name (@team.Id.ToString())</option>
                        }
                    </InputSelect>
                </div>

                @if (_isConstructedTeamVsAvailable)
                {
                    <button type="submit" class="btn btn-outline-primary vs" @onclick="(() => HandleAddConstructedTeamFactionSubmit(FactionDefinition.VS))" style="display: inline-block;">
                        VS
                    </button>
                }

                @if (_isConstructedTeamNcAvailable)
                {
                    <button type="submit" class="btn btn-outline-primary nc" @onclick="(() => HandleAddConstructedTeamFactionSubmit(FactionDefinition.NC))" style="display: inline-block;">
                        NC
                    </button>
                }

                @if (_isConstructedTeamTrAvailable)
                {
                    <button type="submit" class="btn btn-outline-primary tr" @onclick="(() => HandleAddConstructedTeamFactionSubmit(FactionDefinition.TR))" style="display: inline-block;">
                        TR
                    </button>
                }

            </EditForm>
        }
    }

    @if (!_isLockingTeam && (_teamOutfits.Any() || _teamConstructedTeams.Any() || _teamNonOutfitPlayers.Any() || _anyPlayersOnTeam))
    {
        <div style="margin: 0.2rem 0;" title="Unlock to show buttons for removing outfits and players from this team">
            <EditForm Model="@_showRemovals">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputCheckbox id="showRemovalsCheckBox" @bind-Value="_showRemovals" style="position: relative; top: 1px;"/> Show Removal Controls
            </EditForm>
        </div>
    }

    @if (!_isTeamLocked && !_isLockingTeam && (_teamOutfits.Any() || _teamNonOutfitPlayers.Any() || _anyPlayersOnTeam || _teamConstructedTeams.Any()))
    {
        <div style="margin: 8px 0;">
            <button type="button" class="btn btn-outline-primary" @onclick="HandleLockTeamClick" style="display: inline-block;" title="Lock this team's players. Players not currently visible will be removed from the match">
                <span class="oi oi-lock-locked"></span>Lock Team
            </button>
        </div>
    }
    else if (_isTeamLocked && !_isLockingTeam)
    {
        <div style="margin: 8px 0;">
            <button type="button" class="btn btn-outline-primary" @onclick="HandleUnlockTeamClick" style="display: inline-block;" title="Unlock this team's players">
                <span class="oi oi-lock-unlocked"></span>Unlock Team
            </button>
        </div>
    }



    @if (_isLockingTeam)
    {
        <SpinnerEllipsis />
    }

    <div class="@SqCssHelper.GetFactionClassFromId(_team?.FactionId)" style="margin: 0.4rem 0 0.2rem 0; padding-top: 8px; border-top: 1px solid var(--sq-ov-ps2-primary-light);">
        <div>
            <div style="display: inline-block; font-size: 0.9rem;">Point Adjustments</div>
            <button class="btn btn-link" style="padding: 0 0 0 0.5rem; font-size: smaller; vertical-align: baseline;" @onclick="TogglePointAdjustmentsVisibility">@(_extendPointAdjustments ? "Hide" : "Show")</button>
        </div>

        @if (_extendPointAdjustments)
        {
            @if (_team != null && _team.EventAggregate.PointAdjustments.Any())
            {
                <div class="@GetHeaderCardClass()">
                    <table class="table-responsive-sm table-striped-light mono-font smaller @SqCssHelper.GetFactionClassFromId(_team.FactionId)" style="margin-bottom: 0.5rem; width: 100%; font-size: small;">
                        <tbody style="border-top: 1px solid var(--sq-ps2-primary-light);">
                            @foreach (PointAdjustment adjustment in _team.EventAggregate.PointAdjustments)
                            {
                                <tr>
                                    <td style="text-align: right">@GetPointsDisplay(adjustment.Points)</td>
                                    @if (string.IsNullOrWhiteSpace(adjustment.Rationale))
                                    {
                                        <td style="font-style: italic;">No reason given</td>
                                    }
                                    else
                                    {
                                        <td>@adjustment.Rationale</td>
                                    }
                                    <td>@adjustment.Timestamp.ToString("hh:mm:ss tt")</td>

                                    <td style="width: 15px; text-align: right;">
                                        <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="(() => HandlePointAdjustmentRemove(adjustment))" title="Remove Point Adjustment">
                                            <span class="oi oi-x" style="font-size: 0.7rem; top: 0;"></span>
                                        </button>
                                    </td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            @if (_showPointAdjustmentForm)
            {
                <EditForm Model="@_inputPointAdjustment" OnValidSubmit="HandlePointAdjustmentSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    Amount: <InputNumber id="adjustmentPoints" @bind-Value="_inputPointAdjustment.Points" style="width: 64px; margin: 0.2rem 0.4rem 0.2rem 0;" />

                    Reason: <InputText id="adjustmentRationale" @bind-Value="_inputPointAdjustment.Rationale" style="margin: 0.2rem 0;" />

                    <div style="display: block; margin-left: auto; margin-right: auto;">
                        <button type="submit" class="btn btn-primary" style="display: inline-block; margin: 0.2rem 0;">
                            <span class="oi oi-check"></span>Confirm
                        </button>

                        <button @onclick="HandlePointAdjustmentCancel" class="btn btn-outline-primary" style="display: inline-block; margin: 0.2rem 0;" title="Cancel adding new point adjustment">
                            <span class="oi oi-x" style="top: 0;"></span>Cancel
                        </button>
                    </div>

                </EditForm>
            }
            else
            {
                <button class="btn btn-outline-primary" @onclick="TogglePointAdjustmentFormVisibility" style="display: block; margin: 0.2rem auto 0.2rem auto; font-size: small;">
                    <span class="oi oi-plus"></span>New Point Adjustment
                </button>
            }


        }
    </div>

</div>

@if (_teamConstructedTeams.Any())
{
    foreach (ConstructedTeamMatchInfo team in _teamConstructedTeams)
    {
        <TeamComposerConstructedTeamPlayers i_constructedTeamMatchInfo=@team i_teamOrdinal=@i_teamOrdinal i_showRemovals=@_showRemovals i_isLockingTeam=@_isLockingTeam i_isTeamLocked=@_isTeamLocked />
    }
}

@if (_constructedTeamsLoading.Any())
{
    <SpinnerEllipsis />
}

@if (_teamOutfits.Any())
{
    foreach (Outfit outfit in _teamOutfits)
    {
        <TeamComposerOutfitPlayers i_outfit=@outfit i_teamOrdinal=@i_teamOrdinal i_showRemovals=@_showRemovals i_isLockingTeam=@_isLockingTeam i_isTeamLocked=@_isTeamLocked />
    }
}
@if (_teamOutfitsLoading.Any())
{
    <SpinnerEllipsis />
}

<TeamComposerNonOutfitPlayers i_teamOrdinal=@i_teamOrdinal i_showRemovals=@_showRemovals i_isLockingTeam=@_isLockingTeam i_isTeamLocked=@_isTeamLocked />


@code {
    [Parameter]
    public TeamDefinition i_teamOrdinal { get; set; }

    #region Form & Input Variables
    private OutfitAlias _inputAlias = new();

    private OutfitAlias _displayAlias = new();

    private string _inputPlayer = string.Empty;

    private PointAdjustment _inputPointAdjustment = new();

    private List<string> _teamOutfitsLoading = new();

    private List<string> _validOutfitAliasHistory = new();

    #endregion

    #region Team & Players
    private Team _team;

    private List<Outfit> _teamOutfits = new();
    private List<ConstructedTeamMatchInfo> _teamConstructedTeams = new();
    private List<Player> _teamNonOutfitPlayers = new();
    #endregion

    #region UI & Layout Variables
    private bool _showRemovals = false;

    private bool _showPointAdjustmentForm = false;

    private bool _extendPointAdjustments = true;

    private bool _anyPlayersOnTeam = false;

    private bool _isTeamLocked = false;
    private bool _isLockingTeam = false;
    #endregion

    #region Constructed Team Selection Variables
    private ConstructedTeamFactionSelection _inputConstructedTeamFactionSelection { get; set; } = new();

    private string _inputTeamStringId { get; set; } = "-1"; // string.Empty;

    private List<ConstructedTeam> _availableConstructedTeams { get; set; } = new();

    private bool _isConstructedTeamVsAvailable { get; set; } = false; //true;
    private bool _isConstructedTeamNcAvailable { get; set; } = false; //true;
    private bool _isConstructedTeamTrAvailable { get; set; } = false; //true;

    private string _noTeamSelectedStringId { get; set; } = "-1";
    private int _noTeamSelectedId { get; set; } = -1;

    private List<ConstructedTeamFactionSelection> _constructedTeamsLoading { get; set; } = new();

    #endregion Constructed Team Selection Variables

    #region Helpers
    private TeamDefinition _renderedTeamOrdinal;
    #endregion

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaiseTeamOutfitChangeEvent += ReceiveTeamOutfitChangeEvent;
        MessageService.RaiseTeamConstructedTeamChangeEvent += ReceiveTeamConstructedTeamChangeEvent;
        MessageService.RaiseTeamLockStatusChangeEvent += ReceiveTeamLockStatusChangeEvent;

        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamStatUpdateEvent += ReceiveTeamStatUpdateEvent;

        MessageService.RaiseTeamAliasChangeEvent += ReceiveTeamAliasChangeEvent;
        MessageService.RaiseTeamFactionChangeEvent += ReceiveTeamFactionChangeEvent;

        _inputConstructedTeamFactionSelection.ConstructedTeamStringId = _noTeamSelectedStringId;
    }

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<ConstructedTeam> storeConstructedTeams = await ConstructedTeamsService.GetConstructedTeamsAsync();
        _availableConstructedTeams.AddRange(storeConstructedTeams);
    }

    public void Dispose()
    {
        MessageService.RaiseTeamPlayerChangeEvent -= ReceiveTeamPlayerChangeEvent;
        MessageService.RaiseTeamOutfitChangeEvent -= ReceiveTeamOutfitChangeEvent;
        MessageService.RaiseTeamConstructedTeamChangeEvent -= ReceiveTeamConstructedTeamChangeEvent;
        MessageService.RaiseTeamLockStatusChangeEvent -= ReceiveTeamLockStatusChangeEvent;

        MessageService.RaisePlayerStatUpdateEvent -= ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamStatUpdateEvent -= ReceiveTeamStatUpdateEvent;

        MessageService.RaiseTeamAliasChangeEvent -= ReceiveTeamAliasChangeEvent;
        MessageService.RaiseTeamFactionChangeEvent -= ReceiveTeamFactionChangeEvent;
    }

    protected override void OnParametersSet()
    {
        if (i_teamOrdinal != _renderedTeamOrdinal && i_teamOrdinal >= 0)
        {
            _renderedTeamOrdinal = i_teamOrdinal;
            InitializeTeamData();
        }
    }

    private void InitializeTeamData()
    {
        string message = $"Starting to reload Team {i_teamOrdinal} data...";
        LogMessage(message);

        _team = TeamsManager.GetTeam(i_teamOrdinal);

        if (_team == null)
        {
            return;
        }

        _displayAlias.Alias = TeamsManager.GetTeamAliasDisplay(i_teamOrdinal);

        _isTeamLocked = _team.IsLocked;

        _teamOutfits = new List<Outfit>();
        _teamOutfits.AddRange(_team.Outfits);

        _teamConstructedTeams = new List<ConstructedTeamMatchInfo>();
        _teamConstructedTeams.AddRange(_team.ConstructedTeamsMatchInfo);

        _anyPlayersOnTeam = (_team.Players.Count > 0);

        _validOutfitAliasHistory = _team.Outfits.Select(o => o.AliasLower).ToList();

        message = $"Finished reloading Team {i_teamOrdinal} data";
        LogMessage(message);
    }
    #endregion Initialization Methods

    #region  Form Submission & Validation
    private async void HandleValidOutfitAliasSubmit()
    {
        string newAlias = _inputAlias.Alias;
        string newAliasLower = newAlias.ToLower();

        if (!_validOutfitAliasHistory.Contains(newAliasLower) && !TeamsManager.IsOutfitOwnedByTeam(newAliasLower, out _))
        {
            _teamOutfitsLoading.Add(newAliasLower);

            try
            {
                Outfit? newOutfit = await OutfitService.GetByAliasAsync(newAliasLower);

                if (newOutfit is { MemberCount: > 0 })
                {
                    _validOutfitAliasHistory.Add(newAliasLower);
                    _inputAlias.Alias = string.Empty;

                    await TeamsManager.AddOutfitAliasToTeam(i_teamOrdinal, newAliasLower);
                    _teamOutfitsLoading.Remove(newAliasLower);
                    InvokeAsyncStateHasChanged();
                }
                else
                {
                    if (newOutfit is { MemberCount: 0 })
                    {
                        LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add outfit [{newAliasLower}]</span>. Outfit has no members</span>");
                    }

                    _teamOutfitsLoading.Remove(newAliasLower);
                    InvokeAsyncStateHasChanged();
                }
            }
            catch (Exception ex)
            {
                _teamOutfitsLoading.Remove(newAliasLower);

                LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add outfit [{newAliasLower}]</span>: {ex}</span>");

                InvokeAsyncStateHasChanged();
            }
        }
    }

    private void HandleSetCustomDisplayAlias()
    {
        string newAlias = _displayAlias.Alias;

        bool success = TeamsManager.UpdateTeamAlias(i_teamOrdinal, newAlias, true);

        if (!success)
        {
            _displayAlias.Alias = string.Empty;
        }

        InvokeAsyncStateHasChanged();
    }

    private async void HandleAddPlayerSubmit()
    {
        string input = _inputPlayer;

        if (string.IsNullOrWhiteSpace(input))
        {
            return;
        }

        string cleanedInput = GetCleanedInputPlayersString(input, out _);
        Dictionary<string, Task<bool>> inputsDict = cleanedInput.Split(',')
            .Distinct()
            .Where(i => !string.IsNullOrWhiteSpace(i))
            .ToDictionary(i => i, TryAddInputCharacterToTeam);

        await Task.WhenAll(inputsDict.Values);

        bool anySuccesses = false;
        List<string> failedInputs = new();

        foreach (KeyValuePair<string, Task<bool>> inputTaskPair in inputsDict)
        {
            bool result = inputTaskPair.Value.Result;

            anySuccesses = (anySuccesses || result);

            if (!result)
            {
                failedInputs.Add(inputTaskPair.Key);
            }
        }

        if (failedInputs.Any())
        {
            string failedInputsStringList = string.Join(",", failedInputs);

            LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 500;\">Failed to add characters {failedInputsStringList}</span>.");

            _inputPlayer = failedInputsStringList;
        }
        else
        {
            _inputPlayer = string.Empty;
        }

        InvokeAsyncStateHasChanged();
    }

    private async Task<bool> TryAddInputCharacterToTeam(string input)
    {
        try
        {
            return await TeamsManager.TryAddFreeTextInputCharacterToTeamAsync(i_teamOrdinal, input);
        }
        catch (Exception ex)
        {
            LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add character {input}</span>: {ex}</span>");
            return false;
        }
    }

    private string GetCleanedInputPlayersString(string input, out bool isList)
    {
        char[] characters = input.ToCharArray();

        characters = Array.FindAll(characters, (c => (char.IsLetterOrDigit(c)
                                                            || c == ',')));

        isList = characters.Contains(',');

        return new string(characters);
    }

    private void HandleOnChangeConstructedTeamSelection(string constructedTeamStringId)
    {
        if (!int.TryParse(constructedTeamStringId, out int constructedTeamId))
        {
            return;
        }

        UpdateConstructedTeamFactionAvailabilities(constructedTeamId);

        _inputConstructedTeamFactionSelection.ConstructedTeamStringId = constructedTeamStringId;
    }

    private async void HandleAddConstructedTeamFactionSubmit(FactionDefinition factionId)
    {
        ConstructedTeamFactionSelection newSelection = _inputConstructedTeamFactionSelection;

        newSelection.FactionId = factionId;

        if (newSelection.ConstructedTeamStringId == _noTeamSelectedStringId)
        {
            return;
        }

        if (TeamsManager.IsConstructedTeamFactionAvailable(newSelection.ConstructedTeamId, factionId) && !_constructedTeamsLoading.Any(t => t.ConstructedTeamId == newSelection.ConstructedTeamId && t.FactionId == newSelection.FactionId))
        {
            _constructedTeamsLoading.Add(newSelection);

            try
            {
                ConstructedTeam? newTeam = await ConstructedTeamsService.GetConstructedTeamAsync(newSelection.ConstructedTeamId, true);

                if (newTeam != null)
                {
                    await TeamsManager.AddConstructedTeamFactionMembersToTeam(i_teamOrdinal, newTeam.Id, newSelection.FactionId);
                    _constructedTeamsLoading.Remove(newSelection);
                    //_availableConstructedTeams.RemoveAll(t => t.Id == newTeam.Id);

                    _inputConstructedTeamFactionSelection = new ConstructedTeamFactionSelection
                    {
                        ConstructedTeamStringId = _noTeamSelectedStringId
                    };

                    UpdateConstructedTeamFactionAvailabilities(_inputConstructedTeamFactionSelection.ConstructedTeamId); // TEST
                }

                InvokeAsyncStateHasChanged();
            }
            catch (Exception ex)
            {
                _constructedTeamsLoading.Remove(newSelection);

                LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add constructed team {newSelection.ConstructedTeamStringId} faction {newSelection.FactionId} to team {i_teamOrdinal} </span>: {ex}</span>");

                InvokeAsyncStateHasChanged();
            }
        }
    }

    private async void HandlePointAdjustmentSubmit()
    {
        PointAdjustment adjustment = _inputPointAdjustment;

        if (adjustment.Points == 0 && string.IsNullOrWhiteSpace(adjustment.Rationale))
        {
            return;
        }

        adjustment.Timestamp = DateTime.Now;

        await TeamsManager.AdjustTeamPoints(i_teamOrdinal, adjustment);

        _inputPointAdjustment = new PointAdjustment();

        _showPointAdjustmentForm = false;
    }

    private void HandlePointAdjustmentCancel()
    {
        _inputPointAdjustment = new PointAdjustment();

        _showPointAdjustmentForm = false;
    }

    private void HandlePointAdjustmentRemove(PointAdjustment adjustment)
    {
        TeamsManager.RemoveTeamPointAdjustment(i_teamOrdinal, adjustment);
    }


    private async void HandleLockTeamClick()
    {
        _isLockingTeam = true;
        _showRemovals = false;
        InvokeAsyncStateHasChanged();

        try
        {
            await Task.Run(() => TeamsManager.LockTeamPlayers(_renderedTeamOrdinal));
            _isTeamLocked = true;
        }
        catch
        {
            // Ignore
        }

        _isLockingTeam = false;
        InvokeAsyncStateHasChanged();
    }

    private void HandleUnlockTeamClick()
    {
        TeamsManager.UnlockTeamPlayers(_renderedTeamOrdinal);
        _isTeamLocked = false;

        InvokeAsyncStateHasChanged();
    }
    #endregion Form Submission & Validation

    #region UI & Layout Controls
    private void TogglePointAdjustmentsVisibility()
    {
        _extendPointAdjustments = !_extendPointAdjustments;

        if (!_extendPointAdjustments)
        {
            _showPointAdjustmentForm = false;
        }
    }

    private void TogglePointAdjustmentFormVisibility()
    {
        _showPointAdjustmentForm = !_showPointAdjustmentForm;
    }

    private void UpdateConstructedTeamFactionAvailabilities(int constructedTeamId)
    {
        _isConstructedTeamVsAvailable = constructedTeamId != _noTeamSelectedId
            && TeamsManager.IsConstructedTeamFactionAvailable(constructedTeamId, FactionDefinition.VS);
        _isConstructedTeamNcAvailable = constructedTeamId != _noTeamSelectedId
            && TeamsManager.IsConstructedTeamFactionAvailable(constructedTeamId, FactionDefinition.NC);
        _isConstructedTeamTrAvailable = constructedTeamId != _noTeamSelectedId
            && TeamsManager.IsConstructedTeamFactionAvailable(constructedTeamId, FactionDefinition.TR);
    }

    #endregion UI & Layout Controls

    #region Event Handling
    private void LogMessage(string message)
    {
        MessageService.BroadcastSimpleMessage(message);
    }

    private void ReceiveTeamPlayerChangeEvent(object? sender, ScrimMessageEventArgs<TeamPlayerChangeMessage> e)
    {
        TeamPlayerChangeMessage message = e.Message;

        Player player = message.Player;

        if (player.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        switch (message.ChangeType)
        {
            case TeamPlayerChangeType.Add:
                HandleTeamPlayerChangeAdd(message);
                break;

            case TeamPlayerChangeType.Remove:
                HandleTeamPlayerChangeRemove(message);
                break;
        }

        InvokeAsyncStateHasChanged();
    }

    private void ReceiveTeamOutfitChangeEvent(object? sender, ScrimMessageEventArgs<TeamOutfitChangeMessage> e)
    {
        TeamOutfitChangeMessage message = e.Message;
        Outfit outfit = message.Outfit;

        if (outfit.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        string aliasLower = outfit.AliasLower;

        if (message.ChangeType == TeamChangeType.Add)
        {
            _teamOutfitsLoading.Remove(aliasLower);
            _teamOutfits.Add(outfit);
        }
        else if (message.ChangeType == TeamChangeType.Remove)
        {
            _validOutfitAliasHistory.RemoveAll(alias => alias == aliasLower);
            _teamOutfits.RemoveAll(o => o.Id == outfit.Id);
        }

        InvokeAsyncStateHasChanged();
    }

    private void ReceiveTeamConstructedTeamChangeEvent(object? sender, ScrimMessageEventArgs<TeamConstructedTeamChangeMessage> e)
    {
        TeamConstructedTeamChangeMessage message = e.Message;

        TeamDefinition teamOrdinal = message.TeamOrdinal;
        TeamChangeType changeType = message.ChangeType;
        ConstructedTeam constructedTeam = message.ConstructedTeam;

        if (teamOrdinal != i_teamOrdinal)
        {
            if (changeType == TeamChangeType.Add)
            {
                if (!TeamsManager.IsConstructedTeamAnyFactionAvailable(constructedTeam.Id))
                {
                    _availableConstructedTeams.RemoveAll(t => t.Id == constructedTeam.Id);
                }
            }
            else if (message.ChangeType == TeamChangeType.Remove)
            {
                if (TeamsManager.IsConstructedTeamAnyFactionAvailable(constructedTeam.Id) && !_availableConstructedTeams.Any(t => t.Id == constructedTeam.Id))
                {
                    _availableConstructedTeams.Add(constructedTeam);
                }
            }

            if (constructedTeam.Id == _inputConstructedTeamFactionSelection.ConstructedTeamId)
            {
                UpdateConstructedTeamFactionAvailabilities(constructedTeam.Id);
            }

            InvokeAsyncStateHasChanged();

            return;
        }


        FactionDefinition factionId = message.FactionId;

        if (changeType == TeamChangeType.Add)
        {
            //_availableConstructedTeams.RemoveAll(t => t.Id == constructedTeam.Id);
            if (!TeamsManager.IsConstructedTeamAnyFactionAvailable(constructedTeam.Id))
            {
                _availableConstructedTeams.RemoveAll(t => t.Id == constructedTeam.Id);
            }

            _constructedTeamsLoading.RemoveAll(t => t.ConstructedTeamId == constructedTeam.Id && t.FactionId == factionId);

            ConstructedTeamMatchInfo constructedTeamMatchInfo = new()
            {
                ConstructedTeam = constructedTeam,
                TeamOrdinal = i_teamOrdinal,
                ActiveFactionId = factionId
            };

            _teamConstructedTeams.Add(constructedTeamMatchInfo);
        }
        else if (message.ChangeType == TeamChangeType.Remove)
        {
            _teamConstructedTeams.RemoveAll(t => t.ConstructedTeam?.Id == constructedTeam.Id && t.ActiveFactionId == factionId);

            //_availableConstructedTeams.Add(constructedTeam);
            //if (TeamsManager.IsConstructedTeamAnyFactionAvailable(constructedTeam.Id))
            //{
            //    _availableConstructedTeams.Add(constructedTeam);
            //}
            if (TeamsManager.IsConstructedTeamAnyFactionAvailable(constructedTeam.Id) && !_availableConstructedTeams.Any(t => t.Id == constructedTeam.Id))
            {
                _availableConstructedTeams.Add(constructedTeam);
            }
        }

        if (constructedTeam.Id == _inputConstructedTeamFactionSelection.ConstructedTeamId)
        {
            UpdateConstructedTeamFactionAvailabilities(constructedTeam.Id);
        }

        InvokeAsyncStateHasChanged();
    }

    private void HandleTeamPlayerChangeAdd(TeamPlayerChangeMessage message)
    {
        Player player = message.Player;

        if (player.IsOutfitless && !player.IsFromConstructedTeam && !_teamNonOutfitPlayers.Any(p => p.Id == player.Id))
        {
            _teamNonOutfitPlayers.Add(player);

            _anyPlayersOnTeam = (_team.Players.Count > 0);

            InvokeAsyncStateHasChanged();
        }
    }

    private void HandleTeamPlayerChangeRemove(TeamPlayerChangeMessage message)
    {
        Player player = message.Player;

        if (player.IsOutfitless && !player.IsFromConstructedTeam)
        {
            _teamNonOutfitPlayers.RemoveAll(p => p.Id == player.Id);

            _anyPlayersOnTeam = (_team.Players.Count > 0);

            InvokeAsyncStateHasChanged();
        }
    }

    private void ReceivePlayerStatUpdateEvent(object? sender, ScrimMessageEventArgs<PlayerStatUpdateMessage> e)
    {
        PlayerStatUpdateMessage message = e.Message;
        Player player = message.Player;

        if (player.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        if (player.IsOutfitless && !player.IsFromConstructedTeam && !_teamNonOutfitPlayers.Any(p => p.Id == player.Id))
        {
            _teamNonOutfitPlayers.Add(player);

            _anyPlayersOnTeam = (_team.Players.Count > 0);
        }

        InvokeAsyncStateHasChanged();
    }

    private void ReceiveTeamStatUpdateEvent(object? sender, ScrimMessageEventArgs<TeamStatUpdateMessage> e)
    {
        TeamStatUpdateMessage message = e.Message;
        Team team = message.Team;

        if (team.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        InvokeAsyncStateHasChanged();
    }

    private void ReceiveTeamAliasChangeEvent(object? sender, ScrimMessageEventArgs<TeamAliasChangeMessage> e)
    {
        TeamAliasChangeMessage message = e.Message;

        TeamDefinition teamOrdinal = message.Ordinal;
        string newAlias = message.NewAlias;

        if (teamOrdinal != i_teamOrdinal)
        {
            return;
        }

        _displayAlias.Alias = newAlias;

        InvokeAsyncStateHasChanged();
    }

    private void ReceiveTeamFactionChangeEvent(object? sender, ScrimMessageEventArgs<TeamFactionChangeMessage> e)
    {
        TeamFactionChangeMessage message = e.Message;

        TeamDefinition teamOrdinal = message.Ordinal;
        FactionDefinition? newFactionId = message.NewFactionId;

        if (teamOrdinal != i_teamOrdinal)
        {
            return;
        }

        if (_team.FactionId == newFactionId)
        {
            return;
        }

        InvokeAsyncStateHasChanged();
    }

    private void ReceiveTeamLockStatusChangeEvent(object? sender, ScrimMessageEventArgs<TeamLockStatusChangeMessage> e)
    {
        TeamDefinition teamOrdinal = e.Message.TeamOrdinal;
        bool newIsLocked = e.Message.IsLocked;

        if (teamOrdinal != _renderedTeamOrdinal)
        {
            return;
        }

        if (newIsLocked != _isTeamLocked)
        {
            _isTeamLocked = newIsLocked;

            _showRemovals = !_isTeamLocked && _showRemovals;

            InvokeAsyncStateHasChanged();
        }
    }
    #endregion Event Handling

    private string GetHeaderCardClass()
    {
        return _team is { FactionId: { } }
            ? SqCssHelper.GetFactionClassFromId(_team.FactionId)
            : "default";
    }

    private double GetStatOpacity(int value)
        => value != 0 ? 1.0 : 0.5;

    private string GetPointsDisplay(int points)
    {
        return points >= 0
            ? $"+{points.ToString()}"
            : $"{points.ToString()}";
    }

    private void InvokeAsyncStateHasChanged()
        => InvokeAsync(StateHasChanged);
}
