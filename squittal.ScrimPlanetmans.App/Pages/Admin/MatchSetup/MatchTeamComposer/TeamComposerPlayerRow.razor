@using squittal.ScrimPlanetmans.App.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.ScrimMatch.Models
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.Models
@using DbgCensus.Core.Objects
@using squittal.ScrimPlanetmans.App.Abstractions.Services.CensusRest
@using squittal.ScrimPlanetmans.App.Abstractions.Services.ScrimMatch
@using squittal.ScrimPlanetmans.App.Util

@implements IDisposable

@inject IScrimTeamsManager ScrimTeamsManager
@inject IScrimMessageBroadcastService MessageService
@inject ICensusWorldService WorldService

@if (Player != null)
{
    <tr class="@SqCssHelper.GetFactionClassFromId(Player.FactionId)">
        <td style="padding-right: 5px; width: 15px;" title="@(Player.IsOnline ? "Online" : "Offline")">@SqCssHelper.GetOnlineStatusEmoji(Player.IsOnline)</td>
        <td style="padding-right: 0px; padding-left: 0px; width: 10px; font-weight: 700;" title="@(Player.IsParticipating ? "Participating" : "Not Participating")">@SqCssHelper.GetParticipatingStatusEmoji(Player.IsParticipating)</td>

        @if (_showTemporaryAliasEditForm)
        {
            <td>

                <p style="margin: 4px 0; color: var(--sq-black);">
                    <span style="width: 112px; display: inline-block; margin-right: 4px;">Full Name:</span><span style="color: var(--sq-ps2-primary);">@Player.NameFull</span>
                </p>

                <p style="margin: 4px 0; color: var(--sq-black);">
                    <span style="width: 112px; display: inline-block; margin-right: 4px;">Current Alias:</span><span style="color: var(--sq-ps2-primary);">@Player.NameDisplay</span>
                </p>

                <EditForm Model="@_inputTemporaryAlias" OnValidSubmit="HandleTemporaryAliasSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <span style="width: 112px; display: inline-block; margin-right: 4px; color: var(--sq-black);">New Alias:</span><InputText id="inputTemporaryAlias" @bind-Value="_inputTemporaryAlias" style="width: 168px; margin: 0.2rem 0.4rem 0.2rem 0; display: inline-block;" />

                    <div style="display: inline-block; margin-left: auto; margin-right: auto;">

                        <button type="submit" style="padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Submit player match alias">
                            <span class="oi oi-check"></span>
                        </button>

                        <button @onclick="HandleTemporaryAliasCancel" style="color: var(--sq-gray); padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Cancel editing match display name">
                            <span class="oi oi-x" style="top: 0;"></span>
                        </button>

                        <button @onclick="HandleClearDisplayName" style="color: var(--sq-gray); padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Reset player display name to full name">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>

                </EditForm>
            </td>
        }
        else
        {
            <td title="@GetPlayerNameElementTitle()">
                <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@Player.NameDisplay</span>
                @if (Player.PrestigeLevel != 0)
                {
                    <div style="display: inline-block; margin-left: 4px;" title="ASP Active">
                        <sup>
                            <span class="oi oi-star small" aria-hidden="true"></span>
                        </sup>
                    </div>
                }
                <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(Player.Id)]</span>

                <button @onclick="HandleShowEditTemporaryAliasForm" style=" color: var(--sq-gray); padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Change this player's display name for the match">
                    <span class="oi oi-pencil" style="top: 0;"></span>
                </button>
            </td>
        }

        <td style="opacity: @GetStatOpacity(Player.EventAggregate.Kills); text-align: right;">@(Player.EventAggregate.Kills)</td>
        <td style="opacity: @GetStatOpacity(Player.EventAggregate.Deaths); text-align: right;">@(Player.EventAggregate.Deaths)</td>
        <td style="opacity: @GetStatOpacity(Player.EventAggregate.NetScore); text-align: right;">@(Player.EventAggregate.NetScore)</td>
        <td style="font-weight: 700; font-size: larger; opacity: @GetStatOpacity(Player.EventAggregate.Points); text-align: right;">@(Player.EventAggregate.Points)</td>

        <td style="width: 15px; text-align: right;">
            @if (Player.IsBenched)
            {
                <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="HandleSubstitutePlayer" title="Substitute Player In. Benched players are not scored and are hidden from the streaming overlay">
                    <span class="oi oi-account-login" style="font-size: 0.8rem; top: 1px;"></span>
                </button>
            }
            else
            {
                <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="HandleSubstitutePlayer" title="Substitute Player Out. Benched players are not scored and are hidden from the streaming overlay">
                    <span class="oi oi-account-logout" style="font-size: 0.8rem; top: 1px;"></span>
                </button>
            }
        </td>

        @if (ShowRemovalControls)
        {
            <td style="width: 15px; text-align: right;">
                <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="RemovePlayer" title="Remove Player">
                    <span class="oi oi-x" style="font-size: 0.7rem; top: 0;"></span>
                </button>
            </td>
        }
    </tr>
}

@code {
    [Parameter]
    public Player Player { get; set; }
    private Player _renderedPlayer { get; set; }

    [Parameter]
    public bool ShowRemovalControls { get; set; }

    private WorldDefinition _renderedWorldId { get; set; } = 0;
    private string _renderedWorldName { get; set; } = string.Empty;

    private bool _showTemporaryAliasEditForm { get; set; } = false;
    private string _inputTemporaryAlias { get; set; } = string.Empty;

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;
        MessageService.RaisePlayerNameDisplayChangeEvent += ReceivePlayerNameDisplayChangeMessageEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseTeamPlayerChangeEvent -= ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent -= ReceivePlayerStatUpdateEvent;
        MessageService.RaisePlayerLoginEvent -= ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent -= ReceivePlayerLogoutEvent;
        MessageService.RaisePlayerNameDisplayChangeEvent -= ReceivePlayerNameDisplayChangeMessageEvent;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Player != null && Player.WorldId != _renderedWorldId)
        {
            _renderedWorldId = Player.WorldId;

            var renderedWorld = await WorldService.GetByIdAsync(_renderedWorldId);

            _renderedWorldName = renderedWorld?.Name.English.GetValueOrDefault() ?? "Unknown World";

            await InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnParametersSet()
    {
        var paramsChanged = false;

        if (_renderedPlayer != Player)
        {
            _renderedPlayer = Player;
            _showTemporaryAliasEditForm = false;

            paramsChanged = true;
        }

        if (Player != null)
        {
            _inputTemporaryAlias = Player.NameDisplay;
            paramsChanged = true;
        }

        if (paramsChanged == true)
        {
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }
    #endregion

    #region Event Handling
    private void ReceiveTeamPlayerChangeEvent(object sender, ScrimMessageEventArgs<TeamPlayerChangeMessage> e)
    {
        if (e.Message.ChangeType != TeamPlayerChangeType.Add)
        {
            return;
        }

        InvokeStateHasChangedIfPlayer(e.Message.Player);
    }

    private void ReceivePlayerStatUpdateEvent(object sender, ScrimMessageEventArgs<PlayerStatUpdateMessage> e)
    {
        InvokeStateHasChangedIfPlayer(e.Message.Player);
    }

    private void ReceivePlayerLoginEvent(object sender, ScrimMessageEventArgs<PlayerLoginMessage> e)
    {
        InvokeStateHasChangedIfPlayer(e.Message.Player);
    }

    private void ReceivePlayerLogoutEvent(object sender, ScrimMessageEventArgs<PlayerLogoutMessage> e)
    {
        InvokeStateHasChangedIfPlayer(e.Message.Player);
    }

    private void ReceivePlayerNameDisplayChangeMessageEvent(object sender, ScrimMessageEventArgs<PlayerNameDisplayChangeMessage> e)
    {
        InvokeStateHasChangedIfPlayer(e.Message.Player);
    }

    private void InvokeStateHasChangedIfPlayer(Player eventPlayer)
    {
        if (eventPlayer.Id != Player.Id)
        {
            return;
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    #endregion

    #region UI & Form Controls
    private async void RemovePlayer()
    {
        await ScrimTeamsManager.RemoveCharacterFromTeamAndDb(Player.Id);
    }

    private void HandleSubstitutePlayer()
    {
        ScrimTeamsManager.SetPlayerBenchedStatus(Player.Id, !Player.IsBenched);
    }

    private void HandleShowEditTemporaryAliasForm()
    {
        if (!_showTemporaryAliasEditForm)
        {
            _showTemporaryAliasEditForm = true;
        }
    }

    private async void HandleTemporaryAliasSubmit()
    {
        var newAlias = _inputTemporaryAlias;

        if (string.IsNullOrWhiteSpace(newAlias))
        {
            return;
        }

        if (await ScrimTeamsManager.UpdatePlayerTemporaryAliasAsync(Player.Id, newAlias))
        {
            _inputTemporaryAlias = Player.NameDisplay;
            _showTemporaryAliasEditForm = false;
        }

    }

    private void HandleTemporaryAliasCancel()
    {
        _showTemporaryAliasEditForm = false;
        _inputTemporaryAlias = Player.NameDisplay;
    }

    private async void HandleClearDisplayName()
    {
        await ScrimTeamsManager.ClearPlayerDisplayNameAsync(Player.Id);
        _inputTemporaryAlias = Player.NameDisplay;
        _showTemporaryAliasEditForm = false;
    }

    #endregion

    private string GetPlayerNameElementTitle()
    {
        return !Player.IsOutfitless
                    ? $"{Player.NameFull} [{Player.Id}]"
                    : $"{Player.NameFull} [{Player.Id}\nServer: {_renderedWorldName}";
    }

    private double GetStatOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }
}
