@using System.Linq;
@using DbgCensus.Core.Objects
@using squittal.ScrimPlanetmans.App.Abstractions.Services.CensusRest
@using squittal.ScrimPlanetmans.App.Models.CensusRest
@using squittal.ScrimPlanetmans.App.ScrimMatch.Models

@inject ICensusMapRegionService MapRegionService
@inject ICensusZoneService ZoneService

@if (_mapRegionsByZone is null)
{
    <div class="styled-select placeholder">Select Base...</div>
}
else
{
<EditForm Model="@_matchConfiguration">
    <InputSelect class="btn-sm" style="margin-right: 5px; width: 249px;"  @bind-Value=@_matchConfiguration.FacilityIdString>

        <option value=@NO_FACILITY_ID_VALUE>No Base</option>

        @foreach ((ZoneDefinition zone, IReadOnlyList<CensusMapRegion> regions) in _mapRegionsByZone)
        {
            string zoneName = _zones?.FirstOrDefault(z => zone == z.ZoneId)?
                .Name
                .English
                .GetValueOrDefault() ?? zone.ToString();

            <optgroup label="@zoneName"
                      style="background-color: var(--sq-bg-white-unlit); color: var(--sq-pink); font-size: 1rem;" />

            @foreach (CensusMapRegion region in regions)
            {
                <option value=@region.MapRegionId label="@region.FacilityName">@region.FacilityName</option>
            }
        }
    </InputSelect>
</EditForm>
}

@code {
    public const string NO_FACILITY_ID_VALUE = "-1";

    private IReadOnlyDictionary<ZoneDefinition, IReadOnlyList<CensusMapRegion>>? _mapRegionsByZone;
    private IReadOnlyList<CensusZone>? _zones { get; set; }
    private MatchConfiguration _matchConfiguration { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        _zones = await ZoneService.GetAllAsync();

        IReadOnlyList<CensusMapRegion>? mapRegions = await MapRegionService.GetAllAsync();
        if (mapRegions is not null)
        {
            _mapRegionsByZone = mapRegions.GroupBy(r => r.ZoneId)
                .ToDictionary(x => x.Key, x => (IReadOnlyList<CensusMapRegion>)x.ToList());
        }
    }
}
