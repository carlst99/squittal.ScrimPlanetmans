@using squittal.ScrimPlanetmans.App.Models
@using squittal.ScrimPlanetmans.App.Models.Forms
@using squittal.ScrimPlanetmans.App.Models.Planetside
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using System.Diagnostics.CodeAnalysis
@using DbgCensus.Core.Objects
@using squittal.ScrimPlanetmans.App.Abstractions.Services.CensusRest
@using squittal.ScrimPlanetmans.App.Abstractions.Services.ScrimMatch
@using squittal.ScrimPlanetmans.App.Models.CensusRest
@using squittal.ScrimPlanetmans.App.Util

@inject IConstructedTeamService ConstructedTeamsService
@inject ICensusWorldService WorldService
@inject IScrimMessageBroadcastService MessageService

@if (_renderedCharacter != null)
{
    <tr class="@SqCssHelper.GetFactionClassFromId(_renderedFactionId)" style="color: var(--sq-ps2-primary);">
        <td>@_renderedIndex</td>
        @if (_isAliasEditFormVisible)
        {
            <td colspan="3">
                <p style="margin: 4px 0; color: var(--sq-black);">
                    <span style="width: 112px; display: inline-block; margin-right: 4px;">Full Name:</span><span style="color: var(--sq-ps2-primary);">@_renderedCharacter.NameFull</span>
                </p>

                <p style="margin: 4px 0; color: var(--sq-black);">
                    <span style="width: 112px; display: inline-block; margin-right: 4px;">Current Alias:</span><span style="color: var(--sq-ps2-primary);">@_renderedCharacter.NameAlias</span>
                </p>

                <EditForm Model="@_inputAlias" OnValidSubmit="HandleAliasSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <span style="width: 112px; display: inline-block; margin-right: 4px; color: var(--sq-black);">New Alias:</span><InputText id="inputAlias" @bind-Value="_inputAlias" style="width: 156px; margin: 0.2rem 0.4rem 0.2rem 0; display: inline-block;" />

                    <div style="display: inline-block; margin-left: auto; margin-right: auto;">

                        <button type="submit" style="padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Submit player alias">
                            <span class="oi oi-check"></span>
                        </button>

                        <button @onclick="HandleAliasCancel" style="color: var(--sq-gray); padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Cancel editing display name">
                            <span class="oi oi-x" style="top: 0;"></span>
                        </button>

                        <button @onclick="HandleClearDisplayName" style="color: var(--sq-gray); padding: 0 0 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Reset player display name to full name">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>

                </EditForm>
            </td>
        }
        else
        {
            <td title="@GetCharacterCellTitle()">
                <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@_renderedCharacter.NameDisplay</span>
                @if (_renderedCharacter.PrestigeLevel != 0)
                {
                    <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                        <sup>
                            <span class="oi oi-star small" aria-hidden="true"></span>
                        </sup>
                    </div>
                }
                <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(_renderedCharacterId)]</span>

                <button @onclick="HandleShowEditAliasForm" style=" color: var(--sq-gray); padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Change this player's display name">
                    <span class="oi oi-pencil" style="top: 0;"></span>
                </button>
            </td>

            <td>@_renderedWorldName</td>


            <td style="width: 15px; text-align: right;">
                @if (_renderedShowRemoveControls && _renderedCharacter.IsDeleteAllowed)
                {
                        <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="HandleRemovePlayer" title="Remove Character from Team">
                            <span class="oi oi-x" style="font-size: 0.7rem; top: 0;"></span>
                        </button>
                }
            </td>
        }
    </tr>
}


@code {
    [Parameter]
    public required ConstructedTeamMemberDetails i_character { get; set; }

    private ConstructedTeamMemberDetails? _renderedCharacter { get; set; }

    private ulong _renderedCharacterId { get; set; }

    [Parameter]
    public EventCallback<ConstructedTeamMemberDetails> OnCharacterApiDataLoad { get; set; }

    [Parameter]
    public int i_index { get; set; }
    private int _renderedIndex { get; set; } = 0;

    [Parameter]
    public int i_teamId { get; set; }
    private int _renderedTeamId { get; set; }

    [Parameter]
    public FactionDefinition i_factionId { get; set; }
    private FactionDefinition _renderedFactionId { get; set; }

    public bool i_showRemovalControls { get; set; } = true;
    private bool _renderedShowRemoveControls { get; set; } = true;

    private WorldDefinition _renderedWorldId { get; set; } = 0;
    private string _renderedWorldName { get; set; } = string.Empty;

    private bool _isAliasEditFormVisible { get; set; } = false;
    private string _inputAlias { get; set; } = string.Empty;

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseConstructedTeamMemberChangeEvent += ReceiveConstructedTeamMemberChangeEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseConstructedTeamMemberChangeEvent -= ReceiveConstructedTeamMemberChangeEvent;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (i_character.WorldId != _renderedWorldId)
        {
            _renderedWorldId = i_character.WorldId;
            CensusWorld? renderedWorld = await WorldService.GetByIdAsync(_renderedWorldId);

    //var renderedWorld = await WorldService.GetWorldAsync(_renderedWorldId);
            _renderedWorldName = renderedWorld?.Name.English.GetValueOrDefault() ?? "Unknown world";

            await InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnParametersSet()
    {
        _renderedCharacter ??= i_character;

        if (i_character.CharacterId != _renderedCharacter.CharacterId
            || i_index != _renderedIndex
            || i_factionId != _renderedFactionId
            || i_teamId != _renderedTeamId
            || i_character.NameDisplay != _renderedCharacter.NameDisplay)
        {
            _renderedIndex = i_index;
            _renderedTeamId = i_teamId;
            _renderedFactionId = i_factionId;

            if (_renderedCharacter != null)
            {
                _renderedCharacterId = _renderedCharacter.CharacterId;
                _inputAlias = _renderedCharacter.NameDisplay;
            }

            InvokeAsyncStateHasChanged();
        }
    }

    #endregion Initialization Methods

    #region Event Handling
    private void ReceiveConstructedTeamMemberChangeEvent(object? sender, ScrimMessageEventArgs<ConstructedTeamMemberChangeMessage> e)
    {
        var message = e.Message;

        if (message.TeamId != _renderedTeamId || message.CharacterId != _renderedCharacterId)
        {
            return;
        }

        var changeType = message.ChangeType;
        if (changeType != ConstructedTeamMemberChangeType.UpdateAlias)
        {
            return;
        }

        if (_renderedCharacter is not null)
            _renderedCharacter.NameAlias = message.MemberAlias;

        InvokeAsyncStateHasChanged();
    }
    #endregion Event Handling


    #region UI & Form Controls
    private async void HandleRemovePlayer()
    {
        if (_renderedCharacter?.IsDeleteAllowed is true)
            await ConstructedTeamsService.TryRemoveCharacterFromConstructedTeamAsync(_renderedTeamId, _renderedCharacterId);
    }

    private void HandleShowEditAliasForm()
    {
        if (!_isAliasEditFormVisible)
        {
            _isAliasEditFormVisible = true;
        }
    }

    private async void HandleAliasSubmit()
    {
        var newAlias = _inputAlias;

        if (string.IsNullOrWhiteSpace(newAlias))
        {
            return;
        }

        if (_renderedCharacter is not null)
        {
            if (await ConstructedTeamsService.TryUpdateMemberAliasAsync(_renderedTeamId, _renderedCharacter.CharacterId, _renderedCharacter.NameAlias, newAlias))
            {
                _inputAlias = _renderedCharacter.NameDisplay;
                _isAliasEditFormVisible = false;
            }
        }

        InvokeAsyncStateHasChanged();

    }

    private void HandleAliasCancel()
    {
        _isAliasEditFormVisible = false;
        _inputAlias = _renderedCharacter?.NameDisplay ?? i_character.NameDisplay;
    }

    private async void HandleClearDisplayName()
    {
        if (_renderedCharacter is not null)
        {
            if (await ConstructedTeamsService.TryUpdateMemberAliasAsync(_renderedTeamId, _renderedCharacter.CharacterId, _renderedCharacter.NameAlias, _renderedCharacter.NameFull))
            {
                _inputAlias = _renderedCharacter.NameDisplay;
            }
        }

        _isAliasEditFormVisible = false;

        InvokeAsyncStateHasChanged();
    }
    #endregion UI & Form Controls

    #region Helper Methods
    private string GetCharacterCellTitle()
    {
        if (_renderedCharacter is null)
            return $"i_character.NameFull [{i_character.CharacterId}]";

        return _renderedCharacter.NameFull == $"uc{_renderedCharacter.CharacterId}"
            ? $"Unknown Character [{_renderedCharacter.CharacterId}]"
            : $"{_renderedCharacter.NameFull} [{_renderedCharacterId}]";
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    #endregion Helper Methods
}
