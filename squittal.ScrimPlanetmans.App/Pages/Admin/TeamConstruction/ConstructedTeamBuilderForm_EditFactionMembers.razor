@using System.Collections.Concurrent;
@using DbgCensus.Core.Objects
@using squittal.ScrimPlanetmans.App.Data.Models
@using squittal.ScrimPlanetmans.App.Models
@using squittal.ScrimPlanetmans.App.Models.CensusRest
@using squittal.ScrimPlanetmans.App.Models.Forms
@using squittal.ScrimPlanetmans.App.Models.Planetside
@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.Services.Planetside.Interfaces
@using squittal.ScrimPlanetmans.App.Services.ScrimMatch.Interfaces
@using squittal.ScrimPlanetmans.App.Util

@inject IConstructedTeamService ConstructedTeamsService
@inject IScrimMessageBroadcastService MessageService
@inject IWorldService WorldService

@implements IDisposable


<div class="sq-mini-card-4 @_renderedFactionAbbreviation.ToLower()">
    
    <h5>@_renderedFactionAbbreviation.ToUpper() Members <span style="font-weight: 400;">(@_renderedCharactersCount)</span></h5>
    
    <div class="sq-content">


        @if (_isLoadingCharacters)
        {
            <p style="margin: 4px 0; color: var(--sq-ps2-primary); font-style: italic;">
                Loading members character data...
            </p>

            <span class="thin">
                <SpinnerEllipsis />
            </span>
        }
        else if (_renderedCharactersCount <= 0)
        {
            <p style="margin: 4px 0; color: var(--sq-ps2-primary); font-style: italic;">
                Team has no @_renderedFactionAbbreviation.ToUpper() members
            </p>
        }
        else
        {
            <table class="table-responsive-sm table-striped-light mono-font smaller" style="font-size: 0.85rem;">

                <thead>
                    <tr>
                        <th title="Row Number"></th>
                        <th title="Character Name"></th>
                        <th title="Server Name"></th>
                        <th title="Remove Member Button"></th>
                    </tr>
                </thead>

                    @lock (_renderedCharacters)
                    {
                        if (_renderedCharacters != null && _renderedCharacters.Any() && _renderedCharactersCount > 0)
                        {
                            <tbody>
                                @foreach (var indexedCharacter in _renderedCharacters
                                                                     .OrderBy(c => c.NameDisplay)
                                                                     .AsEnumerable()
                                                                     .Select((c, Index) => new { ConstructedTeamMemberDetails = c, Index = Index }))
                                {
                                    <ConstructedTeamBuilderForm_EditPlayerRow i_teamId=@_renderedTeamId i_character=@(indexedCharacter.ConstructedTeamMemberDetails) i_factionId=@_renderedFactionId i_index=@(indexedCharacter.Index + 1) OnCharacterApiDataLoad="MemberDetailsDataLoaded" />
                                }
                            </tbody>
                        }
                    }

            </table>
        }

    </div>

</div>



@code {
    [Parameter]
    public int i_teamId { get; set; }
    private int _renderedTeamId { get; set; }

    [Parameter]
    public int i_factionId { get; set; }
    private int _renderedFactionId { get; set; }

    private string _renderedFactionAbbreviation { get; set; } = string.Empty;

    [Parameter]
    public bool i_viewOnly { get; set; } = true;
    private bool _renderedViewOnly { get; set; } = true;

    private ConcurrentQueue<ConstructedTeamMemberChangeMessage> _changeMessagesQueue { get; set; } = new ConcurrentQueue<ConstructedTeamMemberChangeMessage>();

    private List<ConstructedTeamMemberDetails> _renderedCharacters = new List<ConstructedTeamMemberDetails>();
    private ConcurrentQueue<ConstructedTeamMemberDetails> _characterDataUpdateQueue { get; set; } = new ConcurrentQueue<ConstructedTeamMemberDetails>();
    private int _renderedCharactersCount { get; set; } = 0;

    private bool _isLoadingCharacters { get; set; } = false;

    private IEnumerable<World> _worlds;


    #region Initialization Methods
    protected override async Task OnInitializedAsync()
    {
        _worlds = await WorldService.GetAllWorldsAsync();
    }

    protected override void OnInitialized()
    {
        MessageService.RaiseConstructedTeamMemberChangeEvent += ReceiveConstructedTeamMemberChangeEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseConstructedTeamMemberChangeEvent -= ReceiveConstructedTeamMemberChangeEvent;
    }

    protected override async Task OnParametersSetAsync()
    {
        var viewOnlyChanged = false;

        if (i_viewOnly != _renderedViewOnly)
        {
            _renderedViewOnly = i_viewOnly;

            viewOnlyChanged = true;
        }

        if (i_teamId != _renderedTeamId || i_factionId != _renderedFactionId || viewOnlyChanged)
        {
            _renderedFactionId = i_factionId;
            _renderedFactionAbbreviation = StringHelpers.GetFactionAbbreviation(_renderedFactionId);

            _renderedTeamId = i_teamId;

            _isLoadingCharacters = true;
            InvokeAsyncStateHasChanged();

            //var characters = await ConstructedTeamsService.GetConstructedTeamFactionCharacters(_renderedTeamId, _renderedFactionId);
            var characters = await ConstructedTeamsService.GetConstructedTeamFactionMemberDetailsAsync(_renderedTeamId, _renderedFactionId);

            await InvokeAsync(() =>
            {
                lock (_renderedCharacters)
                {
                    _renderedCharacters = new List<ConstructedTeamMemberDetails>();

                    if (characters != null && characters.Any())
                    {
                        _renderedCharacters.AddRange(characters.ToList());

                        _renderedCharacters = _renderedCharacters
                                                 .OrderBy(c => c.NameDisplay)
                                                 .ToList();

                        _renderedCharactersCount = _renderedCharacters.Count();
                    }

                    _isLoadingCharacters = false;
                    StateHasChanged();
                }
            });
        }
    }
    #endregion Initialization Methods

    #region Event Handling
    private void ReceiveConstructedTeamMemberChangeEvent(object sender, ScrimMessageEventArgs<ConstructedTeamMemberChangeMessage> e)
    {
        var message = e.Message;

        var teamId = message.TeamId;
        if (message.TeamId != _renderedTeamId)
        {
            return;
        }

        var changeType = message.ChangeType;

        if (changeType == ConstructedTeamMemberChangeType.Add)
        {
            if (message.Character?.FactionId != (FactionDefinition)_renderedFactionId)
            {
                return;
            }
        }
        else if (changeType != ConstructedTeamMemberChangeType.Remove && changeType != ConstructedTeamMemberChangeType.UpdateAlias)
        {
            return;
        }

        _changeMessagesQueue.Enqueue(message);

        UpdateRenderedMembers();
    }


    public void MemberDetailsDataLoaded(ConstructedTeamMemberDetails character)
    {
        if (character.FactionId != _renderedFactionId)
        {
            return;
        }

        _characterDataUpdateQueue.Enqueue(character);

        UpdateRenderedCharacters();
    }
    #endregion Event Handling

    #region Character Processing
    private void UpdateRenderedCharacters()
    {
        InvokeAsync(() =>
        {
            lock (_renderedCharacters)
            {
                while (_characterDataUpdateQueue.TryDequeue(out ConstructedTeamMemberDetails updateCharacter))
                {
                    var updateName = updateCharacter.NameFull;
                    var updateAlias = updateCharacter.NameAlias;
                    var updateId = updateCharacter.CharacterId;

                    var renderedCharacter = _renderedCharacters.Where(c => c.CharacterId == updateId).FirstOrDefault();

                    if (renderedCharacter == null)
                    {
                        _renderedCharacters.Add(updateCharacter);
                    }
                    else
                    {
                        //renderedCharacter.NameFull = updateName;
                        //renderedCharacter.NameAlias = updateAlias;
                    }
                }

                _renderedCharacters = _renderedCharacters
                                        .OrderBy(c => c.NameDisplay)
                                        .ToList();

                _renderedCharactersCount = _renderedCharacters.Count();

                StateHasChanged();
            }
        });
    }

    private void UpdateRenderedMembers()
    {
        InvokeAsync(() =>
        {
            lock (_renderedCharacters)
            {
                while (_changeMessagesQueue.TryDequeue(out ConstructedTeamMemberChangeMessage changeMessage))
                {
                    var changeType = changeMessage.ChangeType;
                    var characterId = changeMessage.CharacterId;

                    if (changeType == ConstructedTeamMemberChangeType.Remove)
                    {
                        _renderedCharacters.RemoveAll(c => c.CharacterId == characterId);
                    }
                    else if (changeType == ConstructedTeamMemberChangeType.Add)
                    {
                        var character = changeMessage.MemberDetails;

                        if (!_renderedCharacters.Any(c => c.CharacterId == characterId))
                        {
                            _renderedCharacters.Add(character);
                        }
                    }
                    else if (changeType == ConstructedTeamMemberChangeType.UpdateAlias)
                    {
                        var character = _renderedCharacters.Where(c => c.CharacterId == characterId).FirstOrDefault();

                        if (character != null)
                        {
                            character.NameAlias = string.IsNullOrWhiteSpace(changeMessage.MemberAlias) ? string.Empty : changeMessage.MemberAlias;
                        }
                    }
                }

                _renderedCharacters = _renderedCharacters
                                        .OrderBy(c => c.NameDisplay)
                                        .ToList();

                _renderedCharactersCount = _renderedCharacters.Count();

                StateHasChanged();
            }
        });
    }

    private CensusCharacter GetPlaceholderCharacter(ConstructedTeamPlayerMembership membership)
    {
        return new CensusCharacter
        (
            membership.CharacterId,
            new CensusCharacter.CharacterName(string.Empty),
            (FactionDefinition)membership.FactionId,
            0,
            WorldDefinition.Jaeger,
            null
        );
    }
    #endregion CharacterProcessing

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

}
