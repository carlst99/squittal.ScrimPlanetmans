@using squittal.ScrimPlanetmans.App.Services
@using squittal.ScrimPlanetmans.App.Models
@inject DatabaseMaintenanceService DbMaintenance

@if (_renderedComparison != null)
{
    <tr>
        <td>@_renderedComparison.Name</td>

        @if (_renderedComparison.IsLoadingStoreCount)
        {
            <td style="text-align: right; width: 80px; color: var(--sq-pink-lighter-alpha-50);">
                --
            </td>
            <td>
                <div class="btn btn-icon-primary">
                    <span class="oi oi-reload spin"></span>
                </div>
            </td>
        }
        else
        {
            <td style="text-align: right; width: 80px;">
                @_renderedComparison.StoreCount
            </td>
            <td>
                <button class="btn btn-icon-primary" @onclick="RefreshStoreCount" title="Update @_renderedComparison.Name database entity count">
                    <span class="oi oi-reload"></span>
                </button>
            </td>
        }

        @if (_renderedComparison.IsLoadingCensusCount)
        {
            <td style="text-align: right; width: 80px; color: var(--sq-pink-lighter-alpha-50);">
                --
            </td>
            <td>
                <div class="btn btn-icon-primary">
                    <span class="oi oi-reload spin"></span>
                </div>
            </td>
        }
        else
        {
            <td style="text-align: right; width: 80px;">
                @if (_renderedComparison.CensusCount == -1)
                {
                    <span class="oi oi-warning" title="Census API returned an error"></span>
                }
                else
                {
                    @_renderedComparison.CensusCount
                }
            </td>
            <td>
                <button class="btn btn-icon-primary" @onclick="RefreshCensusCount" title="Refresh @_renderedComparison.Name census entity count">
                    <span class="oi oi-reload"></span>
                </button>
            </td>
        }

        @if (_renderedComparison.IsRefreshingStore)
        {
            <td colspan="2" style="min-width: 160px;">
                <div class="btn btn-icon-primary" style="margin-left: calc(50% - 10px); padding-top: 0.375rem; padding-bottom: 0.375rem; margin-top: 0.2rem; margin-bottom: 0.2rem;">
                    <span class="oi oi-reload spin"></span>
                </div>
            </td>
        }
        else
        {
            @if (_renderedComparison.IsRefreshable)
            {
                <td style="text-align: right; min-width: 160px;">
                    @if (_renderedComparison.CensusCount == -1)
                    {
                        <button disabled class="btn btn-outline-primary" title="Update @_renderedComparison.Name database from census API">
                            <span class="oi oi-cloud-download"></span>Update from Census
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-outline-primary" @onclick="UpdateDatabaseFromCensus" title="Update @_renderedComparison.Name database from census API">
                            <span class="oi oi-cloud-download"></span>Update from Census
                        </button>
                    }
                </td>
            }
            else
            {
                <td style="text-align: center;">--</td>
            }

            <td style="text-align: right; min-width: 160px;">
                <button class="btn btn-outline-primary" @onclick="UpdateDatabaseFromBackup" title="Update @_renderedComparison.Name database from census API">
                    <span class="oi oi-spreadsheet"></span>Update from Backup
                </button>
            </td>
        }
    </tr>
}

@code {
    [Parameter]
    public CensusStoreDataComparisonRow i_comparison { get; set; }
    private CensusStoreDataComparisonRow _renderedComparison { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (_renderedComparison != null)
        {
            await _renderedComparison.SetCounts();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (i_comparison == null)
        {
            return;
        }
        else if (_renderedComparison == null)
        {
            _renderedComparison = i_comparison;
            paramsChanged = true;
        }
        else if (i_comparison.Name != _renderedComparison.Name || i_comparison.IsRefreshable != _renderedComparison.IsRefreshable)
        {
            _renderedComparison = i_comparison;
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            await InvokeAsync(async () =>
            {
                await _renderedComparison.SetCounts();

                StateHasChanged();
            });
        }
    }

    private async Task RefreshCensusCount()
    {
        await _renderedComparison.SetCensusCount();
    }

    private async Task RefreshStoreCount()
    {
        await _renderedComparison.SetStoreCount();
    }

    private async Task UpdateDatabaseFromCensus()
    {
        if (_renderedComparison.CensusCount == -1)
        {
            return;
        }

        await _renderedComparison.RefreshStoreFromCensus();
    }

    private async Task UpdateDatabaseFromBackup()
    {
        await Task.Run(() =>
            _renderedComparison.RefreshStoreFromBackup()
        );
    }
}
