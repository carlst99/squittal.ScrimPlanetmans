@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using System.Text.RegularExpressions;
@using System.Threading;
@using System.Collections.Concurrent;
@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models
@using squittal.ScrimPlanetmans.App.Services.Rulesets.Interfaces

@inject IRulesetDataService RulesetDataService

@implements IDisposable

<div class="sq-mini-card-6 default" style="min-width: 420px; background-color: transparent; box-shadow: 0px 2px 5px 0px var(--sq-light-blue-gray);">
    @if (_changesCount > 0)
    {
        <h5>Scrim Action Rules<span style="padding-left: 4px; font-weight: 400; font-size: 0.8rem;">(@_changesCount Changes)</span></h5>
    }
    else
    {
        <h5>Scrim Action Rules</h5>
    }

    @if (_isLoadingRules || _isSavingRules)
    {
        <SpinnerEllipsis />
    }
    else
    {
        @if (_actionRules != null && _actionRules.Any())
        {
            <EditForm Model="@_actionRules" OnValidSubmit="(() => OnSaveScrimActionRulesEditSubmit(false))" style="margin-top: 8px;">
                <DataAnnotationsValidator />
            
                <div class="sq-content">
                        
                    @if (_changesCount > 0 && !_isClearingRules)
                    {
                        <button title="Save changes to the database" type="submit" class="btn btn-primary" @onclick="(() => OnSaveScrimActionRulesEditSubmit(true))">
                            <span class="oi oi-data-transfer-upload"></span>Save
                        </button>

                        <button type="button" title="Reset changes to original values"class="btn btn-outline-primary" @onclick="OnClearRuleChanges">
                            <span class="oi oi-x" style="top: 0px;"></span>Clear
                        </button>
                    }
                    else
                    {
                        <button title="There are no changes to save" disabled class="btn btn-primary disabled">
                            <span class="oi oi-data-transfer-upload"></span>Save
                        </button>
                    }

                    <div class="tabbed-button-container" style="">
                        <button type="button" title="View infantry item category rules" class="btn btn-link @GetViewTabStyle(ScrimActionTypeDomain.Objective)" @onclick="@(() => OnSelectNewView(ScrimActionTypeDomain.Objective))">Objective</button>
                        <button type="button" title="View infantry item category rules" class="btn btn-link @GetViewTabStyle(ScrimActionTypeDomain.Support)" @onclick="@(() => OnSelectNewView(ScrimActionTypeDomain.Support))">Support</button>
                        <button type="button" title="View infantry item category rules" class="btn btn-link @GetViewTabStyle(ScrimActionTypeDomain.Infantry)" @onclick="@(() => OnSelectNewView(ScrimActionTypeDomain.Infantry))">Infantry</button>
                        <button type="button" title="View MAX item category rules" class="btn btn-link @GetViewTabStyle(ScrimActionTypeDomain.MAX)" @onclick="@(() => OnSelectNewView(ScrimActionTypeDomain.MAX))">MAX</button>
                        <button type="button" title="View MAX item category rules" class="btn btn-link @GetViewTabStyle(ScrimActionTypeDomain.Vehicle)" @onclick="@(() => OnSelectNewView(ScrimActionTypeDomain.Vehicle))">Vehicle</button>
                    </div>

                    <div style="max-height: 544px; overflow-y: auto; border-bottom: 1px solid var(--sq-black-alpha-50);">
                        <table class="table-responsive-sm table-striped-light default sans-serif-font" style="border-bottom: none;">
                            <thead style="border-bottom: 1px solid var(--sq-black-alpha-50);">
                                <tr>
                                    <th style="padding-bottom: 2px;">Action Type <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[ID]</span></th>
                                    <th style="padding-bottom: 2px;">Points</th>
                                    <th style="padding-bottom: 2px;">Defer to Item<br />Category Rules?</th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var actionRule in _actionRules)
                                {
                                    @if (CanShowActionRuleInSelectedDomain(actionRule))
                                    {
                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black);">@GetActionRuleDescription(actionRule.ScrimActionType) <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[@((int)actionRule.ScrimActionType)]</span></td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(actionRule.Points);">
                                                <InputNumber Value="@actionRule.Points" ValueChanged="@((int p) => OnChangeRulePoints(actionRule, p))" ValueExpression="@(() => actionRule.Points)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                            </td>
                                            <td style="opacity: @GetDeferValueOpacity(actionRule.DeferToItemCategoryRules);">
                                                <InputCheckbox Value="@actionRule.DeferToItemCategoryRules" ValueChanged="@((bool d) => OnChangeRuleDefer(actionRule, d))" ValueExpression="@(() => actionRule.DeferToItemCategoryRules)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(actionRule.DeferToItemCategoryRules ? "Yes" : "No")</span>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <p>No scrim action rules...</p>
        }
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private IEnumerable<RulesetActionRule> _actionRules { get; set; }

    bool _isLoadingRules { get; set; } = false;
    bool _isSavingRules { get; set; } = false;
    bool _isClearingRules { get; set; } = false;

    private CancellationTokenSource cts;

    private ConcurrentDictionary<ScrimActionType, RulesetActionRule> _changedRules { get; set; } = new ConcurrentDictionary<ScrimActionType, RulesetActionRule>();
    private ConcurrentDictionary<ScrimActionType, int> _originalRulePoints { get; set; } = new ConcurrentDictionary<ScrimActionType, int>();
    private ConcurrentDictionary<ScrimActionType, bool> _originalRuleDefers { get; set; } = new ConcurrentDictionary<ScrimActionType, bool>();

    private int _changesCount { get; set; } = 0;

    private ScrimActionTypeDomain _selectedDomainView { get; set; } = ScrimActionTypeDomain.Objective;


    #region Initializtion Methods
    public void Dispose()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _renderedRulesetId = i_rulesetId;

        await LoadRulesetAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (i_rulesetId != _renderedRulesetId)
        {
            _renderedRulesetId = i_rulesetId;

            await LoadRulesetAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesetAsync()
    {
        _isLoadingRules = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {
            _actionRules = await RulesetDataService.GetRulesetActionRulesAsync(_renderedRulesetId, cts.Token);

            cts.Token.ThrowIfCancellationRequested();

            _originalRulePoints.Clear();
            _originalRuleDefers.Clear();
            _changedRules.Clear();

            _changesCount = 0;
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isLoadingRules = false;
    }
    #endregion Initializtion Methods

    #region Event Handling
    private void OnChangeRulePoints(RulesetActionRule rule, int newPoints)
    {
        var action = rule.ScrimActionType;
        var currentPoints = rule.Points;

        var hasAlreadyChanged = _originalRulePoints.ContainsKey(action);

        if (_originalRulePoints.TryGetValue(action, out int originalPoints))
        {
            if (newPoints == originalPoints)
            {
                _originalRulePoints.TryRemove(action, out var removedPoints);

                if (!RuleHasAnyChanges(action))
                {
                    _changedRules.TryRemove(action, out var removedRule);
                }
            }

            rule.Points = newPoints;
        }
        else
        {
            if (!_originalRulePoints.TryAdd(action, currentPoints))
            {
                _changesCount = _changedRules.Count();

                return;
            }

            rule.Points = newPoints;

            _changedRules.AddOrUpdate(action, rule, (key, oldValue) => rule);
        }

        _changesCount = _changedRules.Count();

        InvokeAsyncStateHasChanged();
    }

    private void OnChangeRuleDefer(RulesetActionRule rule, bool newDefer)
    {
        var action = rule.ScrimActionType;
        var currentDefer = rule.DeferToItemCategoryRules;

        var hasAlreadyChanged = _originalRuleDefers.ContainsKey(action);

        if (_originalRuleDefers.TryGetValue(action, out bool originalDefer))
        {
            if (newDefer == originalDefer)
            {
                _originalRuleDefers.TryRemove(action, out var removedDefer);

                if (!RuleHasAnyChanges(action))
                {
                    _changedRules.TryRemove(action, out var removedRule);
                }
            }

            rule.DeferToItemCategoryRules = newDefer;
        }
        else
        {
            if (!_originalRuleDefers.TryAdd(action, currentDefer))
            {
                _changesCount = _changedRules.Count();

                return;
            }

            rule.DeferToItemCategoryRules = newDefer;

            _changedRules.AddOrUpdate(action, rule, (key, oldValue) => rule);
        }

        _changesCount = _changedRules.Count();

        InvokeAsyncStateHasChanged();
    }

    private bool RuleHasAnyChanges(ScrimActionType scrimAction)
    {
        return RuleHasPointChange(scrimAction) || RuleHasDeferChange(scrimAction);
    }

    private bool RuleHasPointChange(ScrimActionType scrimAction)
    {
        return _originalRulePoints.ContainsKey(scrimAction);
    }

    private bool RuleHasDeferChange(ScrimActionType scrimAction)
    {
        return _originalRuleDefers.ContainsKey(scrimAction);
    }

    #endregion Event Handling

    #region Form & UI Handling
    private async void OnSaveScrimActionRulesEditSubmit(bool isManualClick)
    {
        if (!isManualClick)
        {
            return;
        }

        if (_changedRules.Any())
        {
            _isSavingRules = true;
            InvokeAsyncStateHasChanged();

            await RulesetDataService.SaveRulesetActionRules(_renderedRulesetId, _changedRules.Values.AsEnumerable());

            foreach (var idRulePair in _changedRules)
            {
                _actionRules.Where(r => r.ScrimActionType == idRulePair.Key).FirstOrDefault().Points = idRulePair.Value.Points;
                _actionRules.Where(r => r.ScrimActionType == idRulePair.Key).FirstOrDefault().DeferToItemCategoryRules = idRulePair.Value.DeferToItemCategoryRules;
            }

            _originalRulePoints.Clear();
            _originalRuleDefers.Clear();
            _changedRules.Clear();
            _changesCount = 0;

            _isSavingRules = false;

            InvokeAsyncStateHasChanged();
        }
    }

    private void OnClearRuleChanges()
    {
        if (!_changedRules.Any() || !_actionRules.Any())
        {
            return;
        }

        _isClearingRules = true;

        foreach (var idPointsPair in _originalRulePoints)
        {
            _actionRules.Where(r => r.ScrimActionType == idPointsPair.Key).FirstOrDefault().Points = idPointsPair.Value;
        }

        foreach (var idDeferPair in _originalRuleDefers)
        {
            _actionRules.Where(r => r.ScrimActionType == idDeferPair.Key).FirstOrDefault().DeferToItemCategoryRules = idDeferPair.Value;
        }

        _originalRulePoints.Clear();
        _originalRuleDefers.Clear();
        _changedRules.Clear();
        _changesCount = 0;

        _isClearingRules = false;
    }

    private string GetViewTabStyle(ScrimActionTypeDomain thisView)
    {
        if (_selectedDomainView == thisView)
        {
            return $"view-visible";
        }
        else
        {
            return $"view-hidden";
        }
    }

    private void OnSelectNewView(ScrimActionTypeDomain newView)
    {
        if (newView != _selectedDomainView)
        {
            _selectedDomainView = newView;
        }
    }

    private bool CanShowActionRuleInSelectedDomain(RulesetActionRule rule)
    {
        if (_selectedDomainView == ScrimActionTypeDomain.Vehicle)
        {
            return (rule.ScrimActionTypeDomain == ScrimActionTypeDomain.Vehicle
                        || rule.ScrimActionTypeDomain == ScrimActionTypeDomain.AirVehicle
                        || rule.ScrimActionTypeDomain == ScrimActionTypeDomain.GroundVehicle) ? true : false;
        }
        else
        {
            return _selectedDomainView == rule.ScrimActionTypeDomain;
        }
    }
    #endregion Form & UI Handling

    private string GetActionRuleDescription(ScrimActionType actionType)
    {
        var name = Enum.GetName(typeof(ScrimActionType), actionType);

        return Regex.Replace(name, @"(\p{Ll})(\p{Lu})", "$1 $2");
    }

    private double GetValueOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }

    private double GetDeferValueOpacity(bool value)
    {
        return (value == true)
            ? 1.0
            : 0.5;
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
