@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using System.Threading;
@using System.Collections.Concurrent;
@using DbgCensus.Core.Objects
@using squittal.ScrimPlanetmans.App.Abstractions.Services.CensusRest
@using squittal.ScrimPlanetmans.App.Abstractions.Services.Rulesets
@using squittal.ScrimPlanetmans.App.Models.CensusRest
@using squittal.ScrimPlanetmans.App.Models.Forms
@using squittal.ScrimPlanetmans.App.Models.Planetside
@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models

@inject ICensusMapRegionService MapRegionService
@inject IRulesetDataService RulesetDataService
@inject ICensusZoneService ZoneService

@implements IDisposable

<div class="sq-mini-card-6 default" style="min-width: 420px; background-color: transparent; box-shadow: 0 2px 5px 0 var(--sq-light-blue-gray);">
    @if (_changesCount > 0)
    {
        <h5>Facility Rules<span style="padding-left: 4px; font-weight: 400; font-size: 0.8rem;">(@_changesCount Changes)</span></h5>
    }
    else
    {
        <h5>Facility Rules</h5>
    }

    @if (_isLoadingRules || _isSavingRules)
    {
        <SpinnerEllipsis />
    }
    else
    {
        <EditForm Model="@_facilityRules" OnValidSubmit="(() => OnSaveFacilityRulesEditSubmit(false))" style="margin-top: 8px;">
            <DataAnnotationsValidator />

            <div class="sq-content">

                @if (_changesCount > 0 && !_isClearingRules)
                {
                    <button title="Save changes to the database" type="submit" class="btn btn-primary" @onclick="(() => OnSaveFacilityRulesEditSubmit(true))">
                        <span class="oi oi-data-transfer-upload"></span>Save
                    </button>

                    <button type="button" title="Reset changes to original values" class="btn btn-outline-primary" @onclick="OnClearRuleChanges">
                        <span class="oi oi-action-undo" style="top: 0;"></span>Clear
                    </button>
                }
                else
                {
                    <button title="There are no changes to save" disabled class="btn btn-primary disabled">
                        <span class="oi oi-data-transfer-upload"></span>Save
                    </button>
                }

                <div class="tabbed-button-container" style="">
                    <button type="button"
                            title="View all facility rules"
                            class="btn btn-link @GetViewTabStyle(0)"
                            @onclick="@(() => OnSelectNewView(0))">
                        All
                    </button>
                    <button type="button"
                            title="View Hossin facility rules"
                            class="btn btn-link @GetViewTabStyle(ZoneDefinition.Hossin)"
                            @onclick="@(() => OnSelectNewView(ZoneDefinition.Hossin))">
                        Hossin
                    </button>
                    <button type="button"
                            title="View Indar facility rules"
                            class="btn btn-link @GetViewTabStyle(ZoneDefinition.Indar)"
                            @onclick="@(() => OnSelectNewView(ZoneDefinition.Indar))">
                        Indar
                    </button>
                    <button type="button"
                            title="View Esamir facility rules"
                            class="btn btn-link @GetViewTabStyle(ZoneDefinition.Esamir)"
                            @onclick="@(() => OnSelectNewView(ZoneDefinition.Esamir))">
                        Esamir
                    </button>
                    <button type="button"
                            title="View Amerish facility rules"
                            class="btn btn-link @GetViewTabStyle(ZoneDefinition.Amerish)"
                            @onclick="@(() => OnSelectNewView(ZoneDefinition.Amerish))">
                        Amerish
                    </button>
                    <button type="button"
                            title="View Oshur facility rules"
                            class="btn btn-link @GetViewTabStyle(ZoneDefinition.Oshur)"
                            @onclick="@(() => OnSelectNewView(ZoneDefinition.Oshur))">
                        Oshur
                    </button>
                </div>

                @if (_ruleChanges.Values.Any())
                {
                    <p class="sans-serif-font" style="margin-top: 8px; margin-bottom: 4px; font-weight: 700;">Changes</p>

                    <div style="max-height: @(_selectedZoneIdView == 0 ? "480px" : "240px"); overflow-y: auto; border-bottom: 1px solid var(--sq-black-alpha-50);">
                        @if (_mapRegionsByFacilityId is not null)
                        {
                            <table class="table-responsive-sm table-striped-light default sans-serif-font" style="border-bottom: none;">
                                <thead style="border-bottom: 1px solid var(--sq-black-alpha-50);">
                                    <tr>
                                        <th style="padding-bottom: 2px; padding-left: 8px; width: 45px;">Type</th>
                                        <th style="padding-bottom: 2px; padding-left: 8px;">Facility <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[ID]</span></th>
                                        <th style="padding-bottom: 2px; padding-left: 8px;">Continent</th>
                                        <th style="width: 30px; padding-left: 8px;"></th>
                                    </tr>
                                </thead>

                                <tbody>
                                @{
                                    IEnumerable<(RulesetFacilityRuleChange RuleChange, CensusMapRegion Region)> changedRegions = _ruleChanges.Values
                                        .OrderBy(r => r.ChangeType)
                                        .Select
                                        (
                                            x =>
                                            {
                                                _mapRegionsByFacilityId.TryGetValue(x.RulesetFacilityRule.FacilityId, out CensusMapRegion? region);
                                                return (x, region);
                                            }
                                        )
                                        .Where(x => x.region is not null)
                                        .Cast<(RulesetFacilityRuleChange RuleChange, CensusMapRegion Region)>()
                                        .OrderBy(x => x.Region.ZoneId)
                                        .ThenBy(x => x.Region.FacilityName);
                                }
                                @foreach ((RulesetFacilityRuleChange ruleChange, CensusMapRegion region) in changedRegions)
                                {
                                    <tr class="sans-serif-font">
                                        <td title="@(ruleChange.ChangeType == RulesetFacilityRuleChangeType.Add ? "Add" : "Remove")" style="padding-left: 8px;">
                                            @if (ruleChange.ChangeType == RulesetFacilityRuleChangeType.Add)
                                            {
                                                <span class="oi oi-plus" style="top: 2px; color: var(--sq-ov-semantic-green); padding-left: 8px; width: 30px;"></span>
                                            }
                                            else
                                            {
                                                <span class="oi oi-minus" style="top: 2px; color: var(--sq-ov-semantic-red); padding-left: 8px; width: 30px;"></span>
                                            }
                                        </td>
                                        <td style="color: var(--sq-black); padding-left: 8px;">
                                            @region.FacilityName
                                            <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">
                                                [@ruleChange.RulesetFacilityRule.FacilityId]
                                            </span>
                                        </td>
                                        <td style="color: var(--sq-black); padding-left: 8px;">@GetZoneName(region.ZoneId)</td>
                                        <td>
                                            <button type="button"
                                                    title="Undo this change"
                                                    @onclick="() => OnChangeFacilityRule(ruleChange.RulesetFacilityRule, RulesetFacilityRuleChangeType.Reset)"
                                                    style="color: var(--sq-black); border: none; background-color: transparent; padding: 0; text-shadow: 0 0 0 black;">
                                                <span class="oi oi-action-undo" style="top: 2px;"></span>
                                            </button>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        }
                    </div>
                }

                @if (_ruleChanges.Values.Any())
                {
                    <p class="sans-serif-font" style="margin-top: 16px; margin-bottom: 4px; font-weight: 700;">Current Ruleset Facilities</p>
                }
                else
                {
                    <p class="sans-serif-font" style="margin-top: 0; margin-bottom: 4px; font-weight: 700;">Current Ruleset Facilities</p>
                }

                <div style="max-height: @(_selectedZoneIdView == 0 ? "480px" : "240px"); overflow-y: auto; margin-bottom: 4px; border-bottom: 1px solid var(--sq-black-alpha-50);">

                    @if (_mapRegionsByFacilityId is not null)
                    {
                        <table class="table-responsive-sm table-striped-light default sans-serif-font" style="border-bottom: none;">
                            <thead style="border-bottom: 1px solid var(--sq-black-alpha-50);">
                                <tr>
                                    <th style="padding-bottom: 2px; padding-left: 8px;">Facility <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[ID]</span></th>
                                    @if (_selectedZoneIdView == 0)
                                    {
                                        <th style="padding-bottom: 2px; padding-left: 8px;">Continent</th>
                                    }
                                    <th style="width: 30px; padding-left: 8px;"></th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (RulesetFacilityRule facilityRule in _facilityRules)
                                {
                                    if (!_mapRegionsByFacilityId.TryGetValue(facilityRule.FacilityId, out CensusMapRegion? mapRegion))
                                        continue;

                                    if (_selectedZoneIdView is not 0 && mapRegion.ZoneId != _selectedZoneIdView)
                                        continue;

                                    <tr class="sans-serif-font">
                                        <td style="color: var(--sq-black); padding-left: 8px;">@mapRegion.FacilityName <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[@facilityRule.FacilityId]</span></td>
                                        @if (_selectedZoneIdView == 0)
                                        {
                                            <td style="color: var(--sq-black); padding-left: 8px;">@GetZoneName(mapRegion.ZoneId)</td>
                                        }
                                        <td style="padding-left: 8px;">
                                            <button type="button"
                                                    title="Remove this facility from the ruleset"
                                                    @onclick="() => OnChangeFacilityRule(facilityRule, RulesetFacilityRuleChangeType.Remove)"
                                                    style="color: var(--sq-ov-semantic-red); border: none; background-color: transparent; padding: 0; text-shadow: 0 0 0 black;">
                                                <span class="oi oi-minus" style="top: 2px;"></span>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        @if (_selectedZoneIdView == 0)
                        {
                            <p class="sans-serif-font" style="margin-top: 4px; margin-bottom: 4px; font-weight: 400; font-style: italic">There are no facility rules for this ruleset</p>
                        }
                        else
                        {
                            <p class="sans-serif-font" style="margin-top: 4px; margin-bottom: 4px; font-weight: 400; font-style: italic">There are no @(GetZoneName(_selectedZoneIdView)) facility rules for this ruleset</p>
                        }
                    }
                </div>

                    <p class="sans-serif-font" style="margin-top: 16px; margin-bottom: 4px; font-weight: 700;">Available Facilities</p>
                        
                    <div style="max-height: 240px; overflow-y: auto; border-bottom: 1px solid var(--sq-black-alpha-50);">

                        @if (_selectedZoneIdView == 0)
                        {
                            <p class="sans-serif-font" style="margin-top: 4px; margin-bottom: 4px; font-weight: 400; font-style: italic">Add facilities from the continent-specific views</p>
                        }
                        else if (_mapRegionsByFacilityId is not null)
                        {
                            <table class="table-responsive-sm table-striped-light default sans-serif-font" style="border-bottom: none;">
                                <thead style="border-bottom: 1px solid var(--sq-black-alpha-50);">
                                    <tr>
                                        <th style="padding-bottom: 2px; padding-left: 8px;">Facility <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[ID]</span></th>
                                        @if (_selectedZoneIdView == 0)
                                        {
                                            <th style="padding-bottom: 2px; padding-left: 8px;">Continent</th>
                                        }
                                        <th style="width: 30px; padding-left: 8px;"></th>
                                    </tr>
                                </thead>

                                <tbody>
                                    @foreach (RulesetFacilityRule facilityRule in _availableFacilityRules)
                                    {
                                        if (!_mapRegionsByFacilityId.TryGetValue(facilityRule.FacilityId, out CensusMapRegion? mapRegion))
                                            continue;

                                        if (_selectedZoneIdView is not 0 && mapRegion.ZoneId != _selectedZoneIdView)
                                            continue;

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 8px;">@mapRegion.FacilityName <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[@facilityRule.FacilityId]</span></td>
                                            @if (_selectedZoneIdView == 0)
                                            {
                                                <td style="color: var(--sq-black); padding-left: 8px;">@GetZoneName(mapRegion.ZoneId)</td>
                                            }
                                            <td>
                                                <button type="button"
                                                        title="Add facility to ruleset"
                                                        @onclick="() => OnChangeFacilityRule(facilityRule, RulesetFacilityRuleChangeType.Add)"
                                                        style="color: var(--sq-ov-semantic-green); border: none; background-color: transparent; text-shadow: 0 0 0 black; padding: 0 0 0 8px;">
                                                    <span class="oi oi-plus" style="top: 2px;"></span>
                                                </button>
                                            </td>
                                        </tr>
                                        @*}*@
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p class="sans-serif-font" style="margin-top: 4px; margin-bottom: 4px; font-weight: 400; font-style: italic">There are no available @(GetZoneName(_selectedZoneIdView)) facilities to add</p>
                        }
                    </div>
            </div>
        </EditForm>
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private List<RulesetFacilityRule> _facilityRules { get; set; } = new();
    private List<RulesetFacilityRule> _availableFacilityRules { get; set; } = new();
    private Dictionary<uint, CensusMapRegion>? _mapRegionsByFacilityId;
    private Dictionary<ZoneDefinition, string> _zoneNames { get; set; } = new();

    private bool _isLoadingRules { get; set; } = false;
    private bool _isSavingRules { get; set; } = false;
    private bool _isClearingRules { get; set; } = false;

    private ZoneDefinition _selectedZoneIdView { get; set; } = 0; // All Zones

    private CancellationTokenSource? _cts;

    private ConcurrentDictionary<uint, RulesetFacilityRuleChange> _ruleChanges { get; set; } = new();

    private ConcurrentQueue<RulesetFacilityRuleChange> _ruleChangesQueue { get; set; } = new();

    private int _changesCount { get; set; } = 0;


    #region Initializtion Methods
    public void Dispose()
    {
        if (_cts != null)
        {
            _cts.Cancel();
            _cts.Dispose();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _renderedRulesetId = i_rulesetId;

        await LoadRulesetAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        bool paramsChanged = false;

        if (i_rulesetId != _renderedRulesetId)
        {
            _renderedRulesetId = i_rulesetId;

            await LoadRulesetAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesetAsync()
    {
        _isLoadingRules = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        _cts?.Cancel();

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new();
        _cts = newCTS;

        try
        {
            IEnumerable<RulesetFacilityRule> facilityRules = await RulesetDataService.GetRulesetFacilityRulesAsync
            (
                _renderedRulesetId,
                _cts.Token
            );
            IEnumerable<RulesetFacilityRule> unusedRules = await RulesetDataService.GetUnusedRulesetFacilityRulesAsync
            (
                _renderedRulesetId,
                _cts.Token
            );
            IReadOnlyList<CensusZone>? zones = await ZoneService.GetAllAsync(_cts.Token);
            IReadOnlyList<CensusMapRegion>? regions = await MapRegionService.GetAllAsync(_cts.Token);

            _cts.Token.ThrowIfCancellationRequested();

            _facilityRules = facilityRules.ToList();
            _availableFacilityRules = unusedRules.ToList();

            if (zones is not null)
            {
                _zoneNames = zones.ToDictionary
                (
                    z => z.ZoneId, z => z.Name.English.GetValueOrDefault() ?? z.ZoneId.ToString()
                );
            }

            if (regions is not null)
            {
                _mapRegionsByFacilityId = regions.Where(r => r.FacilityId is not 0)
                    .ToDictionary(r => r.FacilityId, r => r);
            }
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (_cts == newCTS)
        {
            _cts = null;
        }

        _isLoadingRules = false;
    }
    #endregion Initializtion Methods

    #region Form & UI Handling
    private void OnChangeFacilityRule(RulesetFacilityRule rule, RulesetFacilityRuleChangeType changeType)
    {
        RulesetFacilityRuleChange ruleChange = new(rule, changeType);

        _ruleChangesQueue.Enqueue(ruleChange);

        UpdateRenderedFacilityRules();
    }

    private void UpdateRenderedFacilityRules()
    {
        InvokeAsync(() =>
        {
            lock (_facilityRules)
            {
                lock (_availableFacilityRules)
                {
                    while (_ruleChangesQueue.TryDequeue(out RulesetFacilityRuleChange? ruleChange))
                    {
                        RulesetFacilityRuleChangeType changeType = ruleChange.ChangeType;
                        RulesetFacilityRule rule = ruleChange.RulesetFacilityRule;

                        if (changeType == RulesetFacilityRuleChangeType.Remove)
                        {
                            _facilityRules.RemoveAll(c => c.FacilityId == rule.FacilityId);

                            _ruleChanges.AddOrUpdate(rule.FacilityId, ruleChange, (_, _) => ruleChange);
                        }
                        else if (changeType == RulesetFacilityRuleChangeType.Add)
                        {
                            if (_availableFacilityRules.Any(a => a.FacilityId == rule.FacilityId))
                            {
                                _availableFacilityRules.Remove(rule);
                            }

                            _ruleChanges.AddOrUpdate(rule.FacilityId, ruleChange, (_, _) => ruleChange);
                        }
                        else if (changeType == RulesetFacilityRuleChangeType.Reset)
                        {
                            if (_ruleChanges.TryRemove(rule.FacilityId, out RulesetFacilityRuleChange? originalRuleChange))
                            {
                                if (originalRuleChange.ChangeType == RulesetFacilityRuleChangeType.Add)
                                {
                                    _availableFacilityRules.Add(originalRuleChange.RulesetFacilityRule);
                                }
                                else if (originalRuleChange.ChangeType == RulesetFacilityRuleChangeType.Remove)
                                {
                                    _facilityRules.Add(originalRuleChange.RulesetFacilityRule);
                                }
                            }
                        }
                    }

                    _changesCount = _ruleChanges.Count;

                    StateHasChanged();
                }
            }
        });
    }

    private async void OnSaveFacilityRulesEditSubmit(bool isManualClick)
    {
        if (!isManualClick)
        {
            return;
        }

        if (_ruleChanges.Any())
        {
            _isSavingRules = true;
            InvokeAsyncStateHasChanged();

            await RulesetDataService.SaveRulesetFacilityRulesAsync(_renderedRulesetId, _ruleChanges.Values.AsEnumerable());

            await LoadRulesetAsync();

            _ruleChanges.Clear();
            _changesCount = 0;

            _isSavingRules = false;

            InvokeAsyncStateHasChanged();
        }
    }

    private void OnClearRuleChanges()
    {
        if (!_ruleChanges.Any() || !_facilityRules.Any())
        {
            return;
        }

        _isClearingRules = true;

        _ruleChanges.Clear();
        _changesCount = 0;

        _isClearingRules = false;
    }

    private string GetViewTabStyle(ZoneDefinition thisZoneId)
        => _selectedZoneIdView == thisZoneId
            ? "view-visible"
            : "view-hidden";

    private void OnSelectNewView(ZoneDefinition newView)
    {
        if (newView != _selectedZoneIdView)
            _selectedZoneIdView = newView;
    }
    #endregion Form & UI Handling

    private string GetZoneName(ZoneDefinition zoneId)
        => _zoneNames.TryGetValue(zoneId, out string? zoneName)
            ? zoneName
            : zoneId.ToString();

    private void InvokeAsyncStateHasChanged()
        => InvokeAsync(StateHasChanged);
}
