@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using System.Text.RegularExpressions;
@using System.Threading;
@using System.Collections.Concurrent;
@using squittal.ScrimPlanetmans.App.Abstractions.Services.CensusRest
@using squittal.ScrimPlanetmans.App.Abstractions.Services.Rulesets
@using squittal.ScrimPlanetmans.App.Abstractions.Services.ScrimMatch
@using squittal.ScrimPlanetmans.App.Models
@using squittal.ScrimPlanetmans.App.Models.CensusRest
@using squittal.ScrimPlanetmans.App.Models.Planetside
@using squittal.ScrimPlanetmans.App.ScrimMatch.Events
@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models

@inject ICensusItemService CensusItemService
@inject IRulesetDataService RulesetDataService
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

<div class="sq-mini-card-6 default" style="min-width: 420px; background-color: transparent; box-shadow: 0px 2px 5px 0px var(--sq-light-blue-gray); max-width: calc(50% - 8px);">
    @if (_changesCount > 0)
    {
        <h5>Item Rules<span style="padding-left: 4px; font-weight: 400; font-size: 0.8rem;">(@_changesCount Changes)</span></h5>
    }
    else
    {
        <h5>Item Rules</h5>
    }

    @if (_isLoadingRules || _isSavingRules)
    {
        <SpinnerEllipsis />
    }
    else
    {
        @if (_itemRules != null && _itemRules.Any())
        {
            <EditForm Model="@_itemRules" OnValidSubmit="(() => OnSaveScrimItemRulesEditSubmit(false))" style="margin-top: 8px;">
                <DataAnnotationsValidator />

                <div class="sq-content">

                    @if (_changesCount > 0 && !_isClearingRules)
                    {
                        <button title="Save changes to the database" type="submit" class="btn btn-primary" @onclick="(() => OnSaveScrimItemRulesEditSubmit(true))">
                            <span class="oi oi-data-transfer-upload"></span>Save
                        </button>

                        <button type="button" title="Reset changes to original values" class="btn btn-outline-primary" @onclick="OnClearRuleChanges">
                            <span class="oi oi-x" style="top: 0px;"></span>Clear
                        </button>
                    }
                    else
                    {
                        <button title="There are no changes to save" disabled class="btn btn-primary disabled">
                            <span class="oi oi-data-transfer-upload"></span>Save
                        </button>
                    }

                    @if (_showReloadRulesPrompt)
                    {
                        <div class="text-danger sans-serif-font" style="border: 1px solid var(--sq-ov-semantic-red); border-radius: 0.1rem; padding: 4px 8px 4px 8px; font-size: 0.9rem; margin: 4px 0 8px 0;">
                            One or more Item Category or Item Rules have been altered.<button type="button" @onclick="OnRefreshRules" title="Reset changes to original values" class="btn btn-link" style="padding: 0 0 0 2px; font-size: 0.9rem; vertical-align: baseline;">Refresh</button> to discard your changes and recieve these updates.
                        </div>
                    }

                    <div class="sans-serif-font" style="font-size: 0.9rem; margin-top: 4px; margin-bottom: 12px;">
                        @if (_itemCategoryDomains != null && _deferredItemCategories != null)
                        {
                            <div style="display: inline; margin-right: 4px;">Item Category:</div><InputSelect style="margin-right: 5px; width: 250px; padding: 0.1rem;" Value="@_selectedItemCategoryIdString" ValueChanged="@((string id) => OnSelectItemCategoryId(id))" ValueExpression="@(() => _selectedItemCategoryIdString)">
                                <option value=@_noSelectedItemCategoryValue>None</option>

                                @foreach (var domain in _itemCategoryDomains)
                                {
                                    <optgroup label="@GetItemCategoryDomainDescription(domain)" style="background-color: var(--sq-bg-white-unlit); color: var(--sq-pink); font-style: normal;">@GetItemCategoryDomainDescription(domain)</optgroup>

                                    @foreach (var itemCategory in _deferredItemCategories.Where(c => c.Domain == domain))
                                    {
                                        <option value=@itemCategory.Id.ToString() label="@itemCategory.Name [@itemCategory.Id]">@itemCategory.Name [@itemCategory.Id]</option>
                                    }
                                }
                            </InputSelect>
                        }
                    </div>

                    @if (_selectedItemCategoryId == _noSelectedItemCategoryValue)
                    {
                        <p class="sans-serif-font" style="font-size: 0.9rem;">Select an Item Category to edit Item Rules</p>
                    }
                    else if (_itemRules == null || !_itemRules.Any())
                    {
                        <p class="sans-serif-font" style="font-size: 0.9rem;">There are no Item Rules for this Ruleset</p>
                    }
                    else if (!_itemRules.Any(r => r.ItemCategoryId == _selectedItemCategoryId))
                    {
                        <p class="sans-serif-font" style="font-size: 0.9rem;">There are no Item Rules for this Item Category</p>
                    }
                    else
                    {
                        <div style="max-height: 544px; overflow-y: auto; border-bottom: 1px solid var(--sq-black-alpha-50);">
                            <table class="table-responsive-sm table-striped-light default sans-serif-font" style="border-bottom: none;">
                                <thead style="border-bottom: 1px solid var(--sq-black-alpha-50);">
                                    <tr>
                                        <th style="padding-bottom: 2px;">Item <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[ID]</span></th>
                                        <th style="padding-bottom: 2px;">Points</th>
                                        <th style="padding-bottom: 2px;">Banned?</th>
                                        <th style="padding-bottom: 2px;">Defer to<br>Classes?</th>
                                        <th style="padding-bottom: 2px; padding-right: 2px; width: 20px;"></th>
                                    </tr>
                                </thead>

                                <tbody>
                                    @foreach (var itemRule in _itemRules.Where(r => r.ItemCategoryId == _selectedItemCategoryId))
                                    {
                                        _items.TryGetValue(itemRule.ItemId, out CensusItem? item);
                                        string itemName = item?.Name.English.HasValue is true
                                            ? item.Name.English.Value
                                            : $"Item{itemRule.ItemId}";

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black);">@itemName <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[@itemRule.ItemId]</span></td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.Points);">
                                                <InputNumber Value="@itemRule.Points" ValueChanged="@((int p) => OnChangeRulePoints(itemRule, p))" ValueExpression="@(() => itemRule.Points)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemRule.IsBanned);">
                                                <InputCheckbox Value="@itemRule.IsBanned" ValueChanged="@((bool b) => OnChangeRuleIsBanned(itemRule, b))" ValueExpression="@(() => itemRule.IsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemRule.IsBanned ? "Yes" : "No")</span>
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemRule.DeferToPlanetsideClassSettings);">
                                                <InputCheckbox Value="@itemRule.DeferToPlanetsideClassSettings" ValueChanged="@((bool d) => OnChangeRuleDeferToPlanetsideClass(itemRule, d))" ValueExpression="@(() => itemRule.DeferToPlanetsideClassSettings)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemRule.DeferToPlanetsideClassSettings ? "Yes" : "No")</span>
                                            </td>

                                            <td style="padding-right: 8px;">
                                                @if (itemRule.DeferToPlanetsideClassSettings)
                                                {
                                                    @if (GetPlanetsideClassIsExtended(itemRule.ItemId))
                                                    {
                                                        <button @onclick="() => OnTogglePlanetsideClassExtension(itemRule.ItemId)" type="submit" style="padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Collapse Planetside class settings">
                                                            <span class="oi oi-caret-bottom"></span>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button @onclick="() => OnTogglePlanetsideClassExtension(itemRule.ItemId)" type="submit" style="padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Expand Planetside class settings">
                                                            <span class="oi oi-caret-left"></span>
                                                        </button>
                                                    }
                                                }
                                            </td>

                                        </tr>

                                        @if (itemRule.DeferToPlanetsideClassSettings && GetPlanetsideClassIsExtended(itemRule.ItemId))
                                        {
                                            <tr class="sans-serif-font">
                                                <td style="color: var(--sq-black); padding-left: 24px;">
                                                    <span class="playerLoadoutIcon ps2-icon infil" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                    <span>Infiltrator</span>
                                                </td>
                                                <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.InfiltratorPoints);">
                                                    <InputNumber Value="@itemRule.InfiltratorPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemRule, CensusProfileType.Infiltrator, p))" ValueExpression="@(() => itemRule.InfiltratorPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                                </td>

                                                <td style="opacity: @GetBoolValueOpacity(itemRule.InfiltratorIsBanned);">
                                                    <InputCheckbox Value="@itemRule.InfiltratorIsBanned" ValueChanged="@((bool b) => OnChangeRulePlanetsideClassIsBanned(itemRule, CensusProfileType.Infiltrator, b))" ValueExpression="@(() => itemRule.InfiltratorIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemRule.InfiltratorIsBanned ? "Yes" : "No")</span>
                                                </td>
                                            </tr>

                                            <tr class="sans-serif-font">
                                                <td style="color: var(--sq-black); padding-left: 24px;">
                                                    <span class="playerLoadoutIcon ps2-icon la" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                    <span>Light Assault</span>
                                                </td>
                                                <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.LightAssaultPoints);">
                                                    <InputNumber Value="@itemRule.LightAssaultPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemRule, CensusProfileType.LightAssault, p))" ValueExpression="@(() => itemRule.LightAssaultPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                                </td>

                                                <td style="opacity: @GetBoolValueOpacity(itemRule.LightAssaultIsBanned);">
                                                    <InputCheckbox Value="@itemRule.LightAssaultIsBanned" ValueChanged="@((bool b) => OnChangeRulePlanetsideClassIsBanned(itemRule, CensusProfileType.LightAssault, b))" ValueExpression="@(() => itemRule.LightAssaultIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemRule.LightAssaultIsBanned ? "Yes" : "No")</span>
                                                </td>
                                            </tr>

                                            <tr class="sans-serif-font">
                                                <td style="color: var(--sq-black); padding-left: 24px;">
                                                    <span class="playerLoadoutIcon ps2-icon medic" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                    <span>Medic</span>
                                                </td>
                                                <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.MedicPoints);">
                                                    <InputNumber Value="@itemRule.MedicPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemRule, CensusProfileType.CombatMedic, p))" ValueExpression="@(() => itemRule.MedicPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                                </td>

                                                <td style="opacity: @GetBoolValueOpacity(itemRule.MedicIsBanned);">
                                                    <InputCheckbox Value="@itemRule.MedicIsBanned" ValueChanged="@((bool b) => OnChangeRulePlanetsideClassIsBanned(itemRule, CensusProfileType.CombatMedic, b))" ValueExpression="@(() => itemRule.MedicIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemRule.MedicIsBanned ? "Yes" : "No")</span>
                                                </td>
                                            </tr>

                                            <tr class="sans-serif-font">
                                                <td style="color: var(--sq-black); padding-left: 24px;">
                                                    <span class="playerLoadoutIcon ps2-icon engie" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                    <span>Engineer</span>
                                                </td>
                                                <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.EngineerPoints);">
                                                    <InputNumber Value="@itemRule.EngineerPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemRule, CensusProfileType.Engineer, p))" ValueExpression="@(() => itemRule.EngineerPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                                </td>

                                                <td style="opacity: @GetBoolValueOpacity(itemRule.EngineerIsBanned);">
                                                    <InputCheckbox Value="@itemRule.EngineerIsBanned" ValueChanged="@((bool b) => OnChangeRulePlanetsideClassIsBanned(itemRule, CensusProfileType.Engineer, b))" ValueExpression="@(() => itemRule.EngineerIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemRule.EngineerIsBanned ? "Yes" : "No")</span>
                                                </td>
                                            </tr>

                                            <tr class="sans-serif-font">
                                                <td style="color: var(--sq-black); padding-left: 24px;">
                                                    <span class="playerLoadoutIcon ps2-icon heavy" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                    <span>Heavy Assault</span>
                                                </td>
                                                <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.HeavyAssaultPoints);">
                                                    <InputNumber Value="@itemRule.HeavyAssaultPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemRule, CensusProfileType.HeavyAssault, p))" ValueExpression="@(() => itemRule.HeavyAssaultPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                                </td>

                                                <td style="opacity: @GetBoolValueOpacity(itemRule.HeavyAssaultIsBanned);">
                                                    <InputCheckbox Value="@itemRule.HeavyAssaultIsBanned" ValueChanged="@((bool b) => OnChangeRulePlanetsideClassIsBanned(itemRule, CensusProfileType.HeavyAssault, b))" ValueExpression="@(() => itemRule.HeavyAssaultIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemRule.HeavyAssaultIsBanned ? "Yes" : "No")</span>
                                                </td>
                                            </tr>

                                            <tr class="sans-serif-font">
                                                <td style="color: var(--sq-black); padding-left: 24px;">
                                                    <span class="playerLoadoutIcon ps2-icon max" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                    <span>MAX</span>
                                                </td>
                                                <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.MaxPoints);">
                                                    <InputNumber Value="@itemRule.MaxPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemRule, CensusProfileType.MAX, p))" ValueExpression="@(() => itemRule.MaxPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                                </td>

                                                <td style="opacity: @GetBoolValueOpacity(itemRule.MaxIsBanned);">
                                                    <InputCheckbox Value="@itemRule.MaxIsBanned" ValueChanged="@((bool b) => OnChangeRulePlanetsideClassIsBanned(itemRule, CensusProfileType.MAX, b))" ValueExpression="@(() => itemRule.MaxIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemRule.MaxIsBanned ? "Yes" : "No")</span>
                                                </td>
                                            </tr>

                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </EditForm>
        }
        else
        {
            <div class="sans-serif-font" style="border: 1px solid var(--sq-black-alpha-50); border-radius: 0.1rem; padding: 4px 8px 4px 8px; font-size: 0.9rem; margin: 4px 8px 8px 8px;">
                There are no Item Rules for this Ruleset. Enable "Defer to Item Rules" for an Item Category Rule to begin editing Item Rules.
            </div>
        }
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private IEnumerable<RulesetItemRule> _itemRules { get; set; }
    private Dictionary<uint, CensusItem> _items { get; set; }

    private IEnumerable<ItemCategory> _deferredItemCategories { get; set; }
    private IEnumerable<ItemCategoryDomain> _itemCategoryDomains { get; set; }

    bool _isLoadingRules { get; set; } = false;
    bool _isSavingRules { get; set; } = false;
    bool _isClearingRules { get; set; } = false;

    bool _showReloadRulesPrompt { get; set; } = false;

    private CancellationTokenSource cts;

    private ConcurrentDictionary<uint, RulesetItemRule> _changedRules { get; set; } = new();
    private ConcurrentDictionary<uint, int> _originalRulePoints { get; set; } = new();
    private ConcurrentDictionary<uint, bool> _originalRuleBans { get; set; } = new();

    private ConcurrentDictionary<uint, bool> _originalRuleDeferToPlanetsideClasses { get; set; } = new();
    private ConcurrentDictionary<uint, PlanetsideClassRuleSettings> _originalRulePlanetsideClassSettings { get; set; } = new();

    private int _changesCount { get; set; } = 0;

    private string _selectedItemCategoryIdString { get; set; } = "0";
    private int _selectedItemCategoryId { get; set; } = 0;

    private int _noSelectedItemCategoryValue = 0;

    private ConcurrentDictionary<uint, bool> _extendablePlanetsideClasses { get; set; } = new();


    #region Initializtion Methods

    public EditRulesetItemRules()
    {
        _items = new Dictionary<uint, CensusItem>();
    }

    public void Dispose()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }

        MessageService.RaiseRulesetRuleChangeEvent -= HandleRulesetRuleChangeEvent;
    }

    protected override void OnInitialized()
    {
        _renderedRulesetId = i_rulesetId;

        MessageService.RaiseRulesetRuleChangeEvent += HandleRulesetRuleChangeEvent;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRulesAsync();

        foreach (RulesetItemRule rule in _itemRules)
        {
            CensusItem? item = await CensusItemService.GetByIdAsync(rule.ItemId);
            if (item is not null)
                _items.Add(item.ItemId, item);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (i_rulesetId != _renderedRulesetId)
        {
            _renderedRulesetId = i_rulesetId;

            await LoadRulesAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesAsync()
    {
        _isLoadingRules = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {
            var TaskList = new List<Task>();

            var itemRulesTask = RulesetDataService.GetRulesetItemRulesAsync(_renderedRulesetId, cts.Token);
            TaskList.Add(itemRulesTask);

            var deferredItemCategoriesTask = RulesetDataService.GetItemCategoriesDeferringToItemRulesAsync(_renderedRulesetId, cts.Token);
            TaskList.Add(deferredItemCategoriesTask);

            await Task.WhenAll(TaskList);

            cts.Token.ThrowIfCancellationRequested();

            _itemRules = itemRulesTask.Result.ToList();
            _deferredItemCategories = deferredItemCategoriesTask.Result.OrderBy(c => c.Name).ToList();

            if (_deferredItemCategories != null)
            {
                _itemCategoryDomains = _deferredItemCategories.Select(c => c.Domain).Distinct().ToList();
            }

            _originalRulePoints.Clear();
            _originalRuleBans.Clear();
            _originalRuleDeferToPlanetsideClasses.Clear();
            _originalRulePlanetsideClassSettings.Clear();

            _changedRules.Clear();

            _changesCount = 0;

            if (!_deferredItemCategories.Any(e => e.Id == _selectedItemCategoryId))
            {
                OnSelectItemCategoryId(_noSelectedItemCategoryValue.ToString());
            }

            foreach (var rule in _itemRules.Where(r => r.DeferToPlanetsideClassSettings))
            {
                _extendablePlanetsideClasses.TryAdd(rule.ItemId, true);
            }
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isLoadingRules = false;

        InvokeAsyncStateHasChanged();
    }
    #endregion Initializtion Methods

    #region Event Handling
    private async void HandleRulesetRuleChangeEvent(object sender, ScrimMessageEventArgs<RulesetRuleChangeMessage> e)
    {
        var ruleset = e.Message.Ruleset;

        if (ruleset.Id != _renderedRulesetId)
        {
            return;
        }

        var changeType = e.Message.RuleChangeType;

        if (changeType != RulesetRuleChangeType.ItemCategoryRule && changeType != RulesetRuleChangeType.ItemRule)
        {
            return;
        }
        else if (_changesCount == 0)
        {
            await LoadRulesAsync();
        }
        else
        {
            _showReloadRulesPrompt = true;
            InvokeAsyncStateHasChanged();
        }
    }

    private void OnChangeRulePoints(RulesetItemRule rule, int newPoints)
    {
        var itemId = rule.ItemId;
        var currentPoints = rule.Points;

        // Subsequent change
        if (_originalRulePoints.TryGetValue(itemId, out int originalPoints))
        {
            rule.Points = newPoints;

            if (newPoints == originalPoints)
            {
                _originalRulePoints.TryRemove(itemId, out var removedRulePoints);

                if (!RuleHasAnyChanges(itemId))
                {
                    _changedRules.TryRemove(itemId, out var removedRule);
                }
            }
            else
            {
                _changedRules.AddOrUpdate(itemId, rule, (key, oldValue) => rule);
            }
        }
        // Initial change
        else
        {
            if (!_originalRulePoints.TryAdd(itemId, currentPoints))
            {
                _changesCount = _changedRules.Count();

                return;
            }

            rule.Points = newPoints;

            _changedRules.AddOrUpdate(itemId, rule, (key, oldValue) => rule);
        }

        _changesCount = _changedRules.Count();
    }

    private void OnChangeRuleIsBanned(RulesetItemRule rule, bool newIsBanned)
    {
        var itemId = rule.ItemId;
        var currentIsBanned = rule.IsBanned;

        // Subsequent change
        if (_originalRuleBans.TryGetValue(itemId, out bool originalIsBanned))
        {
            if (newIsBanned == originalIsBanned)
            {
                _originalRuleBans.TryRemove(itemId, out var removedIsBanned);

                if (!RuleHasAnyChanges(itemId))
                {
                    _changedRules.TryRemove(itemId, out var removedRule);
                }
            }

            rule.IsBanned = newIsBanned;
        }
        // Initial change
        else
        {
            if (!_originalRuleBans.TryAdd(itemId, currentIsBanned))
            {
                _changesCount = _changedRules.Count();

                return;
            }

            rule.IsBanned = newIsBanned;

            _changedRules.AddOrUpdate(itemId, rule, (key, oldValue) => rule);
        }

        _changesCount = _changedRules.Count();

        InvokeAsyncStateHasChanged();
    }

    private void OnChangeRuleDeferToPlanetsideClass(RulesetItemRule rule, bool newDefer)
    {
        var itemId = rule.ItemId;
        var currentDefer = rule.DeferToPlanetsideClassSettings;

        // Subsequent changee
        if (_originalRuleDeferToPlanetsideClasses.TryGetValue(itemId, out bool originalDefer))
        {
            if (newDefer == originalDefer)
            {
                _originalRuleDeferToPlanetsideClasses.TryRemove(itemId, out var removedDefer);

                if (!RuleHasAnyChanges(itemId))
                {
                    _changedRules.TryRemove(itemId, out var removedRule);
                }
            }

            rule.DeferToPlanetsideClassSettings = newDefer;
        }
        // Initial change
        else
        {
            if (!_originalRuleDeferToPlanetsideClasses.TryAdd(itemId, currentDefer))
            {
                _changesCount = _changedRules.Count();

                return;
            }

            rule.DeferToPlanetsideClassSettings = newDefer;

            _changedRules.AddOrUpdate(itemId, rule, (key, oldValue) => rule);
        }

        _changesCount = _changedRules.Count();

        if (rule.DeferToPlanetsideClassSettings && !_extendablePlanetsideClasses.ContainsKey(itemId))
        {
            _extendablePlanetsideClasses.TryAdd(rule.ItemId, true);
        }
        else if (!rule.DeferToPlanetsideClassSettings && _extendablePlanetsideClasses.ContainsKey(itemId))
        {
            _extendablePlanetsideClasses.TryRemove(itemId, out bool _);
        }

        InvokeAsyncStateHasChanged();
    }

    private void OnChangeRulePlanetsideClassPoints(RulesetItemRule rule, CensusProfileType planetsideClass, int newPoints)
    {
        var itemId = rule.ItemId;
        var currentRuleClassSettings = rule.GetPlanetsideClassRuleSettings();
        var currentClassPoints = currentRuleClassSettings.GetClassPoints(planetsideClass);

        // Subsequent change
        if (_originalRulePlanetsideClassSettings.TryGetValue(itemId, out var originalRuleClassSettings))
        {
            var originalClassPoints = originalRuleClassSettings.GetClassPoints(planetsideClass);

            if (newPoints == originalClassPoints)
            {
                _originalRulePlanetsideClassSettings.TryRemove(itemId, out var removedSettings);

                if (!RuleHasAnyChanges(itemId))
                {
                    _changedRules.TryRemove(itemId, out var removedRule);
                }
            }

            currentRuleClassSettings.SetClassPoints(planetsideClass, newPoints);
            rule.SetPlanetsideClassSettings(currentRuleClassSettings);
        }
        // Initial change
        else
        {
            if (!_originalRulePlanetsideClassSettings.TryAdd(itemId, currentRuleClassSettings))
            {
                _changesCount = _changedRules.Count();

                return;
            }

            var newClassSettings = rule.GetPlanetsideClassRuleSettings();
            newClassSettings.SetClassPoints(planetsideClass, newPoints);
            rule.SetPlanetsideClassSettings(newClassSettings);

            _changedRules.AddOrUpdate(itemId, rule, (key, oldValue) => rule);
        }

        _changesCount = _changedRules.Count();

        InvokeAsyncStateHasChanged();
    }

    private void OnChangeRulePlanetsideClassIsBanned(RulesetItemRule rule, CensusProfileType planetsideClass, bool newIsBanned)
    {
        var itemId = rule.ItemId;
        var currentRuleClassSettings = rule.GetPlanetsideClassRuleSettings();
        var currentClassIsBanned = currentRuleClassSettings.GetClassIsBanned(planetsideClass);

        // Subsequent change
        if (_originalRulePlanetsideClassSettings.TryGetValue(itemId, out var originalRuleClassSettings))
        {
            var originalClassIsBanned = originalRuleClassSettings.GetClassIsBanned(planetsideClass);

            if (newIsBanned == originalClassIsBanned)
            {
                _originalRulePlanetsideClassSettings.TryRemove(itemId, out var removedSettings);

                if (!RuleHasAnyChanges(itemId))
                {
                    _changedRules.TryRemove(itemId, out var removedRule);
                }
            }

            currentRuleClassSettings.SetClassIsBanned(planetsideClass, newIsBanned);
            rule.SetPlanetsideClassSettings(currentRuleClassSettings);
        }
        // Initial change
        else
        {
            if (!_originalRulePlanetsideClassSettings.TryAdd(itemId, currentRuleClassSettings))
            {
                _changesCount = _changedRules.Count();

                return;
            }

            var newClassSettings = rule.GetPlanetsideClassRuleSettings();
            newClassSettings.SetClassIsBanned(planetsideClass, newIsBanned);
            rule.SetPlanetsideClassSettings(newClassSettings);

            _changedRules.AddOrUpdate(itemId, rule, (key, oldValue) => rule);
        }

        _changesCount = _changedRules.Count();

        InvokeAsyncStateHasChanged();
    }

    private bool RuleHasAnyChanges(uint itemId)
    {
        return RuleHasPointChange(itemId)
                || RuleHasBanChange(itemId)
                || RuleHasPlanetsideClassSettingsChange(itemId);
    }

    private bool RuleHasPointChange(uint itemId)
    {
        return _originalRulePoints.ContainsKey(itemId);
    }

    private bool RuleHasBanChange(uint itemId)
    {
        return _originalRuleBans.ContainsKey(itemId);
    }

    private bool RuleHasPlanetsideClassSettingsChange(uint itemId)
    {
        return _originalRulePlanetsideClassSettings.ContainsKey(itemId);
    }

    #endregion Event Handling

    #region Form Handling
    private async void OnSaveScrimItemRulesEditSubmit(bool isManualClick)
    {
        if (!isManualClick)
        {
            return;
        }

        if (_changedRules.Any())
        {
            _isSavingRules = true;
            InvokeAsyncStateHasChanged();

            await RulesetDataService.SaveRulesetItemRules(_renderedRulesetId, _changedRules.Values.AsEnumerable());

            _originalRulePoints.Clear();
            _originalRuleBans.Clear();
            _changedRules.Clear();
            _originalRuleDeferToPlanetsideClasses.Clear();
            _originalRulePlanetsideClassSettings.Clear();
            _changesCount = 0;

            _isSavingRules = false;

            _showReloadRulesPrompt = false;

            await LoadRulesAsync();

            InvokeAsyncStateHasChanged();
        }
    }

    private void OnClearRuleChanges()
    {
        if (!_changedRules.Any() || !_itemRules.Any())
        {
            return;
        }

        _isClearingRules = true;

        foreach (var idPointsPair in _originalRulePoints)
        {
            _itemRules.FirstOrDefault(r => r.ItemId == idPointsPair.Key).Points = idPointsPair.Value;
        }

        foreach (var idBanPair in _originalRuleBans)
        {
            _itemRules.Where(r => r.ItemId == idBanPair.Key).FirstOrDefault().IsBanned = idBanPair.Value;
        }

        foreach (var idDeferToClassPair in _originalRuleDeferToPlanetsideClasses)
        {
            _itemRules.Where(r => r.ItemId == idDeferToClassPair.Key).FirstOrDefault().DeferToPlanetsideClassSettings = idDeferToClassPair.Value;
        }

        foreach (var idClassSettingsPair in _originalRulePlanetsideClassSettings)
        {
            _itemRules.Where(r => r.ItemId == idClassSettingsPair.Key).FirstOrDefault().SetPlanetsideClassSettings(idClassSettingsPair.Value);
        }

        _originalRulePoints.Clear();
        _originalRuleBans.Clear();
        _changedRules.Clear();
        _originalRuleDeferToPlanetsideClasses.Clear();
        _originalRulePlanetsideClassSettings.Clear();
        _changesCount = 0;

        _isClearingRules = false;
    }

    private void OnSelectItemCategoryId(string itemCategoryIdString)
    {
        if (int.TryParse(itemCategoryIdString, out int parsedInt))
        {
            _selectedItemCategoryId = parsedInt;
            _selectedItemCategoryIdString = itemCategoryIdString;
        }
        else
        {
            _selectedItemCategoryId = _noSelectedItemCategoryValue;
            _selectedItemCategoryIdString = _noSelectedItemCategoryValue.ToString();
        }
    }

    private async Task OnRefreshRules()
    {
        _showReloadRulesPrompt = false;

        var previousSelectedItemCategoryIdString = _selectedItemCategoryIdString;

        await LoadRulesAsync();

        OnSelectItemCategoryId(previousSelectedItemCategoryIdString);

        InvokeAsyncStateHasChanged();
    }
    #endregion Form Handling

    #region UI Controls
    private bool GetPlanetsideClassIsExtended(uint ItemId)
    {
        if (_extendablePlanetsideClasses.TryGetValue(ItemId, out var currentIsExtended))
        {
            return currentIsExtended;
        }
        else
        {
            return false;
        }
    }

    private void OnTogglePlanetsideClassExtension(uint ItemId)
    {
        if (_extendablePlanetsideClasses.TryGetValue(ItemId, out var currentIsExtended))
        {
            _extendablePlanetsideClasses.TryUpdate(ItemId, !currentIsExtended, currentIsExtended);
        }
    }
    #endregion UI Controls

    private string GetItemCategoryDomainDescription(ItemCategoryDomain domain)
    {
        var name = Enum.GetName(typeof(ItemCategoryDomain), domain);

        return Regex.Replace(name, @"(\p{Ll})(\p{Lu})", "$1 $2");
    }

    #region Helpers
    private double GetValueOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }

    private double GetBoolValueOpacity(bool value)
    {
        return (value == true)
            ? 1.0
            : 0.5;
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    #endregion Helpers
}
