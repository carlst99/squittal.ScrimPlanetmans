@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using System.Collections.Concurrent;
@using System.Diagnostics.CodeAnalysis
@using System.Text.RegularExpressions;
@using System.Threading;
@using squittal.ScrimPlanetmans.App.Abstractions.Services.CensusRest
@using squittal.ScrimPlanetmans.App.Abstractions.Services.Rulesets
@using squittal.ScrimPlanetmans.App.Models.CensusRest
@using squittal.ScrimPlanetmans.App.Models.Planetside
@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models

@inject ICensusItemService CensusItemService
@inject IRulesetDataService RulesetDataService

@implements IDisposable

<div class="sq-mini-card-6 default" style="min-width: 420px; background-color: transparent; box-shadow: 0 2px 5px 0 var(--sq-light-blue-gray); max-width: calc(50% - 8px);">
    <h5>Item Rules</h5>

    @if (_isLoadingRules)
    {
        <SpinnerEllipsis />
    }
    else
    {
        @if (_itemRules != null && _itemRules.Any())
        {
            <div class="sq-content" style="margin-top: 8px;">

                <div class="sans-serif-font" style="font-size: 0.9rem; margin-top: 4px; margin-bottom: 12px;">
                    @if (_itemCategoryDomains != null && _deferredItemCategories != null)
                    {
                        <EditForm Model="@_selectedItemCategoryIdString">
                            <div style="display: inline; margin-right: 4px;">Item Category:</div><InputSelect style="margin-right: 5px; width: 250px; padding: 0.1rem;" Value="@_selectedItemCategoryIdString" ValueChanged="@((string id) => OnSelectItemCategoryId(id))" ValueExpression="@(() => _selectedItemCategoryIdString)">
                                <option value=@_noSelectedItemCategoryValue>None</option>

                                @foreach (var domain in _itemCategoryDomains)
                                {
                                    <optgroup label="@GetItemCategoryDomainDescription(domain)" style="background-color: var(--sq-bg-white-unlit); color: var(--sq-pink); font-style: normal;">@GetItemCategoryDomainDescription(domain)</optgroup>

                                    @foreach (var itemCategory in _deferredItemCategories.Where(c => c.Domain == domain))
                                    {
                                        <option value=@itemCategory.Id.ToString() label="@itemCategory.Name [@itemCategory.Id]">@itemCategory.Name [@itemCategory.Id]</option>
                                    }
                                }
                            </InputSelect>
                        </EditForm>
                    }
                </div>


                @if (_selectedItemCategoryId == _noSelectedItemCategoryValue)
                {
                    <p class="sans-serif-font" style="font-size: 0.9rem;">Select an Item Category to view Item Rules</p>
                }
                else if (_itemRules == null || !_itemRules.Any())
                {
                    <p class="sans-serif-font" style="font-size: 0.9rem;">There are no Item Rules for this Ruleset</p>
                }
                else if (!_itemRules.Any(r => r.ItemCategoryId == _selectedItemCategoryId))
                {
                    <p class="sans-serif-font" style="font-size: 0.9rem;">There are no Item Rules for this Item Category</p>
                }
                else
                {
                    <div style="max-height: 544px; overflow-y: auto; border-bottom: 1px solid var(--sq-black-alpha-50);">
                        <table class="table-responsive-sm table-striped-light default sans-serif-font" style="border-bottom: none;">
                            <thead style="border-bottom: 1px solid var(--sq-black-alpha-50);">
                                <tr>
                                    <th style="padding-bottom: 2px;">Item <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[ID]</span></th>
                                    <th style="padding-bottom: 2px;">Points</th>
                                    <th style="padding-bottom: 2px;">Banned?</th>
                                    <th style="padding-bottom: 2px;">Defer to<br>Classes?</th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var itemRule in _itemRules.Where(r => r.ItemCategoryId == _selectedItemCategoryId))
                                {
                                    _items.TryGetValue(itemRule.ItemId, out CensusItem? item);
                                    string itemName = item?.Name?.English.GetValueOrDefault()
                                        ?? $"Item{itemRule.ItemId}";

                                    <tr class="sans-serif-font">
                                        <td style="color: var(--sq-black);">@itemName <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[@itemRule.ItemId]</span></td>
                                        <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.Points); text-align: right; width: 50px; color: var(--sq-black);">@itemRule.Points</td>
                                        <td style="color: var(--sq-black); opacity: @GetBoolValueOpacity(itemRule.IsBanned);">@itemRule.IsBanned</td>
                                        <td style="color: var(--sq-black); opacity: @GetBoolValueOpacity(itemRule.DeferToPlanetsideClassSettings);">@itemRule.DeferToPlanetsideClassSettings</td>
                                    
                                        <td style="padding-right: 8px;">
                                            @if (itemRule.DeferToPlanetsideClassSettings)
                                            {
                                                @if (GetPlanetsideClassIsExtended(itemRule.ItemId))
                                                {
                                                    <button @onclick="() => OnTogglePlanetsideClassExtension(itemRule.ItemId)" type="submit" style="padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Collapse Planetside class settings">
                                                        <span class="oi oi-caret-bottom"></span>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button @onclick="() => OnTogglePlanetsideClassExtension(itemRule.ItemId)" type="submit" style="padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Expand Planetside class settings">
                                                        <span class="oi oi-caret-left"></span>
                                                    </button>
                                                }
                                            }
                                        </td>

                                    </tr>

                                    @if (itemRule.DeferToPlanetsideClassSettings && GetPlanetsideClassIsExtended(itemRule.ItemId))
                                    {
                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon infil" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>Infiltrator</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.InfiltratorPoints); text-align: right; color: var(--sq-black);">
                                                @itemRule.InfiltratorPoints
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemRule.InfiltratorIsBanned); color: var(--sq-black);">
                                                @itemRule.InfiltratorIsBanned
                                            </td>
                                        </tr>

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon la" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>Light Assault</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.LightAssaultPoints); text-align: right; color: var(--sq-black);">
                                                @itemRule.LightAssaultPoints
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemRule.LightAssaultIsBanned); color: var(--sq-black);">
                                                @itemRule.LightAssaultIsBanned
                                            </td>
                                        </tr>

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon medic" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>Medic</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.MedicPoints); text-align: right; color: var(--sq-black);">
                                                @itemRule.MedicPoints
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemRule.MedicIsBanned); color: var(--sq-black);">
                                                @itemRule.MedicIsBanned
                                            </td>
                                        </tr>

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon engie" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>Engineer</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.EngineerPoints); text-align: right; color: var(--sq-black);">
                                                @itemRule.EngineerPoints
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemRule.EngineerIsBanned); color: var(--sq-black);">
                                                @itemRule.EngineerIsBanned
                                            </td>
                                        </tr>

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon heavy" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>Heavy Assault</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.HeavyAssaultPoints); text-align: right; color: var(--sq-black);">
                                                @itemRule.HeavyAssaultPoints
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemRule.HeavyAssaultIsBanned); color: var(--sq-black);">
                                                @itemRule.HeavyAssaultIsBanned
                                            </td>
                                        </tr>

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon max" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>MAX</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemRule.MaxPoints); text-align: right; color: var(--sq-black);">
                                                @itemRule.MaxPoints
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemRule.MaxIsBanned); color: var(--sq-black);">
                                                @itemRule.MaxIsBanned
                                            </td>
                                        </tr>

                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="sans-serif-font" style="border: 1px solid var(--sq-black-alpha-50); border-radius: 0.1rem; padding: 4px 8px 4px 8px; font-size: 0.9rem; margin: 4px 0 8px 0;">
                There are no Item Rules for this Ruleset.
            </div>
        }
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private IEnumerable<RulesetItemRule>? _itemRules { get; set; }
    private Dictionary<uint, CensusItem> _items { get; set; }

    private IEnumerable<ItemCategory>? _deferredItemCategories { get; set; }
    private IEnumerable<ItemCategoryDomain>? _itemCategoryDomains { get; set; }

    bool _isLoadingRules { get; set; } = false;

    private string _selectedItemCategoryIdString { get; set; } = "0";
    private int _selectedItemCategoryId { get; set; } = 0;
    private int _noSelectedItemCategoryValue = 0;
    private CancellationTokenSource? _cts;
    private ConcurrentDictionary<uint, bool> _extendablePlanetsideClasses { get; set; } = new();


    #region Initializtion Methods

    public ViewRulesetItemRules()
    {
        _items = new Dictionary<uint, CensusItem>();
    }

    public void Dispose()
    {
        if (_cts != null)
        {
            _cts.Cancel();
            _cts.Dispose();
        }
    }

    protected override void OnInitialized()
    {
        _renderedRulesetId = i_rulesetId;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRulesAsync();

        foreach (RulesetItemRule rule in _itemRules)
        {
            CensusItem? item = await CensusItemService.GetByIdAsync(rule.ItemId);
            if (item is not null)
                _items.Add(item.ItemId, item);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (i_rulesetId != _renderedRulesetId)
        {
            _renderedRulesetId = i_rulesetId;

            await LoadRulesAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    [MemberNotNull(nameof(_itemRules))]
    private async Task LoadRulesAsync()
    {
        _isLoadingRules = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        _cts?.Cancel();

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new();
        _cts = newCTS;

        try
        {
            var TaskList = new List<Task>();

            var itemRulesTask = RulesetDataService.GetRulesetItemRulesAsync(_renderedRulesetId, _cts.Token);
            TaskList.Add(itemRulesTask);

            var deferredItemCategoriesTask = RulesetDataService.GetItemCategoriesDeferringToItemRulesAsync(_renderedRulesetId, _cts.Token);
            TaskList.Add(deferredItemCategoriesTask);

            await Task.WhenAll(TaskList);

            _itemRules = itemRulesTask.Result.ToList();
            _deferredItemCategories = deferredItemCategoriesTask.Result?.OrderBy(c => c.Name).ToList();

            if (_deferredItemCategories != null)
            {
                _itemCategoryDomains = _deferredItemCategories.Select(c => c.Domain).Distinct().ToList();
            }

            if (_deferredItemCategories?.Any(e => e.Id == _selectedItemCategoryId) is false)
            {
                OnSelectItemCategoryId(_noSelectedItemCategoryValue.ToString());
            }

            foreach (var rule in _itemRules.Where(r => r.DeferToPlanetsideClassSettings))
            {
                _extendablePlanetsideClasses.TryAdd(rule.ItemId, true);
            }
        }
        catch
        {
            _itemRules = Array.Empty<RulesetItemRule>();
        }

        // When the process is complete, signal that another process can proceed
        if (_cts == newCTS)
        {
            _cts = null;
        }

        _isLoadingRules = false;
    }
    #endregion Initializtion Methods

    #region UI Controls

    private bool GetPlanetsideClassIsExtended(uint itemCategoryId)
        => _extendablePlanetsideClasses.TryGetValue(itemCategoryId, out bool isExtendable) && isExtendable;

    private void OnTogglePlanetsideClassExtension(uint ItemId)
    {
        if (_extendablePlanetsideClasses.TryGetValue(ItemId, out bool currentIsExtended))
            _extendablePlanetsideClasses.TryUpdate(ItemId, !currentIsExtended, currentIsExtended);
    }

    #endregion UI Controls

    private void OnSelectItemCategoryId(string itemCategoryIdString)
    {
        if (int.TryParse(itemCategoryIdString, out int parsedInt))
        {
            _selectedItemCategoryId = parsedInt;
            _selectedItemCategoryIdString = itemCategoryIdString;
        }
        else
        {
            _selectedItemCategoryId = _noSelectedItemCategoryValue;
            _selectedItemCategoryIdString = _noSelectedItemCategoryValue.ToString();
        }
    }

    private string GetItemCategoryDomainDescription(ItemCategoryDomain domain)
        => Regex.Replace(domain.ToString(), @"(\p{Ll})(\p{Lu})", "$1 $2");

    private double GetValueOpacity(int value)
        => value != 0 ? 1.0 : 0.5;

    private double GetBoolValueOpacity(bool value)
        => value ? 1.0 : 0.5;

    private void InvokeAsyncStateHasChanged()
        => InvokeAsync(StateHasChanged);
}
