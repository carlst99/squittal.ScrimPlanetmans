@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using System.Text.RegularExpressions;
@using System.Threading;
@using System.Collections.Concurrent;
@using squittal.ScrimPlanetmans.App.Abstractions.Services.Planetside
@using squittal.ScrimPlanetmans.App.Abstractions.Services.Rulesets
@using squittal.ScrimPlanetmans.App.Models
@using squittal.ScrimPlanetmans.App.Models.CensusRest
@using squittal.ScrimPlanetmans.App.Models.Planetside
@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models

@inject IItemCategoryService ItemCategoryService
@inject IRulesetDataService RulesetDataService

@implements IDisposable

<div class="sq-mini-card-6 default" style="min-width: 420px; background-color: transparent; box-shadow: 0 2px 5px 0 var(--sq-light-blue-gray); margin-right: 16px;  max-width: calc(50% - 8px);">
    @if (_changesCount > 0)
    {
        <h5>Item Category Rules<span style="padding-left: 4px; font-weight: 400; font-size: 0.8rem;">(@_changesCount Changes)</span></h5>
    }
    else
    {
        <h5>Item Category Rules</h5>
    }

    @if (_isLoadingRules || _isSavingRules)
    {
        <SpinnerEllipsis />
    }
    else
    {
        @if (_itemCategoryRules != null && _itemCategoryRules.Any())
        {
            <EditForm Model="@_itemCategoryRules" OnValidSubmit="() => OnSaveScrimItemCategoryRulesEditSubmit(false)" style="margin-top: 8px;" >
                <DataAnnotationsValidator />
        
                <div class="sq-content">

                    @if (_changesCount > 0 && !_isClearingRules)
                    {
                        <button title="Save changes to the database" type="submit" class="btn btn-primary" @onclick="(() => OnSaveScrimItemCategoryRulesEditSubmit(true))">
                            <span class="oi oi-data-transfer-upload"></span>Save
                        </button>

                        <button type="button" title="Reset changes to original values" class="btn btn-outline-primary" @onclick="OnClearRuleChanges">
                            <span class="oi oi-x" style="top: 0;"></span>Clear
                        </button>
                    }
                    else
                    {
                        <button title="There are no changes to save" disabled class="btn btn-primary disabled">
                            <span class="oi oi-data-transfer-upload"></span>Save
                        </button>
                    }

                    <div class="tabbed-button-container" style="">
                        <button type="button" title="View infantry item category rules" class="btn btn-link @GetViewTabStyle(ItemCategoryDomain.Infantry)" @onclick="@(() => OnSelectNewView(ItemCategoryDomain.Infantry))">Infantry</button>
                        <button type="button" title="View MAX item category rules" class="btn btn-link @GetViewTabStyle(ItemCategoryDomain.Max)" @onclick="@(() => OnSelectNewView(ItemCategoryDomain.Max))">MAX</button>
                        <button type="button" title="View ground vehicle item category rules" class="btn btn-link @GetViewTabStyle(ItemCategoryDomain.GroundVehicle)" @onclick="@(() => OnSelectNewView(ItemCategoryDomain.GroundVehicle))">Ground</button>
                        <button type="button" title="View air vehicle item category rules" class="btn btn-link @GetViewTabStyle(ItemCategoryDomain.AirVehicle)" @onclick="@(() => OnSelectNewView(ItemCategoryDomain.AirVehicle))">Air</button>
                    </div>

                    <div style="max-height: 544px; overflow-y: auto; border-bottom: 1px solid var(--sq-black-alpha-50);">
                        <table class="table-responsive-sm table-striped-light default sans-serif-font" style="border-bottom: none;">
                            <thead style="border-bottom: 1px solid var(--sq-black-alpha-50);">
                                <tr>
                                    <th style="padding-bottom: 2px;">Item Category <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[ID]</span></th>
                                    <th style="padding-bottom: 2px;">Points</th>
                                    <th style="padding-bottom: 2px;">Banned?</th>
                                    <th style="padding-bottom: 2px;">Defer to<br />Classes?</th>
                                    <th style="padding-bottom: 2px;">Defer to<br>Item Rules?</th>
                                    <th style="padding-bottom: 2px; padding-right: 2px; width: 20px;"></th>
                                </tr>
                            </thead>

                            <tbody>
                                @{
                                    IEnumerable<RulesetItemCategoryRule> rules = _itemCategoryRules.Where
                                    (
                                        r => _itemCategories.TryGetValue(r.ItemCategoryId, out ItemCategory? category)
                                            && category.Domain == _selectedDomainView
                                    );
                                }
                            
                                @foreach (RulesetItemCategoryRule itemCategoryRule in rules)
                                {
                                    uint categoryId = itemCategoryRule.ItemCategoryId;
                                    string categoryName = _itemCategories.TryGetValue
                                        (
                                            categoryId,
                                            out ItemCategory? category
                                        )
                                        ? category.Name
                                        : $"Unknown{categoryId}";

                                    <tr class="sans-serif-font">
                                        <td style="color: var(--sq-black);">@categoryName <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[@categoryId]</span></td>
                                        <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.Points);">
                                            <InputNumber Value="@itemCategoryRule.Points" ValueChanged="@((int p) => OnChangeRulePoints(itemCategoryRule, p))" ValueExpression="@(() => itemCategoryRule.Points)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                        </td>

                                        <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.IsBanned);">
                                            <InputCheckbox Value="@itemCategoryRule.IsBanned" ValueChanged="@((b) => OnChangeRuleIsBanned(itemCategoryRule, b))" ValueExpression="@(() => itemCategoryRule.IsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemCategoryRule.IsBanned ? "Yes" : "No")</span>
                                        </td>

                                        <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.DeferToPlanetsideClassSettings);">
                                            <InputCheckbox Value="@itemCategoryRule.DeferToPlanetsideClassSettings" ValueChanged="@((d) => OnChangeRuleDeferToPlanetsideClass(itemCategoryRule, d))" ValueExpression="@(() => itemCategoryRule.DeferToPlanetsideClassSettings)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemCategoryRule.DeferToPlanetsideClassSettings ? "Yes" : "No")</span>
                                        </td>

                                        <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.DeferToItemRules);">
                                            <InputCheckbox Value="@itemCategoryRule.DeferToItemRules" ValueChanged="@((d) => OnChangeRuleDefer(itemCategoryRule, d))" ValueExpression="@(() => itemCategoryRule.DeferToItemRules)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemCategoryRule.DeferToItemRules ? "Yes" : "No")</span>
                                        </td>

                                        <td style="padding-right: 8px;">
                                            @if (itemCategoryRule.DeferToPlanetsideClassSettings)
                                            {
                                                @if (GetPlanetsideClassIsExtended(categoryId))
                                                {
                                                    <button @onclick="() => OnTogglePlanetsideClassExtension(itemCategoryRule.ItemCategoryId)" type="submit" style="padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Collapse Planetside class settings">
                                                        <span class="oi oi-caret-bottom"></span>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button @onclick="() => OnTogglePlanetsideClassExtension(itemCategoryRule.ItemCategoryId)" type="submit" style="padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Expand Planetside class settings">
                                                        <span class="oi oi-caret-left"></span>
                                                    </button>
                                                }
                                            }
                                        </td>
                                    </tr>

                                    @if (itemCategoryRule.DeferToPlanetsideClassSettings && GetPlanetsideClassIsExtended(categoryId))
                                    {
                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon infil" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>Infiltrator</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.InfiltratorPoints);">
                                                <InputNumber Value="@itemCategoryRule.InfiltratorPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemCategoryRule, CensusProfileType.Infiltrator, p))" ValueExpression="@(() => itemCategoryRule.InfiltratorPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.InfiltratorIsBanned);">
                                                <InputCheckbox Value="@itemCategoryRule.InfiltratorIsBanned" ValueChanged="@((b) => OnChangeRulePlanetsideClassIsBanned(itemCategoryRule, CensusProfileType.Infiltrator, b))" ValueExpression="@(() => itemCategoryRule.InfiltratorIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemCategoryRule.InfiltratorIsBanned ? "Yes" : "No")</span>
                                            </td>
                                        </tr>

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon la" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>Light Assault</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.LightAssaultPoints);">
                                                <InputNumber Value="@itemCategoryRule.LightAssaultPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemCategoryRule, CensusProfileType.LightAssault, p))" ValueExpression="@(() => itemCategoryRule.LightAssaultPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.LightAssaultIsBanned);">
                                                <InputCheckbox Value="@itemCategoryRule.LightAssaultIsBanned" ValueChanged="@((b) => OnChangeRulePlanetsideClassIsBanned(itemCategoryRule, CensusProfileType.LightAssault, b))" ValueExpression="@(() => itemCategoryRule.LightAssaultIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemCategoryRule.LightAssaultIsBanned ? "Yes" : "No")</span>
                                            </td>
                                        </tr>

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon medic" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>Medic</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.MedicPoints);">
                                                <InputNumber Value="@itemCategoryRule.MedicPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemCategoryRule, CensusProfileType.CombatMedic, p))" ValueExpression="@(() => itemCategoryRule.MedicPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.MedicIsBanned);">
                                                <InputCheckbox Value="@itemCategoryRule.MedicIsBanned" ValueChanged="@((b) => OnChangeRulePlanetsideClassIsBanned(itemCategoryRule, CensusProfileType.CombatMedic, b))" ValueExpression="@(() => itemCategoryRule.MedicIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemCategoryRule.MedicIsBanned ? "Yes" : "No")</span>
                                            </td>
                                        </tr>

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon engie" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>Engineer</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.EngineerPoints);">
                                                <InputNumber Value="@itemCategoryRule.EngineerPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemCategoryRule, CensusProfileType.Engineer, p))" ValueExpression="@(() => itemCategoryRule.EngineerPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.EngineerIsBanned);">
                                                <InputCheckbox Value="@itemCategoryRule.EngineerIsBanned" ValueChanged="@((b) => OnChangeRulePlanetsideClassIsBanned(itemCategoryRule, CensusProfileType.Engineer, b))" ValueExpression="@(() => itemCategoryRule.EngineerIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemCategoryRule.EngineerIsBanned ? "Yes" : "No")</span>
                                            </td>
                                        </tr>

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon heavy" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>Heavy Assault</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.HeavyAssaultPoints);">
                                                <InputNumber Value="@itemCategoryRule.HeavyAssaultPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemCategoryRule, CensusProfileType.HeavyAssault, p))" ValueExpression="@(() => itemCategoryRule.HeavyAssaultPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.HeavyAssaultIsBanned);">
                                                <InputCheckbox Value="@itemCategoryRule.HeavyAssaultIsBanned" ValueChanged="@((b) => OnChangeRulePlanetsideClassIsBanned(itemCategoryRule, CensusProfileType.HeavyAssault, b))" ValueExpression="@(() => itemCategoryRule.HeavyAssaultIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemCategoryRule.HeavyAssaultIsBanned ? "Yes" : "No")</span>
                                            </td>
                                        </tr>

                                        <tr class="sans-serif-font">
                                            <td style="color: var(--sq-black); padding-left: 24px;">
                                                <span class="playerLoadoutIcon ps2-icon max" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                                <span>MAX</span>
                                            </td>
                                            <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.MaxPoints);">
                                                <InputNumber Value="@itemCategoryRule.MaxPoints" ValueChanged="@((int p) => OnChangeRulePlanetsideClassPoints(itemCategoryRule, CensusProfileType.MAX, p))" ValueExpression="@(() => itemCategoryRule.MaxPoints)" style="text-align: right; width: 50px; color: var(--sq-black); border: 1px solid transparent; background-color: transparent;" />
                                            </td>

                                            <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.MaxIsBanned);">
                                                <InputCheckbox Value="@itemCategoryRule.MaxIsBanned" ValueChanged="@((b) => OnChangeRulePlanetsideClassIsBanned(itemCategoryRule, CensusProfileType.MAX, b))" ValueExpression="@(() => itemCategoryRule.MaxIsBanned)" style="position: relative; top: 1px;" /><span style="padding-left: 4px; color: var(--sq-black);">@(itemCategoryRule.MaxIsBanned ? "Yes" : "No")</span>
                                            </td>
                                        </tr>

                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <p>No item category rules...</p>
        }
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private IEnumerable<RulesetItemCategoryRule>? _itemCategoryRules { get; set; }
    private Dictionary<uint, ItemCategory> _itemCategories { get; set; }

    bool _isLoadingRules { get; set; } = false;
    bool _isSavingRules { get; set; } = false;
    bool _isClearingRules { get; set; } = false;

    private CancellationTokenSource? cts;

    private ConcurrentDictionary<uint, RulesetItemCategoryRule> _changedRules { get; set; } = new();
    private ConcurrentDictionary<uint, int> _originalRulePoints { get; set; } = new();
    private ConcurrentDictionary<uint, bool> _originalRuleDefers { get; set; } = new();
    private ConcurrentDictionary<uint, bool> _originalRuleBans { get; set; } = new();

    private ConcurrentDictionary<uint, bool> _originalRuleDeferToPlanetsideClasses { get; set; } = new();
    private ConcurrentDictionary<uint, PlanetsideClassRuleSettings> _originalRulePlanetsideClassSettings{ get; set; } = new();

    private int _changesCount { get; set; } = 0;

    private ItemCategoryDomain _selectedDomainView { get; set; } = ItemCategoryDomain.Infantry;

    private ConcurrentDictionary<uint, bool> _extendablePlanetsideClasses { get; set; } = new();


    #region Initializtion Methods

    public EditRulesetItemCategoryRules()
    {
        _itemCategories = new Dictionary<uint, ItemCategory>();
    }

    public void Dispose()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }
    }

    protected override void OnInitialized()
    {
        _renderedRulesetId = i_rulesetId;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRulesAsync();

        IEnumerable<ItemCategory>? getCategories = await ItemCategoryService.GetAllAsync();
        if (getCategories is not null)
            _itemCategories = getCategories.ToDictionary(x => x.Id, x => x);
    }

    protected override async Task OnParametersSetAsync()
    {
        bool paramsChanged = false;

        if (i_rulesetId != _renderedRulesetId)
        {
            _renderedRulesetId = i_rulesetId;

            await LoadRulesAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesAsync()
    {
        _isLoadingRules = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {
            Task<IEnumerable<RulesetItemCategoryRule>> _itemCategoryRulesTask = RulesetDataService.GetRulesetItemCategoryRulesAsync(_renderedRulesetId, cts.Token);

            await _itemCategoryRulesTask;

            _itemCategoryRules = _itemCategoryRulesTask.Result.ToList();

            cts.Token.ThrowIfCancellationRequested();

            _originalRulePoints.Clear();
            _originalRuleBans.Clear();
            _originalRuleDefers.Clear();
            _changedRules.Clear();
            _originalRuleDeferToPlanetsideClasses.Clear();
            _originalRulePlanetsideClassSettings.Clear();

            _changesCount = 0;

            foreach (RulesetItemCategoryRule rule in _itemCategoryRules.Where(r => r.DeferToPlanetsideClassSettings && !r.DeferToItemRules))
            {
                _extendablePlanetsideClasses.TryAdd(rule.ItemCategoryId, true);
            }
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isLoadingRules = false;
    }
    #endregion Initializtion Methods

    #region Form Event Handling
    private void OnChangeRulePoints(RulesetItemCategoryRule rule, int newPoints)
    {
        uint itemCategoryId = rule.ItemCategoryId;
        int currentPoints = rule.Points;

        // Subsequent change
        if (_originalRulePoints.TryGetValue(itemCategoryId, out int originalPoints))
        {
            rule.Points = newPoints;

            if (newPoints == originalPoints)
            {
                _originalRulePoints.TryRemove(itemCategoryId, out _);

                if (!RuleHasAnyChanges(itemCategoryId))
                {
                    _changedRules.TryRemove(itemCategoryId, out _);
                }
            }
            else
            {
                _changedRules.AddOrUpdate(itemCategoryId, rule, (_, _) => rule);
            }
        }
        // Initial change
        else
        {
            if (!_originalRulePoints.TryAdd(itemCategoryId, currentPoints))
            {
                _changesCount = _changedRules.Count();

                return;
            }

            rule.Points = newPoints;

            _changedRules.AddOrUpdate(itemCategoryId, rule, (_, _) => rule);
        }

        _changesCount = _changedRules.Count();
    }

    private void OnChangeRuleIsBanned(RulesetItemCategoryRule rule, bool newIsBanned)
    {
        uint itemCategoryId = rule.ItemCategoryId;
        bool currentIsBanned = rule.IsBanned;

        // Subsequent change
        if (_originalRuleBans.TryGetValue(itemCategoryId, out bool originalIsBanned))
        {
            if (newIsBanned == originalIsBanned)
            {
                _originalRuleBans.TryRemove(itemCategoryId, out _);

                if (!RuleHasAnyChanges(itemCategoryId))
                {
                    _changedRules.TryRemove(itemCategoryId, out _);
                }
            }

            rule.IsBanned = newIsBanned;
        }
        // Initial change
        else
        {
            if (!_originalRuleBans.TryAdd(itemCategoryId, currentIsBanned))
            {
                _changesCount = _changedRules.Count;
                return;
            }

            rule.IsBanned = newIsBanned;

            _changedRules.AddOrUpdate(itemCategoryId, rule, (_, _) => rule);
        }

        _changesCount = _changedRules.Count();

        InvokeAsyncStateHasChanged();
    }

    private void OnChangeRuleDefer(RulesetItemCategoryRule rule, bool newDefer)
    {
        uint itemCategoryId = rule.ItemCategoryId;
        bool currentDefer = rule.DeferToItemRules;

        // Subsequent change
        if (_originalRuleDefers.TryGetValue(itemCategoryId, out bool originalDefer))
        {
            if (newDefer == originalDefer)
            {
                _originalRuleDefers.TryRemove(itemCategoryId, out _);

                if (!RuleHasAnyChanges(itemCategoryId))
                {
                    _changedRules.TryRemove(itemCategoryId, out _);
                }
            }

            rule.DeferToItemRules = newDefer;
        }
        // Initial change
        else
        {
            if (!_originalRuleDefers.TryAdd(itemCategoryId, currentDefer))
            {
                _changesCount = _changedRules.Count;

                return;
            }

            rule.DeferToItemRules = newDefer;

            _changedRules.AddOrUpdate(itemCategoryId, rule, (_, _) => rule);
        }

        _changesCount = _changedRules.Count;

        if (newDefer)
        {
            OnChangeRuleDeferToPlanetsideClass(rule, false);
        }

        InvokeAsyncStateHasChanged();
    }

    private void OnChangeRuleDeferToPlanetsideClass(RulesetItemCategoryRule rule, bool newDefer)
    {
        uint itemCategoryId = rule.ItemCategoryId;
        bool currentDefer = rule.DeferToPlanetsideClassSettings;

        // Subsequent change
        if (_originalRuleDeferToPlanetsideClasses.TryGetValue(itemCategoryId, out bool originalDefer))
        {
            if (newDefer == originalDefer)
            {
                _originalRuleDeferToPlanetsideClasses.TryRemove(itemCategoryId, out _);

                if (!RuleHasAnyChanges(itemCategoryId))
                {
                    _changedRules.TryRemove(itemCategoryId, out _);
                }
            }

            rule.DeferToPlanetsideClassSettings = newDefer;
        }
        // Initial change
        else
        {
            if (!_originalRuleDeferToPlanetsideClasses.TryAdd(itemCategoryId, currentDefer))
            {
                _changesCount = _changedRules.Count;

                return;
            }

            rule.DeferToPlanetsideClassSettings = newDefer;

            _changedRules.AddOrUpdate(itemCategoryId, rule, (_, _) => rule);
        }

        _changesCount = _changedRules.Count;

        if (rule.DeferToPlanetsideClassSettings && !_extendablePlanetsideClasses.ContainsKey(itemCategoryId))
        {
            _extendablePlanetsideClasses.TryAdd(rule.ItemCategoryId, true);
        }
        else if (!rule.DeferToPlanetsideClassSettings && _extendablePlanetsideClasses.ContainsKey(itemCategoryId))
        {
            _extendablePlanetsideClasses.TryRemove(itemCategoryId, out _);
        }

        if (newDefer)
        {
            OnChangeRuleDefer(rule, false);
        }

        InvokeAsyncStateHasChanged();
    }

    private void OnChangeRulePlanetsideClassPoints(RulesetItemCategoryRule rule, CensusProfileType planetsideClass, int newPoints)
    {
        uint itemCategoryId = rule.ItemCategoryId;
        PlanetsideClassRuleSettings currentRuleClassSettings = rule.GetPlanetsideClassRuleSettings();
        currentRuleClassSettings.GetClassPoints(planetsideClass);

        // Subsequent change
        if (_originalRulePlanetsideClassSettings.TryGetValue(itemCategoryId, out PlanetsideClassRuleSettings? originalRuleClassSettings))
        {
            int originalClassPoints = originalRuleClassSettings.GetClassPoints(planetsideClass);

            if (newPoints == originalClassPoints)
            {
                _originalRulePlanetsideClassSettings.TryRemove(itemCategoryId, out _);

                if (!RuleHasAnyChanges(itemCategoryId))
                {
                    _changedRules.TryRemove(itemCategoryId, out _);
                }
            }

            currentRuleClassSettings.SetClassPoints(planetsideClass, newPoints);
            rule.SetPlanetsideClassSettings(currentRuleClassSettings);
        }
        // Initial change
        else
        {
            if (!_originalRulePlanetsideClassSettings.TryAdd(itemCategoryId, currentRuleClassSettings))
            {
                _changesCount = _changedRules.Count;

                return;
            }

            PlanetsideClassRuleSettings newClassSettings = rule.GetPlanetsideClassRuleSettings();
            newClassSettings.SetClassPoints(planetsideClass, newPoints);
            rule.SetPlanetsideClassSettings(newClassSettings);

            _changedRules.AddOrUpdate(itemCategoryId, rule, (_, _) => rule);
        }

        _changesCount = _changedRules.Count;

        InvokeAsyncStateHasChanged();
    }

    private void OnChangeRulePlanetsideClassIsBanned(RulesetItemCategoryRule rule, CensusProfileType planetsideClass, bool newIsBanned)
    {
        uint itemCategoryId = rule.ItemCategoryId;
        PlanetsideClassRuleSettings currentRuleClassSettings = rule.GetPlanetsideClassRuleSettings();
        currentRuleClassSettings.GetClassIsBanned(planetsideClass);

        // Subsequent change
        if (_originalRulePlanetsideClassSettings.TryGetValue(itemCategoryId, out PlanetsideClassRuleSettings? originalRuleClassSettings))
        {
            bool originalClassIsBanned = originalRuleClassSettings.GetClassIsBanned(planetsideClass);

            if (newIsBanned == originalClassIsBanned)
            {
                _originalRulePlanetsideClassSettings.TryRemove(itemCategoryId, out _);

                if (!RuleHasAnyChanges(itemCategoryId))
                {
                    _changedRules.TryRemove(itemCategoryId, out _);
                }
            }

            currentRuleClassSettings.SetClassIsBanned(planetsideClass, newIsBanned);
            rule.SetPlanetsideClassSettings(currentRuleClassSettings);
        }
        // Initial change
        else
        {
            if (!_originalRulePlanetsideClassSettings.TryAdd(itemCategoryId, currentRuleClassSettings))
            {
                _changesCount = _changedRules.Count;

                return;
            }

            PlanetsideClassRuleSettings newClassSettings = rule.GetPlanetsideClassRuleSettings();
            newClassSettings.SetClassIsBanned(planetsideClass, newIsBanned);
            rule.SetPlanetsideClassSettings(newClassSettings);

            _changedRules.AddOrUpdate(itemCategoryId, rule, (_, _) => rule);
        }

        _changesCount = _changedRules.Count;

        InvokeAsyncStateHasChanged();
    }


    private bool RuleHasAnyChanges(uint itemCategoryId)
    {
        return RuleHasPointChange(itemCategoryId)
                || RuleHasBanChange(itemCategoryId)
                || RuleHasDeferChange(itemCategoryId)
                || RuleHasDeferToPlanetsideClassChange(itemCategoryId)
                || RuleHasPlanetsideClassSettingsChange(itemCategoryId);
    }

    private bool RuleHasPointChange(uint itemCategoryId)
    {
        return _originalRulePoints.ContainsKey(itemCategoryId);
    }

    private bool RuleHasBanChange(uint itemCategoryId)
    {
        return _originalRuleBans.ContainsKey(itemCategoryId);
    }

    private bool RuleHasDeferChange(uint itemCategoryId)
    {
        return _originalRuleDefers.ContainsKey(itemCategoryId);
    }

    private bool RuleHasDeferToPlanetsideClassChange(uint itemCategoryId)
    {
        return _originalRuleDeferToPlanetsideClasses.ContainsKey(itemCategoryId);
    }

    private bool RuleHasPlanetsideClassSettingsChange(uint itemCategoryId)
    {
        return _originalRulePlanetsideClassSettings.ContainsKey(itemCategoryId);
    }

    #endregion Form Event Handling

    #region Form Submit Handling
    private async void OnSaveScrimItemCategoryRulesEditSubmit(bool isManualClick)
    {
        if (!isManualClick)
        {
            return;
        }

        if (_changedRules.Any())
        {
            _isSavingRules = true;
            InvokeAsyncStateHasChanged();

            await RulesetDataService.SaveRulesetItemCategoryRules(_renderedRulesetId, _changedRules.Values);

            _originalRulePoints.Clear();
            _originalRuleBans.Clear();
            _originalRuleDefers.Clear();
            _changedRules.Clear();
            _originalRuleDeferToPlanetsideClasses.Clear();
            _originalRulePlanetsideClassSettings.Clear();
            _changesCount = 0;

            _isSavingRules = false;

            await LoadRulesAsync();

            InvokeAsyncStateHasChanged();
        }
    }

    private void OnClearRuleChanges()
    {
        if (_changedRules.IsEmpty || _itemCategoryRules is null || !_itemCategoryRules.Any())
            return;

        _isClearingRules = true;

        foreach (KeyValuePair<uint, int> idPointsPair in _originalRulePoints)
        {
            RulesetItemCategoryRule? rule = _itemCategoryRules.FirstOrDefault(r => r.ItemCategoryId == idPointsPair.Key);
            if (rule is not null)
                rule.Points = idPointsPair.Value;
        }

        foreach (KeyValuePair<uint, bool> idBanPair in _originalRuleBans)
        {
            RulesetItemCategoryRule? rule = _itemCategoryRules.FirstOrDefault(r => r.ItemCategoryId == idBanPair.Key);
            if (rule is not null)
                rule.IsBanned = idBanPair.Value;
        }

        foreach (KeyValuePair<uint, bool> idDeferPair in _originalRuleDefers)
        {
            RulesetItemCategoryRule? rule = _itemCategoryRules.FirstOrDefault(r => r.ItemCategoryId == idDeferPair.Key);
            if (rule is not null)
                rule.DeferToItemRules = idDeferPair.Value;
        }

        foreach (KeyValuePair<uint, bool> idDeferToClassPair in _originalRuleDeferToPlanetsideClasses)
        {
            RulesetItemCategoryRule? rule = _itemCategoryRules.FirstOrDefault(r => r.ItemCategoryId == idDeferToClassPair.Key);
            if (rule is not null)
                rule.DeferToPlanetsideClassSettings = idDeferToClassPair.Value;
        }

        foreach (KeyValuePair<uint, PlanetsideClassRuleSettings> idClassSettingsPair in _originalRulePlanetsideClassSettings)
        {
            _itemCategoryRules.FirstOrDefault(r => r.ItemCategoryId == idClassSettingsPair.Key)?
                .SetPlanetsideClassSettings(idClassSettingsPair.Value);
        }

        _originalRulePoints.Clear();
        _originalRuleBans.Clear();
        _originalRuleDefers.Clear();
        _changedRules.Clear();
        _originalRuleDeferToPlanetsideClasses.Clear();
        _originalRulePlanetsideClassSettings.Clear();
        _changesCount = 0;

        _isClearingRules = false;
    }
    #endregion Form Submit Handling

    private bool GetPlanetsideClassIsExtended(uint itemCategoryId)
        => _extendablePlanetsideClasses.TryGetValue(itemCategoryId, out bool isExtendable) && isExtendable;

    private void OnTogglePlanetsideClassExtension(uint itemCategoryId)
    {
        if (_extendablePlanetsideClasses.TryGetValue(itemCategoryId, out bool currentIsExtended))
            _extendablePlanetsideClasses.TryUpdate(itemCategoryId, !currentIsExtended, currentIsExtended);
    }

    private string GetItemCategoryDomainDescription(ItemCategoryDomain domain)
        => Regex.Replace(domain.ToString(), @"(\p{Ll})(\p{Lu})", "$1 $2");

    private string GetViewTabStyle(ItemCategoryDomain thisView)
        => _selectedDomainView == thisView
            ? "view-visible"
            : "view-hidden";

    private void OnSelectNewView(ItemCategoryDomain newView)
    {
        if (newView != _selectedDomainView)
            _selectedDomainView = newView;
    }

    private double GetValueOpacity(int value)
        => value != 0 ? 1.0 : 0.5;

    private double GetBoolValueOpacity(bool value)
        => value ? 1.0 : 0.5;

    private void InvokeAsyncStateHasChanged()
        => InvokeAsync(StateHasChanged);
}
