@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using System.Threading;
@using DbgCensus.Core.Objects
@using squittal.ScrimPlanetmans.App.Abstractions.Services.CensusRest
@using squittal.ScrimPlanetmans.App.Abstractions.Services.Rulesets
@using squittal.ScrimPlanetmans.App.Models.CensusRest
@using squittal.ScrimPlanetmans.App.Models.Planetside
@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models

@inject ICensusMapRegionService MapRegionService
@inject IRulesetDataService RulesetDataService
@inject ICensusZoneService ZoneService

@implements IDisposable

<div class="sq-mini-card-6 default" style="min-width: 420px; background-color: transparent; box-shadow: 0 2px 5px 0 var(--sq-light-blue-gray);">
    <h5>Facility Rules</h5>

    @if (_isLoadingRules)
    {
        <SpinnerEllipsis />
    }
    else
    {
        <div class="sq-content" style="margin-top: 8px;">

            <div class="tabbed-button-container">
                <button type="button"
                        title="View all facility rules"
                        class="btn btn-link @GetViewTabStyle(0)"
                        @onclick="@(() => OnSelectNewView(0))">
                    All
                </button>
                <button type="button"
                        title="View Hossin facility rules"
                        class="btn btn-link @GetViewTabStyle(ZoneDefinition.Hossin)"
                        @onclick="@(() => OnSelectNewView(ZoneDefinition.Hossin))">
                    Hossin
                </button>
                <button type="button"
                        title="View Indar facility rules"
                        class="btn btn-link @GetViewTabStyle(ZoneDefinition.Indar)"
                        @onclick="@(() => OnSelectNewView(ZoneDefinition.Indar))">
                    Indar
                </button>
                <button type="button"
                        title="View Esamir facility rules"
                        class="btn btn-link @GetViewTabStyle(ZoneDefinition.Esamir)"
                        @onclick="@(() => OnSelectNewView(ZoneDefinition.Esamir))">
                    Esamir
                </button>
                <button type="button"
                        title="View Amerish facility rules"
                        class="btn btn-link @GetViewTabStyle(ZoneDefinition.Amerish)"
                        @onclick="@(() => OnSelectNewView(ZoneDefinition.Amerish))">
                    Amerish
                </button>
                <button type="button"
                        title="View Oshur facility rules"
                        class="btn btn-link @GetViewTabStyle(ZoneDefinition.Oshur)"
                        @onclick="@(() => OnSelectNewView(ZoneDefinition.Oshur))">
                    Oshur
                </button>
            </div>

            <div style="max-height: 544px; overflow-y: auto; margin-bottom: 4px; border-bottom: 1px solid var(--sq-black-alpha-50);">

                @if (_facilityRules != null && _mapRegionsByFacilityId is not null)
                {
                    <table class="table-responsive-sm table-striped-light default sans-serif-font" style="border-bottom: none;">
                        <thead style="border-bottom: 1px solid var(--sq-black-alpha-50);">
                            <tr>
                                <th style="padding-bottom: 2px; padding-left: 8px;">Facility <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[ID]</span></th>
                                @if (_selectedZoneIdView == 0)
                                {
                                    <th style="padding-bottom: 2px; padding-left: 8px;">Continent</th>
                                }
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (RulesetFacilityRule facilityRule in _facilityRules)
                            {
                                if (!_mapRegionsByFacilityId.TryGetValue(facilityRule.FacilityId, out CensusMapRegion? mapRegion))
                                    continue;

                                if (_selectedZoneIdView is not 0 && mapRegion.ZoneId != _selectedZoneIdView)
                                    continue;

                                <tr class="sans-serif-font">
                                    <td style="color: var(--sq-black); padding-left: 8px;">@mapRegion.FacilityName <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[@facilityRule.FacilityId]</span></td>
                                    @if (_selectedZoneIdView == 0)
                                    {
                                        <td style="color: var(--sq-black); padding-left: 8px;">@GetZoneName(mapRegion.ZoneId)</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    @if (_selectedZoneIdView == 0)
                    {
                        <p class="sans-serif-font" style="margin-top: 4px; margin-bottom: 4px; font-weight: 400; font-style: italic">There are no facility rules for this ruleset</p>
                    }
                    else
                    {
                        <p class="sans-serif-font" style="margin-top: 4px; margin-bottom: 4px; font-weight: 400; font-style: italic">There are no @(GetZoneName(_selectedZoneIdView)) facility rules for this ruleset</p>
                    }
                }
            </div>
        </div>
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private List<RulesetFacilityRule>? _facilityRules { get; set; }
    private Dictionary<uint, CensusMapRegion>? _mapRegionsByFacilityId;
    private Dictionary<ZoneDefinition, string> _zoneNames { get; set; } = new();

    private bool _isLoadingRules { get; set; } = false;

    private ZoneDefinition _selectedZoneIdView { get; set; } = 0; // All Zones

    private CancellationTokenSource? _cts;

    public void Dispose()
    {
        if (_cts != null)
        {
            _cts.Cancel();
            _cts.Dispose();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _renderedRulesetId = i_rulesetId;

        await LoadRulesetAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        bool paramsChanged = false;

        if (i_rulesetId != _renderedRulesetId)
        {
            _renderedRulesetId = i_rulesetId;

            await LoadRulesetAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesetAsync()
    {
        _isLoadingRules = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        _cts?.Cancel();

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new();
        _cts = newCTS;

        try
        {
            IReadOnlyList<CensusMapRegion>? regions = await MapRegionService.GetAllAsync(_cts.Token);
            IReadOnlyList<CensusZone>? zones = await ZoneService.GetAllAsync(_cts.Token);
            IEnumerable<RulesetFacilityRule> facilityRules = await RulesetDataService.GetRulesetFacilityRulesAsync
            (
                _renderedRulesetId,
                _cts.Token
            );

            _facilityRules = facilityRules.ToList();

            if (zones is not null)
            {
                _zoneNames = zones.ToDictionary
                (
                    z => z.ZoneId, z => z.Name.English.GetValueOrDefault() ?? z.ZoneId.ToString()
                );
            }

            if (regions is not null)
            {
                _mapRegionsByFacilityId = regions.Where(r => r.FacilityId is not 0)
                    .ToDictionary(r => r.FacilityId, r => r);
            }
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (_cts == newCTS)
        {
            _cts = null;
        }

        _isLoadingRules = false;
    }

    private string GetViewTabStyle(ZoneDefinition zone)
        => _selectedZoneIdView == zone
            ? "view-visible"
            : "view-hidden";

    private void OnSelectNewView(ZoneDefinition newView)
    {
        if (newView != _selectedZoneIdView)
            _selectedZoneIdView = newView;
    }

    private string GetZoneName(ZoneDefinition zoneId)
        => _zoneNames.TryGetValue(zoneId, out string? zoneName)
            ? zoneName
            : zoneId.ToString();

    private void InvokeAsyncStateHasChanged()
        => InvokeAsync(StateHasChanged);
}
