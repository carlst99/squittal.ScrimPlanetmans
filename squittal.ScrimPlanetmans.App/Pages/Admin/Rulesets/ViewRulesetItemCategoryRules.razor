@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using System.Text.RegularExpressions;
@using System.Threading;
@using System.Collections.Concurrent;
@using squittal.ScrimPlanetmans.App.Abstractions.Services.Planetside
@using squittal.ScrimPlanetmans.App.Abstractions.Services.Rulesets
@using squittal.ScrimPlanetmans.App.Models.Planetside
@using squittal.ScrimPlanetmans.App.ScrimMatch.Ruleset.Models
@using squittal.ScrimPlanetmans.App.Services.Planetside.Interfaces

@inject IItemCategoryService ItemCategoryService
@inject IRulesetDataService RulesetDataService

@implements IDisposable

<div class="sq-mini-card-6 default" style="min-width: 420px; background-color: transparent; box-shadow: 0 2px 5px 0 var(--sq-light-blue-gray); margin-right: 16px;  max-width: calc(50% - 8px);">
    <h5>Item Category Rules</h5>

    @if (_isLoadingRules)
    {
        <SpinnerEllipsis />
    }
    else
    {
        @if (_itemCategoryRules != null && _itemCategoryRules.Any())
        {
            <div class="sq-content" style="margin-top: 8px;">

                <div class="tabbed-button-container" style="">
                    <button type="button" title="View infantry item category rules" class="btn btn-link @GetViewTabStyle(ItemCategoryDomain.Infantry)" @onclick="@(() => OnSelectNewView(ItemCategoryDomain.Infantry))">Infantry</button>
                    <button type="button" title="View MAX item category rules" class="btn btn-link @GetViewTabStyle(ItemCategoryDomain.Max)" @onclick="@(() => OnSelectNewView(ItemCategoryDomain.Max))">MAX</button>
                    <button type="button" title="View ground vehicle item category rules" class="btn btn-link @GetViewTabStyle(ItemCategoryDomain.GroundVehicle)" @onclick="@(() => OnSelectNewView(ItemCategoryDomain.GroundVehicle))">Ground</button>
                    <button type="button" title="View air vehicle item category rules" class="btn btn-link @GetViewTabStyle(ItemCategoryDomain.AirVehicle)" @onclick="@(() => OnSelectNewView(ItemCategoryDomain.AirVehicle))">Air</button>
                </div>

                <div style="max-height: 544px; overflow-y: auto; border-bottom: 1px solid var(--sq-black-alpha-50);">
                    <table class="table-responsive-sm table-striped-light default sans-serif-font" style="border-bottom: none;">
                        <thead style="border-bottom: 1px solid var(--sq-black-alpha-50);">
                            <tr>
                                <th style="padding-bottom: 2px;">Item Category <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[ID]</span></th>
                                <th style="padding-bottom: 2px;">Points</th>
                                <th style="padding-bottom: 2px;">Banned?</th>
                                <th style="padding-bottom: 2px;">Defer to<br />Classes?</th>
                                <th style="padding-bottom: 2px;">Defer to<br />Item Rules?</th>
                            </tr>
                        </thead>

                        <tbody>
                            @{
                                IEnumerable<RulesetItemCategoryRule> rules = _itemCategoryRules.Where
                                (
                                    r => _itemCategories.TryGetValue(r.ItemCategoryId, out ItemCategory? category)
                                        && category.Domain == _selectedDomainView
                                );
                            }
                                                    
                            @foreach (RulesetItemCategoryRule itemCategoryRule in rules)
                            {
                                uint categoryId = itemCategoryRule.ItemCategoryId;
                                string categoryName = _itemCategories.TryGetValue
                                    (
                                        categoryId,
                                        out ItemCategory? category
                                    )
                                    ? category.Name
                                    : $"Unknown{categoryId}";

                                <tr class="sans-serif-font">
                                    <td style="color: var(--sq-black);">@categoryName <span class="mono-font" style="color: var(--sq-gray); font-size: smaller;">[@categoryId]</span></td>
                                    <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.Points); text-align: right; width: 50px; color: var(--sq-black);">@itemCategoryRule.Points</td>
                                    <td style="color: var(--sq-black); opacity: @GetBoolValueOpacity(itemCategoryRule.IsBanned);">@itemCategoryRule.IsBanned</td>
                                    <td style="color: var(--sq-black); opacity: @GetBoolValueOpacity(itemCategoryRule.DeferToPlanetsideClassSettings);">@itemCategoryRule.DeferToPlanetsideClassSettings</td>
                                    <td style="color: var(--sq-black); opacity: @GetBoolValueOpacity(itemCategoryRule.DeferToItemRules);">@itemCategoryRule.DeferToItemRules</td>

                                    <td style="padding-right: 8px;">
                                        @if (itemCategoryRule.DeferToPlanetsideClassSettings)
                                        {
                                            @if (GetPlanetsideClassIsExtended(categoryId))
                                            {
                                                <button @onclick="() => OnTogglePlanetsideClassExtension(categoryId)" type="submit" style="padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Collapse Planetside class settings">
                                                    <span class="oi oi-caret-bottom"></span>
                                                </button>
                                            }
                                            else
                                            {
                                                <button @onclick="() => OnTogglePlanetsideClassExtension(itemCategoryRule.ItemCategoryId)" type="submit" style="padding: 0 4px; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" title="Expand Planetside class settings">
                                                    <span class="oi oi-caret-left"></span>
                                                </button>
                                            }
                                        }
                                    </td>

                                </tr>

                                @if (itemCategoryRule.DeferToPlanetsideClassSettings && GetPlanetsideClassIsExtended(categoryId))
                                {
                                    <tr class="sans-serif-font">
                                        <td style="color: var(--sq-black); padding-left: 24px;">
                                            <span class="playerLoadoutIcon ps2-icon infil" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                            <span>Infiltrator</span>
                                        </td>
                                        <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.InfiltratorPoints); text-align: right; color: var(--sq-black);">
                                            @itemCategoryRule.InfiltratorPoints
                                        </td>

                                        <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.InfiltratorIsBanned); color: var(--sq-black);">
                                            @itemCategoryRule.InfiltratorIsBanned
                                        </td>
                                    </tr>

                                    <tr class="sans-serif-font">
                                        <td style="color: var(--sq-black); padding-left: 24px;">
                                            <span class="playerLoadoutIcon ps2-icon la" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                            <span>Light Assault</span>
                                        </td>
                                        <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.LightAssaultPoints); text-align: right; color: var(--sq-black);">
                                            @itemCategoryRule.LightAssaultPoints
                                        </td>

                                        <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.LightAssaultIsBanned); color: var(--sq-black);">
                                            @itemCategoryRule.LightAssaultIsBanned
                                        </td>
                                    </tr>

                                    <tr class="sans-serif-font">
                                        <td style="color: var(--sq-black); padding-left: 24px;">
                                            <span class="playerLoadoutIcon ps2-icon medic" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                            <span>Medic</span>
                                        </td>
                                        <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.MedicPoints); text-align: right; color: var(--sq-black);">
                                            @itemCategoryRule.MedicPoints
                                        </td>

                                        <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.MedicIsBanned); color: var(--sq-black);">
                                            @itemCategoryRule.MedicIsBanned
                                        </td>
                                    </tr>

                                    <tr class="sans-serif-font">
                                        <td style="color: var(--sq-black); padding-left: 24px;">
                                            <span class="playerLoadoutIcon ps2-icon engie" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                            <span>Engineer</span>
                                        </td>
                                        <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.EngineerPoints); text-align: right; color: var(--sq-black);">
                                            @itemCategoryRule.EngineerPoints
                                        </td>

                                        <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.EngineerIsBanned); color: var(--sq-black);">
                                            @itemCategoryRule.EngineerIsBanned
                                        </td>
                                    </tr>

                                    <tr class="sans-serif-font">
                                        <td style="color: var(--sq-black); padding-left: 24px;">
                                            <span class="playerLoadoutIcon ps2-icon heavy" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                            <span>Heavy Assault</span>
                                        </td>
                                        <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.HeavyAssaultPoints); text-align: right; color: var(--sq-black);">
                                            @itemCategoryRule.HeavyAssaultPoints
                                        </td>

                                        <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.HeavyAssaultIsBanned); color: var(--sq-black);">
                                            @itemCategoryRule.HeavyAssaultIsBanned
                                        </td>
                                    </tr>

                                    <tr class="sans-serif-font">
                                        <td style="color: var(--sq-black); padding-left: 24px;">
                                            <span class="playerLoadoutIcon ps2-icon max" style="filter: brightness(0) saturate(90%); height: 12px; width: 12px; display: inline-block; position: relative; top: 1px;"></span>
                                            <span>MAX</span>
                                        </td>
                                        <td class="mono-font" style="opacity: @GetValueOpacity(itemCategoryRule.MaxPoints); text-align: right; color: var(--sq-black);">
                                            @itemCategoryRule.MaxPoints
                                        </td>

                                        <td style="opacity: @GetBoolValueOpacity(itemCategoryRule.MaxIsBanned); color: var(--sq-black);">
                                            @itemCategoryRule.MaxIsBanned
                                        </td>
                                    </tr>

                                }
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            <p>No item category rules...</p>
        }
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private IEnumerable<RulesetItemCategoryRule>? _itemCategoryRules { get; set; }
    private Dictionary<uint, ItemCategory> _itemCategories { get; set; }

    bool _isLoadingRules { get; set; } = false;

    private CancellationTokenSource? _cts;

    private ItemCategoryDomain _selectedDomainView { get; set; } = ItemCategoryDomain.Infantry;

    private ConcurrentDictionary<uint, bool> _extendablePlanetsideClasses { get; set; } = new();

    #region Initializtion Methods

    public ViewRulesetItemCategoryRules()
    {
        _itemCategories = new Dictionary<uint, ItemCategory>();
    }

    public void Dispose()
    {
        if (_cts != null)
        {
            _cts.Cancel();
            _cts.Dispose();
        }
    }

    protected override void OnInitialized()
    {
        _renderedRulesetId = i_rulesetId;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRulesAsync();

        IEnumerable<ItemCategory>? getCategories = await ItemCategoryService.GetAllAsync();
        if (getCategories is not null)
            _itemCategories = getCategories.ToDictionary(x => x.Id, x => x);
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (i_rulesetId != _renderedRulesetId)
        {
            _renderedRulesetId = i_rulesetId;

            await LoadRulesAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesAsync()
    {
        _isLoadingRules = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (_cts != null)
        {
            _cts.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        _cts = newCTS;

        try
        {
            _itemCategoryRules = await RulesetDataService.GetRulesetItemCategoryRulesAsync(_renderedRulesetId, _cts.Token);

            _cts.Token.ThrowIfCancellationRequested();

            foreach (var rule in _itemCategoryRules.Where(r => r.DeferToPlanetsideClassSettings && !r.DeferToItemRules))
            {
                _extendablePlanetsideClasses.TryAdd(rule.ItemCategoryId, true);
            }
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (_cts == newCTS)
        {
            _cts = null;
        }

        _isLoadingRules = false;
    }
    #endregion Initializtion Methods

    #region UI Controls

    private bool GetPlanetsideClassIsExtended(uint itemCategoryId)
        => _extendablePlanetsideClasses.TryGetValue(itemCategoryId, out bool isExtendable) && isExtendable;

    private void OnTogglePlanetsideClassExtension(uint itemCategoryId)
    {
        if (_extendablePlanetsideClasses.TryGetValue(itemCategoryId, out bool currentIsExtended))
            _extendablePlanetsideClasses.TryUpdate(itemCategoryId, !currentIsExtended, currentIsExtended);
    }

    #endregion UI Controls

    private string GetItemCategoryDomainDescription(ItemCategoryDomain domain)
        => Regex.Replace(domain.ToString(), @"(\p{Ll})(\p{Lu})", "$1 $2");

    private string GetViewTabStyle(ItemCategoryDomain thisView)
        => _selectedDomainView == thisView
            ? "view-visible"
            : "view-hidden";

    private void OnSelectNewView(ItemCategoryDomain newView)
    {
        if (newView != _selectedDomainView)
            _selectedDomainView = newView;
    }

    private double GetValueOpacity(int value)
        => value != 0 ? 1.0 : 0.5;

    private double GetBoolValueOpacity(bool value)
        => value ? 1.0 : 0.5;

    private void InvokeAsyncStateHasChanged()
        => InvokeAsync(StateHasChanged);
}
